{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-cosy/source/css/21599f71.css","path":"css/21599f71.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/02b34a09.css","path":"css/02b34a09.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/34fee1b9.css","path":"css/34fee1b9.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/32fa10f2.css","path":"css/32fa10f2.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/3a4a90d1.css","path":"css/3a4a90d1.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/3c11e750.css","path":"css/3c11e750.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/480d1cae.css","path":"css/480d1cae.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/4fe30414.css","path":"css/4fe30414.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/61875ce9.css","path":"css/61875ce9.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/7d333f9e.css","path":"css/7d333f9e.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/9bb9a539.css","path":"css/9bb9a539.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/90d5ae48.css","path":"css/90d5ae48.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/b4c95347.css","path":"css/b4c95347.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/db04a759.css","path":"css/db04a759.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/f3729dde.css","path":"css/f3729dde.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/font/linear.woff2","path":"font/linear.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/font/motto.woff","path":"font/motto.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-arrow-left.svg","path":"img/icon-arrow-left.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-book.svg","path":"img/icon-book.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-click.svg","path":"img/icon-click.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-date.svg","path":"img/icon-date.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-flash.svg","path":"img/icon-flash.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-layout.svg","path":"img/icon-layout.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-moon.svg","path":"img/icon-moon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-link.svg","path":"img/icon-link.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon2.svg","path":"img/icon2.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon1.svg","path":"img/icon1.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-sun.svg","path":"img/icon-sun.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon3.svg","path":"img/icon3.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/monster.png","path":"img/monster.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/31d6cfe0.js","path":"js/31d6cfe0.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/3cf4fd98.js","path":"js/3cf4fd98.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/4f127d19.js","path":"js/4f127d19.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/4f127d19.js.LICENSE.txt","path":"js/4f127d19.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/5bf38c1b.js","path":"js/5bf38c1b.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/62d6af47.js","path":"js/62d6af47.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/62d6af47.js.LICENSE.txt","path":"js/62d6af47.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/82a967e8.js","path":"js/82a967e8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/82a967e8.js.LICENSE.txt","path":"js/82a967e8.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/a7402528.js","path":"js/a7402528.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/b72255a3.js","path":"js/b72255a3.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/b72255a3.js.LICENSE.txt","path":"js/b72255a3.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/d50bb744.js","path":"js/d50bb744.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/d50bb744.js.LICENSE.txt","path":"js/d50bb744.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/da8f6845.js","path":"js/da8f6845.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/e0a67917.js","path":"js/e0a67917.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/f0821b81.js","path":"js/f0821b81.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/100.png","path":"img/qweather-color-icon/100.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/102.png","path":"img/qweather-color-icon/102.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/103.png","path":"img/qweather-color-icon/103.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/101.png","path":"img/qweather-color-icon/101.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/151.png","path":"img/qweather-color-icon/151.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/152.png","path":"img/qweather-color-icon/152.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/153.png","path":"img/qweather-color-icon/153.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/104.png","path":"img/qweather-color-icon/104.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/150.png","path":"img/qweather-color-icon/150.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/300.png","path":"img/qweather-color-icon/300.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/301.png","path":"img/qweather-color-icon/301.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/304.png","path":"img/qweather-color-icon/304.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/302.png","path":"img/qweather-color-icon/302.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/305.png","path":"img/qweather-color-icon/305.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/306.png","path":"img/qweather-color-icon/306.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/307.png","path":"img/qweather-color-icon/307.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/308.png","path":"img/qweather-color-icon/308.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/303.png","path":"img/qweather-color-icon/303.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/309.png","path":"img/qweather-color-icon/309.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/310.png","path":"img/qweather-color-icon/310.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/311.png","path":"img/qweather-color-icon/311.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/312.png","path":"img/qweather-color-icon/312.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/313.png","path":"img/qweather-color-icon/313.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/314.png","path":"img/qweather-color-icon/314.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/315.png","path":"img/qweather-color-icon/315.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/316.png","path":"img/qweather-color-icon/316.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/318.png","path":"img/qweather-color-icon/318.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/317.png","path":"img/qweather-color-icon/317.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/350.png","path":"img/qweather-color-icon/350.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/351.png","path":"img/qweather-color-icon/351.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/399.png","path":"img/qweather-color-icon/399.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/400.png","path":"img/qweather-color-icon/400.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/403.png","path":"img/qweather-color-icon/403.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/404.png","path":"img/qweather-color-icon/404.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/401.png","path":"img/qweather-color-icon/401.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/402.png","path":"img/qweather-color-icon/402.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/406.png","path":"img/qweather-color-icon/406.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/407.png","path":"img/qweather-color-icon/407.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/410.png","path":"img/qweather-color-icon/410.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/456.png","path":"img/qweather-color-icon/456.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/409.png","path":"img/qweather-color-icon/409.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/408.png","path":"img/qweather-color-icon/408.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/457.png","path":"img/qweather-color-icon/457.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/499.png","path":"img/qweather-color-icon/499.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/500.png","path":"img/qweather-color-icon/500.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/501.png","path":"img/qweather-color-icon/501.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/502.png","path":"img/qweather-color-icon/502.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/503.png","path":"img/qweather-color-icon/503.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/504.png","path":"img/qweather-color-icon/504.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/507.png","path":"img/qweather-color-icon/507.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/508.png","path":"img/qweather-color-icon/508.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/510.png","path":"img/qweather-color-icon/510.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/509.png","path":"img/qweather-color-icon/509.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/512.png","path":"img/qweather-color-icon/512.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/511.png","path":"img/qweather-color-icon/511.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/513.png","path":"img/qweather-color-icon/513.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/514.png","path":"img/qweather-color-icon/514.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/515.png","path":"img/qweather-color-icon/515.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/900.png","path":"img/qweather-color-icon/900.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/901.png","path":"img/qweather-color-icon/901.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/999.png","path":"img/qweather-color-icon/999.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/lib/prism/one-dark.css","path":"lib/prism/one-dark.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/lib/prism/one-light.css","path":"lib/prism/one-light.css","modified":0,"renderable":1},{"_id":"source/img/Chose-B.jpg","path":"img/Chose-B.jpg","modified":0,"renderable":0},{"_id":"source/img/VEX/2023_11_11_testing_data.jpg","path":"img/VEX/2023_11_11_testing_data.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/VEX机器人程序.md","hash":"a641cca07eebbbdcdfaf3c794faea8356365d009","modified":1706961602914},{"_id":"source/_posts/hello-world.md","hash":"44413783ed325553ad05f72650e2323944a7a110","modified":1706877718080},{"_id":"source/likes/index.md","hash":"e7a3a8293bf042e66ecf27b07a4706aeda18289f","modified":1706615022958},{"_id":"source/cosy-resume/index.md","hash":"1fb5d67761ffca6feed18714b5d76a1e3595215e","modified":1706877585810},{"_id":"source/_posts/路桥第一马戏团出道录.md","hash":"f1f35debb353ef009da1ece7214991bc3f0597d6","modified":1706868308650},{"_id":"source/likes/tools/index.md","hash":"c96bb92eb9c05f298a2b967d8d7ff79964152e57","modified":1706614934999},{"_id":"source/cosy-roadmap/index.md","hash":"a5df24816e99def95e0d7e99534dbf623c788a71","modified":1706873066198},{"_id":"node_modules/hexo-theme-cosy/languages/de.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758552},{"_id":"node_modules/hexo-theme-cosy/languages/ar.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758550},{"_id":"node_modules/hexo-theme-cosy/languages/es.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758554},{"_id":"node_modules/hexo-theme-cosy/languages/ko.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758556},{"_id":"node_modules/hexo-theme-cosy/languages/fr.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758555},{"_id":"node_modules/hexo-theme-cosy/languages/ru.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758559},{"_id":"node_modules/hexo-theme-cosy/languages/ja.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758555},{"_id":"node_modules/hexo-theme-cosy/languages/zh-TW.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758561},{"_id":"node_modules/hexo-theme-cosy/source/js/31d6cfe0.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513756443},{"_id":"node_modules/hexo-theme-cosy/_config.yml","hash":"d28c7e6cf5eef23ee927b6095b5c1e919a3a5226","modified":1706516168970},{"_id":"node_modules/hexo-theme-cosy/package.json","hash":"1804505a45546c287e7dad414684202d2121c886","modified":1706513757122},{"_id":"node_modules/hexo-theme-cosy/languages/en.yml","hash":"8bd1846d121c167e714453163b19ada554135a03","modified":1706513758554},{"_id":"node_modules/hexo-theme-cosy/languages/zh-CN.yml","hash":"37fcee9a660db798ad6884e7300013571fbc30b9","modified":1706513758560},{"_id":"node_modules/hexo-theme-cosy/scripts/blog_language.js","hash":"2a1c3b931587eea26a31e4bad12bfb1a207e8b3f","modified":1706513756953},{"_id":"node_modules/hexo-theme-cosy/scripts/generate_category.js","hash":"e6df9e134c08f2215d296ec4ea647aa66286241f","modified":1706513757116},{"_id":"node_modules/hexo-theme-cosy/scripts/generate_i18n.js","hash":"20f9ac11b1954b1087cc79183bd8c690ea227d36","modified":1706513757117},{"_id":"node_modules/hexo-theme-cosy/scripts/generate_excerpt.js","hash":"8e6994550d1f449c2867f602de4c9aabc8cdd334","modified":1706513757117},{"_id":"node_modules/hexo-theme-cosy/scripts/generate_nav.js","hash":"7ad2ffc0294c093849084d53ddf99faca050b69a","modified":1706513757118},{"_id":"node_modules/hexo-theme-cosy/scripts/mermaid_tag.js","hash":"514160bada4391ff3421f089e9eb92076b5f7e5c","modified":1706513757119},{"_id":"node_modules/hexo-theme-cosy/scripts/post_status_icon.js","hash":"ce862d1c0cad6881f190f0d9c545517d69f2d1cf","modified":1706513757121},{"_id":"node_modules/hexo-theme-cosy/scripts/road-to-json.js","hash":"0e43cab0301798beb4c0c98bc97b3737e8290c14","modified":1706513757121},{"_id":"node_modules/hexo-theme-cosy/scripts/sort_posts.js","hash":"8a65e04a7eae438604cbd64e2cd6d8e1608e7bdb","modified":1706513757121},{"_id":"node_modules/hexo-theme-cosy/layout/archive.ejs","hash":"8f5038e2b8d0a6b17ac3561f5365fe84cfd74d94","modified":1706513756436},{"_id":"node_modules/hexo-theme-cosy/layout/breadcrumb.ejs","hash":"882b9e80f15da716afdc4490ba7f02d2d2447714","modified":1706513756436},{"_id":"node_modules/hexo-theme-cosy/layout/airplane.ejs","hash":"28521fce0f5dbd1fd62c612ae68b78ba254faef3","modified":1706513756436},{"_id":"node_modules/hexo-theme-cosy/layout/category-nav.ejs","hash":"84031ca848df2bf10d94fb26f495abeefd23de97","modified":1706513756437},{"_id":"node_modules/hexo-theme-cosy/layout/category.ejs","hash":"35cc300cdf34954c542eaa72dc079764da3435db","modified":1706513756438},{"_id":"node_modules/hexo-theme-cosy/layout/cosy-preference.ejs","hash":"dd57fb0cda2385ef1a895a64e3f4aee874bc0cac","modified":1706513756438},{"_id":"node_modules/hexo-theme-cosy/layout/cosy-resume.ejs","hash":"f3b3516eb22436823b9b9586c742020c50c0eed5","modified":1706513756439},{"_id":"node_modules/hexo-theme-cosy/layout/cosy-roadmap.ejs","hash":"7074a771f61c959e9e5926326dedd5f7b5eec2cf","modified":1706513756440},{"_id":"node_modules/hexo-theme-cosy/layout/index.ejs","hash":"06eead2f8f7d3f10cbafbf1895dc4b891c2e6641","modified":1706513756440},{"_id":"node_modules/hexo-theme-cosy/layout/profile.ejs","hash":"2637484261699e82a30201d1aa33739f28392840","modified":1706513756441},{"_id":"node_modules/hexo-theme-cosy/layout/post.ejs","hash":"aa41f68f2db0d103e85a304146d4173445485ce2","modified":1706513756441},{"_id":"node_modules/hexo-theme-cosy/layout/search.ejs","hash":"feaffd99f16524fa3b84023aea79231c5e8107f1","modified":1706513756442},{"_id":"node_modules/hexo-theme-cosy/layout/layout.ejs","hash":"564f678e9ed92bf088a6a717108693d2bef7bf99","modified":1706513756441},{"_id":"node_modules/hexo-theme-cosy/layout/tag.ejs","hash":"2213e6ac4c34f547f4022df9729facec1c536b08","modified":1706513756442},{"_id":"node_modules/hexo-theme-cosy/layout/weather.ejs","hash":"ecd33595ce723ce789f8fdd70f620764ee53bfdc","modified":1706513756442},{"_id":"node_modules/hexo-theme-cosy/layout/welcome.ejs","hash":"e4ed80d9b9a0f5181f111b26b2015f818d796ba1","modified":1706513756442},{"_id":"node_modules/hexo-theme-cosy/source/css/34fee1b9.css","hash":"6fc59e6ba8d671c9daaa13e6743a0e52aaa372bc","modified":1706513756424},{"_id":"node_modules/hexo-theme-cosy/source/css/21599f71.css","hash":"36fdf9b2129fb6581862bf32b2b51042a21a64af","modified":1706513756422},{"_id":"node_modules/hexo-theme-cosy/README.md","hash":"912cafd130c1e4f78fef763611e3f869717fafc9","modified":1706513757122},{"_id":"node_modules/hexo-theme-cosy/source/css/02b34a09.css","hash":"fe35812963ecc7c8fbe5c13c5b3907cfb8c0e008","modified":1706513756420},{"_id":"node_modules/hexo-theme-cosy/source/css/32fa10f2.css","hash":"081c28411eecfe8759d3f57aa5e6b6dad6c57ee4","modified":1706513756422},{"_id":"node_modules/hexo-theme-cosy/source/css/3a4a90d1.css","hash":"4ffc2c5e9f1afd4fa74d7d9b785e0697cd7fb770","modified":1706513756425},{"_id":"node_modules/hexo-theme-cosy/source/css/3c11e750.css","hash":"9ff34f018bd3bc42c237e2ab5eb5cb5f5955b45a","modified":1706513756427},{"_id":"node_modules/hexo-theme-cosy/source/css/480d1cae.css","hash":"1337c1253d51ff8e13f9a482eab8981fb8ea33c4","modified":1706513756427},{"_id":"node_modules/hexo-theme-cosy/source/css/61875ce9.css","hash":"95ac67388cb7ab8a054170ea5d58ae531673ba9f","modified":1706513756428},{"_id":"node_modules/hexo-theme-cosy/source/css/7d333f9e.css","hash":"fc1056a824db0a849772ac1317fdfad6942b5b32","modified":1706513756428},{"_id":"node_modules/hexo-theme-cosy/source/css/4fe30414.css","hash":"e8c133e3638517208ae2c8caf3368ca55f89cdf6","modified":1706513756427},{"_id":"node_modules/hexo-theme-cosy/source/css/9bb9a539.css","hash":"2f6975bb3744ed17bd00f5ec45459cd17a7ee995","modified":1706513756431},{"_id":"node_modules/hexo-theme-cosy/source/css/90d5ae48.css","hash":"e17db94cf68a8d6da67a162dde1cb22421eda634","modified":1706513756430},{"_id":"node_modules/hexo-theme-cosy/source/css/b4c95347.css","hash":"f22950938d45ab9209826a784baa356ff995c434","modified":1706513756432},{"_id":"node_modules/hexo-theme-cosy/source/css/f3729dde.css","hash":"2a7faa0c3816e3b653fb4540fa63504a26b2051f","modified":1706513756432},{"_id":"node_modules/hexo-theme-cosy/source/css/db04a759.css","hash":"28b40c018f86b9cec1b30500e50dba7b789a3694","modified":1706513756432},{"_id":"node_modules/hexo-theme-cosy/source/font/motto.woff","hash":"755620f3bad3ebdf683c074043104d4c11f8d23e","modified":1706513758544},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-arrow-left.svg","hash":"a36362d2555e8b836fcec1f7eeeae4588a871bdd","modified":1706513758535},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-click.svg","hash":"b10df8b886a8b2d44293b26f42b440c9aedb66a7","modified":1706513758536},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-book.svg","hash":"d5e4064468dde477bf9a630c3fababec41316708","modified":1706513758535},{"_id":"node_modules/hexo-theme-cosy/source/font/linear.woff2","hash":"57cac19ad34a50d5a4da5e471e08174c950ce5fb","modified":1706513758546},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-date.svg","hash":"b391e34adafed83ef52d836fd6f81618494c4c6b","modified":1706513758537},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-moon.svg","hash":"032be7ed3d2320f22069e2efb2fb7f60592d6212","modified":1706513758539},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-layout.svg","hash":"108ef43073a5b92552dc00744a9f11db8e5ac0a2","modified":1706513758538},{"_id":"node_modules/hexo-theme-cosy/source/img/favicon.svg","hash":"6e88f8a231bb0a7ae4cc4598f85b6d346a286095","modified":1706513758534},{"_id":"node_modules/hexo-theme-cosy/source/img/icon1.svg","hash":"f15fbcecbaa00db99aeaca9807922514f6452d02","modified":1706513758540},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-sun.svg","hash":"57a0ce52ecce7188eaac5e06eab54609a8e572c8","modified":1706513758539},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-link.svg","hash":"436b5ee7ef2d28766e86ac1e65a567d1e786c1b3","modified":1706513758539},{"_id":"node_modules/hexo-theme-cosy/source/img/icon3.svg","hash":"a1a9dcee7703ec48f2d92b0d533b62fef16097fc","modified":1706513758540},{"_id":"node_modules/hexo-theme-cosy/source/img/icon2.svg","hash":"cc598540651110d977afd26dc0a1f01bbc95bf21","modified":1706513758540},{"_id":"node_modules/hexo-theme-cosy/source/js/3cf4fd98.js","hash":"0d51155f6dc08d1d8c693d210c1407b2e26b5685","modified":1706513756443},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-flash.svg","hash":"dd8e93ef538c0d707c6a34e45f761e648e0178fa","modified":1706513758538},{"_id":"node_modules/hexo-theme-cosy/source/js/4f127d19.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706513758540},{"_id":"node_modules/hexo-theme-cosy/source/img/monster.png","hash":"ce3acb0b24675ed95b1d1ec75a3459cb127759a6","modified":1706513758229},{"_id":"node_modules/hexo-theme-cosy/source/js/62d6af47.js.LICENSE.txt","hash":"a8820a0de0a074d43cb1f7db8eee78c8dbfd4d87","modified":1706513758540},{"_id":"node_modules/hexo-theme-cosy/source/js/4f127d19.js","hash":"6de1a413d02979b20926ab756c9c984b17c5809d","modified":1706513756598},{"_id":"node_modules/hexo-theme-cosy/source/js/82a967e8.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706513758542},{"_id":"node_modules/hexo-theme-cosy/source/js/62d6af47.js","hash":"47a439c684732100a6c64c50433796d3a54ada08","modified":1706513756940},{"_id":"node_modules/hexo-theme-cosy/source/js/5bf38c1b.js","hash":"e37e9ba275ab0d2ae27057f101a5c0c8e52c5104","modified":1706513756600},{"_id":"node_modules/hexo-theme-cosy/source/js/b72255a3.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706513758542},{"_id":"node_modules/hexo-theme-cosy/source/js/a7402528.js","hash":"e97c03568c8517d7366892158c86213d949a7856","modified":1706513756950},{"_id":"node_modules/hexo-theme-cosy/source/js/d50bb744.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706513758543},{"_id":"node_modules/hexo-theme-cosy/source/js/da8f6845.js","hash":"999c5bb86a8d220b065da973c32699402b4f3d8c","modified":1706513757113},{"_id":"node_modules/hexo-theme-cosy/source/js/e0a67917.js","hash":"2e30e8aa1bdd93d1005a36e4543d5761a719a707","modified":1706513757113},{"_id":"node_modules/hexo-theme-cosy/source/js/d50bb744.js","hash":"8e74a77f70a57cbe9845e97a9e304daaee58a1f0","modified":1706513757110},{"_id":"node_modules/hexo-theme-cosy/source/js/f0821b81.js","hash":"9049df02eb79a5574bfb0a79127f0b8828e15b95","modified":1706513757116},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/100.png","hash":"ad42001979a0dbb8807c128b871dc28161b8c191","modified":1706513757124},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/102.png","hash":"74d7cfa4f23850a456c16d0e0956264e920f7a85","modified":1706513757125},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/103.png","hash":"656d81bd50728c7ba62572e838db7c355d522e51","modified":1706513757125},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/101.png","hash":"890888efd8db7a3f29427e476ce3433f4a564321","modified":1706513757125},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/152.png","hash":"3ec0a1ac063ae068cc9d728eef88a9a6d7859153","modified":1706513757139},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/151.png","hash":"8041e428fc369be40f9e993f4f718ae99c7662fa","modified":1706513757138},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/153.png","hash":"3eb50d325ec84e1248585d347471b1093a83909c","modified":1706513757139},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/104.png","hash":"36add97ed90d57e691e6e15d3456898a42dccb16","modified":1706513757136},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/150.png","hash":"572b4a6e56271b89208daa538f02416d50249347","modified":1706513757137},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/300.png","hash":"bd67445ff764f3f1d4eeb81625372585bb537b07","modified":1706513757140},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/301.png","hash":"cc616d4c7ae6abbe0338f418fe35acce93c46164","modified":1706513757145},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/306.png","hash":"69b55e71e8da4e0fe223ff76b9a68f98e4134b3d","modified":1706513757490},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/304.png","hash":"3669eb04ee87dca604f70f7404c0ecb303d17af4","modified":1706513757482},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/307.png","hash":"02a08e002d21a10e0854b1036556fb81b0308be3","modified":1706513757494},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/303.png","hash":"453442f93e62ac98884aae173530f26272d97ad6","modified":1706513757324},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/308.png","hash":"ace460a40174aa90dde6c2ef71663f30cec24193","modified":1706513757502},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/311.png","hash":"ab5c5059f354da2f9525b30ee81312fbfa4749bf","modified":1706513757683},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/309.png","hash":"c5140be49b8936e5d30380f14f7dce49a7be7cb5","modified":1706513757505},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/310.png","hash":"9315203066fa97a7d10f2a6fb0fd3ce5b7805126","modified":1706513757682},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/312.png","hash":"c672d7373fce89803b5e8d06420e158f11ea346f","modified":1706513757685},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/302.png","hash":"371fa4d79b6a93573fde068f179829ed97c8f4f8","modified":1706513757322},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/313.png","hash":"afa70386816623e847c09f51032212d2520d1740","modified":1706513757687},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/314.png","hash":"110f9fe81f80b8f372b7472fbcfd9c0071b33151","modified":1706513757687},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/315.png","hash":"2100a23ee6d584227715164263c43875e8d8946c","modified":1706513757996},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/305.png","hash":"618e18bf06b5d12d64269b30d6f044fc356d24b0","modified":1706513757489},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/318.png","hash":"7a042920165671cdbfef6c58596a80f9a1f6f016","modified":1706513757998},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/316.png","hash":"4de1ac0254507c5509fc4d04e208fd81d2af7b34","modified":1706513757997},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/317.png","hash":"7e60725abd3b91b9ba388ad9b9f642690c39ff9e","modified":1706513757998},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/350.png","hash":"f29c1aa55c4afd3df17aef7885a35b0bd177d771","modified":1706513758002},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/351.png","hash":"3ab30470a65acb8fe879aa7adc9064284abd8407","modified":1706513758003},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/400.png","hash":"79444a48a0e416e4cac1eb319496f495091f4c86","modified":1706513758005},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/399.png","hash":"993ddcd386480d211ec9b2e56656d659bb6c453b","modified":1706513758004},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/404.png","hash":"112e73e641d1a30712993b5dca681a5e033831ee","modified":1706513758010},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/403.png","hash":"dfad1a525c4467c3e95e281befdf813e145620df","modified":1706513758009},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/401.png","hash":"279c8bc00b4e57db9b1095df64044ec80b37edb0","modified":1706513758006},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/407.png","hash":"82223792a5e3e556148b4663f195ef22044c143a","modified":1706513758036},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/406.png","hash":"b9cd0421518e0a76041285e5bf0c1666a93428a5","modified":1706513758011},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/402.png","hash":"033fc236885a2bf7007d97eb054b0c5885035be5","modified":1706513758007},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/410.png","hash":"9170b32d6b7f644ce49116f3e35d35558bae6536","modified":1706513758038},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/456.png","hash":"dd16b957cc544730afab8d2712821dd6c77f5167","modified":1706513758039},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/457.png","hash":"5dffe7e9139bfb697b046c427b9ef0ed6ffa95c7","modified":1706513758041},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/408.png","hash":"02b34a66020c9f3e5173702d30e5a7b69139bade","modified":1706513758037},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/409.png","hash":"aed269911d0249a700b4f3890c424f00f4a27e1e","modified":1706513758037},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/499.png","hash":"2b51631144a7c0f813b6425d4daa30c4d4e8bd38","modified":1706513758041},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/500.png","hash":"ddb4712d8f19bb8c197e600000dd2d51049f970d","modified":1706513758042},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/503.png","hash":"9415147c4bcebadd7f3089339064b8120c8d4089","modified":1706513758176},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/501.png","hash":"ddb4712d8f19bb8c197e600000dd2d51049f970d","modified":1706513758042},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/502.png","hash":"4146081a2635ff88fa14e38ed8d360d3b4fa74dd","modified":1706513758176},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/507.png","hash":"426d5a73a482ac5721e7da2141e4fe704f50b608","modified":1706513758207},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/504.png","hash":"defba93520719f72b217583062ccc79abd5b445e","modified":1706513758206},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/510.png","hash":"524131e401d0b150dab2733af336f4649b8ade74","modified":1706513758221},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/508.png","hash":"ae98a3217df26021ec2f667f099d27575c912bf4","modified":1706513758208},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/509.png","hash":"3bc779bfbcab94a79c91b26288e2e7b67412d15e","modified":1706513758219},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/513.png","hash":"ceff3dfd109a990c9595276ad6b56061bb662e5e","modified":1706513758224},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/512.png","hash":"64e11f225c35caa6ef2612d613026c52cfd3557e","modified":1706513758223},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/511.png","hash":"e2efe07a29446ebecd313ccd8a2c7d57a670f203","modified":1706513758222},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/514.png","hash":"fdf992021ff20e1ffe1b19f0b918aa35204f22e7","modified":1706513758225},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/515.png","hash":"fdf992021ff20e1ffe1b19f0b918aa35204f22e7","modified":1706513758225},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/900.png","hash":"6eacf8df641c6096feb746c7544a825d3c65bf47","modified":1706513758227},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/901.png","hash":"f6b3f1cd64e9c325e9dc3ab42469baa5c5119c2d","modified":1706513758227},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/999.png","hash":"74e4fa5bdd815d988b55525d4e7f6d40bf1080d4","modified":1706513758227},{"_id":"node_modules/hexo-theme-cosy/source/lib/prism/one-dark.css","hash":"5967bad8dd34b1eb244956064ae7870f62e6cd75","modified":1706513756434},{"_id":"node_modules/hexo-theme-cosy/source/lib/prism/one-light.css","hash":"dd7660b35884866eee48f069e876f1c29661a150","modified":1706513756435},{"_id":"node_modules/hexo-theme-cosy/source/js/82a967e8.js","hash":"4f64c4ba7ad28f2f688f420a1a8e986eb358fa7b","modified":1706513756949},{"_id":"node_modules/hexo-theme-cosy/source/js/b72255a3.js","hash":"94ca9e409cf54ce10d8adcd9118b7459ecf417db","modified":1706513756952},{"_id":"public/likes/index.html","hash":"563ccab0c354adfe565585fa213f0774b6b8fa4a","modified":1706868314101},{"_id":"public/cosy-roadmap/index.html","hash":"749373e386ff0908a02f968b1384bf9c6530097e","modified":1706875262829},{"_id":"public/cosy-resume/index.html","hash":"2c3d184e7f6661a93baaca10314faba425dab104","modified":1706877596162},{"_id":"public/likes/tools/index.html","hash":"6f634a3680c3ad135087c98943fd2cec5c804418","modified":1706868314101},{"_id":"public/uncategorized/hello-world/index.html","hash":"725a3e5c6d1ed2803f7f9f72848180aaca50ec76","modified":1706847548510},{"_id":"public/uncategorized/vex机器人程序/index.html","hash":"67afb6dbe38e0b91c0d111e7eb21fe785b25fc46","modified":1706847269374},{"_id":"public/uncategorized/路桥第一马戏团出道录/index.html","hash":"1d8e67346e81378def05d16315b156bb65df92f1","modified":1706846918631},{"_id":"public/archives/index.html","hash":"b9da84234cb40bb86a52aa5563004918e0849f7c","modified":1706964936578},{"_id":"public/archives/2023/index.html","hash":"b9da84234cb40bb86a52aa5563004918e0849f7c","modified":1706964936578},{"_id":"public/archives/2023/12/index.html","hash":"b9da84234cb40bb86a52aa5563004918e0849f7c","modified":1706964936578},{"_id":"public/archives/2024/index.html","hash":"b9da84234cb40bb86a52aa5563004918e0849f7c","modified":1706964936578},{"_id":"public/archives/2024/01/index.html","hash":"b9da84234cb40bb86a52aa5563004918e0849f7c","modified":1706964936578},{"_id":"public/index.html","hash":"5486e59e467f528fa2c9c34cb3d9e5820dea6fc0","modified":1706871279565},{"_id":"public/archives/2024/02/index.html","hash":"b9da84234cb40bb86a52aa5563004918e0849f7c","modified":1706964936578},{"_id":"public/tags/杂谈/index.html","hash":"d55c221edb961042aa65644df03775958100fa92","modified":1706846918631},{"_id":"public/font/linear.woff2","hash":"57cac19ad34a50d5a4da5e471e08174c950ce5fb","modified":1706846918631},{"_id":"public/font/motto.woff","hash":"755620f3bad3ebdf683c074043104d4c11f8d23e","modified":1706846918631},{"_id":"public/img/favicon.svg","hash":"6e88f8a231bb0a7ae4cc4598f85b6d346a286095","modified":1706846918631},{"_id":"public/img/icon-arrow-left.svg","hash":"a36362d2555e8b836fcec1f7eeeae4588a871bdd","modified":1706846918631},{"_id":"public/img/icon-click.svg","hash":"b10df8b886a8b2d44293b26f42b440c9aedb66a7","modified":1706846918631},{"_id":"public/img/icon-flash.svg","hash":"dd8e93ef538c0d707c6a34e45f761e648e0178fa","modified":1706846918631},{"_id":"public/img/icon-book.svg","hash":"d5e4064468dde477bf9a630c3fababec41316708","modified":1706846918631},{"_id":"public/img/icon-date.svg","hash":"b391e34adafed83ef52d836fd6f81618494c4c6b","modified":1706846918631},{"_id":"public/img/icon-layout.svg","hash":"108ef43073a5b92552dc00744a9f11db8e5ac0a2","modified":1706846918631},{"_id":"public/img/icon-moon.svg","hash":"032be7ed3d2320f22069e2efb2fb7f60592d6212","modified":1706846918631},{"_id":"public/img/icon-link.svg","hash":"436b5ee7ef2d28766e86ac1e65a567d1e786c1b3","modified":1706846918631},{"_id":"public/img/icon2.svg","hash":"cc598540651110d977afd26dc0a1f01bbc95bf21","modified":1706846918631},{"_id":"public/img/icon-sun.svg","hash":"57a0ce52ecce7188eaac5e06eab54609a8e572c8","modified":1706846918631},{"_id":"public/img/icon1.svg","hash":"f15fbcecbaa00db99aeaca9807922514f6452d02","modified":1706846918631},{"_id":"public/js/4f127d19.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706846918631},{"_id":"public/img/icon3.svg","hash":"a1a9dcee7703ec48f2d92b0d533b62fef16097fc","modified":1706846918631},{"_id":"public/js/62d6af47.js.LICENSE.txt","hash":"a8820a0de0a074d43cb1f7db8eee78c8dbfd4d87","modified":1706846918631},{"_id":"public/img/monster.png","hash":"ce3acb0b24675ed95b1d1ec75a3459cb127759a6","modified":1706846918631},{"_id":"public/js/82a967e8.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706846918631},{"_id":"public/js/b72255a3.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706846918631},{"_id":"public/img/qweather-color-icon/100.png","hash":"ad42001979a0dbb8807c128b871dc28161b8c191","modified":1706846918631},{"_id":"public/js/d50bb744.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706846918631},{"_id":"public/img/qweather-color-icon/101.png","hash":"890888efd8db7a3f29427e476ce3433f4a564321","modified":1706846918631},{"_id":"public/img/qweather-color-icon/102.png","hash":"74d7cfa4f23850a456c16d0e0956264e920f7a85","modified":1706846918631},{"_id":"public/img/qweather-color-icon/152.png","hash":"3ec0a1ac063ae068cc9d728eef88a9a6d7859153","modified":1706846918631},{"_id":"public/img/qweather-color-icon/151.png","hash":"8041e428fc369be40f9e993f4f718ae99c7662fa","modified":1706846918631},{"_id":"public/img/qweather-color-icon/150.png","hash":"572b4a6e56271b89208daa538f02416d50249347","modified":1706846918631},{"_id":"public/img/qweather-color-icon/104.png","hash":"36add97ed90d57e691e6e15d3456898a42dccb16","modified":1706846918631},{"_id":"public/img/qweather-color-icon/153.png","hash":"3eb50d325ec84e1248585d347471b1093a83909c","modified":1706846918631},{"_id":"public/img/qweather-color-icon/103.png","hash":"656d81bd50728c7ba62572e838db7c355d522e51","modified":1706846918631},{"_id":"public/img/qweather-color-icon/301.png","hash":"cc616d4c7ae6abbe0338f418fe35acce93c46164","modified":1706846918631},{"_id":"public/img/qweather-color-icon/300.png","hash":"bd67445ff764f3f1d4eeb81625372585bb537b07","modified":1706846918631},{"_id":"public/img/qweather-color-icon/304.png","hash":"3669eb04ee87dca604f70f7404c0ecb303d17af4","modified":1706846918631},{"_id":"public/img/qweather-color-icon/302.png","hash":"371fa4d79b6a93573fde068f179829ed97c8f4f8","modified":1706846918631},{"_id":"public/img/qweather-color-icon/306.png","hash":"69b55e71e8da4e0fe223ff76b9a68f98e4134b3d","modified":1706846918631},{"_id":"public/img/qweather-color-icon/307.png","hash":"02a08e002d21a10e0854b1036556fb81b0308be3","modified":1706846918631},{"_id":"public/img/qweather-color-icon/305.png","hash":"618e18bf06b5d12d64269b30d6f044fc356d24b0","modified":1706846918631},{"_id":"public/img/qweather-color-icon/309.png","hash":"c5140be49b8936e5d30380f14f7dce49a7be7cb5","modified":1706846918631},{"_id":"public/img/qweather-color-icon/308.png","hash":"ace460a40174aa90dde6c2ef71663f30cec24193","modified":1706846918631},{"_id":"public/img/qweather-color-icon/311.png","hash":"ab5c5059f354da2f9525b30ee81312fbfa4749bf","modified":1706846918631},{"_id":"public/img/qweather-color-icon/310.png","hash":"9315203066fa97a7d10f2a6fb0fd3ce5b7805126","modified":1706846918631},{"_id":"public/img/qweather-color-icon/303.png","hash":"453442f93e62ac98884aae173530f26272d97ad6","modified":1706846918631},{"_id":"public/img/qweather-color-icon/312.png","hash":"c672d7373fce89803b5e8d06420e158f11ea346f","modified":1706846918631},{"_id":"public/img/qweather-color-icon/313.png","hash":"afa70386816623e847c09f51032212d2520d1740","modified":1706846918631},{"_id":"public/img/qweather-color-icon/314.png","hash":"110f9fe81f80b8f372b7472fbcfd9c0071b33151","modified":1706846918631},{"_id":"public/img/qweather-color-icon/315.png","hash":"2100a23ee6d584227715164263c43875e8d8946c","modified":1706846918631},{"_id":"public/img/qweather-color-icon/317.png","hash":"7e60725abd3b91b9ba388ad9b9f642690c39ff9e","modified":1706846918631},{"_id":"public/img/qweather-color-icon/318.png","hash":"7a042920165671cdbfef6c58596a80f9a1f6f016","modified":1706846918631},{"_id":"public/img/qweather-color-icon/316.png","hash":"4de1ac0254507c5509fc4d04e208fd81d2af7b34","modified":1706846918631},{"_id":"public/img/qweather-color-icon/351.png","hash":"3ab30470a65acb8fe879aa7adc9064284abd8407","modified":1706846918631},{"_id":"public/img/qweather-color-icon/399.png","hash":"993ddcd386480d211ec9b2e56656d659bb6c453b","modified":1706846918631},{"_id":"public/img/qweather-color-icon/350.png","hash":"f29c1aa55c4afd3df17aef7885a35b0bd177d771","modified":1706846918631},{"_id":"public/img/qweather-color-icon/403.png","hash":"dfad1a525c4467c3e95e281befdf813e145620df","modified":1706846918631},{"_id":"public/img/qweather-color-icon/400.png","hash":"79444a48a0e416e4cac1eb319496f495091f4c86","modified":1706846918631},{"_id":"public/img/qweather-color-icon/404.png","hash":"112e73e641d1a30712993b5dca681a5e033831ee","modified":1706846918631},{"_id":"public/img/qweather-color-icon/401.png","hash":"279c8bc00b4e57db9b1095df64044ec80b37edb0","modified":1706846918631},{"_id":"public/img/qweather-color-icon/402.png","hash":"033fc236885a2bf7007d97eb054b0c5885035be5","modified":1706846918631},{"_id":"public/img/qweather-color-icon/407.png","hash":"82223792a5e3e556148b4663f195ef22044c143a","modified":1706846918631},{"_id":"public/img/qweather-color-icon/406.png","hash":"b9cd0421518e0a76041285e5bf0c1666a93428a5","modified":1706846918631},{"_id":"public/img/qweather-color-icon/410.png","hash":"9170b32d6b7f644ce49116f3e35d35558bae6536","modified":1706846918631},{"_id":"public/img/qweather-color-icon/456.png","hash":"dd16b957cc544730afab8d2712821dd6c77f5167","modified":1706846918631},{"_id":"public/img/qweather-color-icon/408.png","hash":"02b34a66020c9f3e5173702d30e5a7b69139bade","modified":1706846918631},{"_id":"public/img/qweather-color-icon/409.png","hash":"aed269911d0249a700b4f3890c424f00f4a27e1e","modified":1706846918631},{"_id":"public/img/qweather-color-icon/457.png","hash":"5dffe7e9139bfb697b046c427b9ef0ed6ffa95c7","modified":1706846918631},{"_id":"public/img/qweather-color-icon/502.png","hash":"4146081a2635ff88fa14e38ed8d360d3b4fa74dd","modified":1706846918631},{"_id":"public/img/qweather-color-icon/500.png","hash":"ddb4712d8f19bb8c197e600000dd2d51049f970d","modified":1706846918631},{"_id":"public/img/qweather-color-icon/499.png","hash":"2b51631144a7c0f813b6425d4daa30c4d4e8bd38","modified":1706846918631},{"_id":"public/img/qweather-color-icon/501.png","hash":"ddb4712d8f19bb8c197e600000dd2d51049f970d","modified":1706846918631},{"_id":"public/img/qweather-color-icon/503.png","hash":"9415147c4bcebadd7f3089339064b8120c8d4089","modified":1706846918631},{"_id":"public/img/qweather-color-icon/504.png","hash":"defba93520719f72b217583062ccc79abd5b445e","modified":1706846918631},{"_id":"public/img/qweather-color-icon/507.png","hash":"426d5a73a482ac5721e7da2141e4fe704f50b608","modified":1706846918631},{"_id":"public/img/qweather-color-icon/508.png","hash":"ae98a3217df26021ec2f667f099d27575c912bf4","modified":1706846918631},{"_id":"public/img/qweather-color-icon/510.png","hash":"524131e401d0b150dab2733af336f4649b8ade74","modified":1706846918631},{"_id":"public/img/qweather-color-icon/509.png","hash":"3bc779bfbcab94a79c91b26288e2e7b67412d15e","modified":1706846918631},{"_id":"public/img/qweather-color-icon/512.png","hash":"64e11f225c35caa6ef2612d613026c52cfd3557e","modified":1706846918631},{"_id":"public/img/qweather-color-icon/511.png","hash":"e2efe07a29446ebecd313ccd8a2c7d57a670f203","modified":1706846918631},{"_id":"public/img/qweather-color-icon/513.png","hash":"ceff3dfd109a990c9595276ad6b56061bb662e5e","modified":1706846918631},{"_id":"public/img/qweather-color-icon/515.png","hash":"fdf992021ff20e1ffe1b19f0b918aa35204f22e7","modified":1706846918631},{"_id":"public/img/qweather-color-icon/514.png","hash":"fdf992021ff20e1ffe1b19f0b918aa35204f22e7","modified":1706846918631},{"_id":"public/img/qweather-color-icon/900.png","hash":"6eacf8df641c6096feb746c7544a825d3c65bf47","modified":1706846918631},{"_id":"public/img/qweather-color-icon/901.png","hash":"f6b3f1cd64e9c325e9dc3ab42469baa5c5119c2d","modified":1706846918631},{"_id":"public/css/21599f71.css","hash":"36fdf9b2129fb6581862bf32b2b51042a21a64af","modified":1706846918631},{"_id":"public/css/34fee1b9.css","hash":"6fc59e6ba8d671c9daaa13e6743a0e52aaa372bc","modified":1706846918631},{"_id":"public/css/480d1cae.css","hash":"1337c1253d51ff8e13f9a482eab8981fb8ea33c4","modified":1706846918631},{"_id":"public/css/3a4a90d1.css","hash":"4ffc2c5e9f1afd4fa74d7d9b785e0697cd7fb770","modified":1706846918631},{"_id":"public/css/02b34a09.css","hash":"fe35812963ecc7c8fbe5c13c5b3907cfb8c0e008","modified":1706846918631},{"_id":"public/css/32fa10f2.css","hash":"081c28411eecfe8759d3f57aa5e6b6dad6c57ee4","modified":1706846918631},{"_id":"public/css/3c11e750.css","hash":"9ff34f018bd3bc42c237e2ab5eb5cb5f5955b45a","modified":1706846918631},{"_id":"public/css/4fe30414.css","hash":"e8c133e3638517208ae2c8caf3368ca55f89cdf6","modified":1706846918631},{"_id":"public/css/61875ce9.css","hash":"95ac67388cb7ab8a054170ea5d58ae531673ba9f","modified":1706846918631},{"_id":"public/css/7d333f9e.css","hash":"fc1056a824db0a849772ac1317fdfad6942b5b32","modified":1706846918631},{"_id":"public/css/9bb9a539.css","hash":"2f6975bb3744ed17bd00f5ec45459cd17a7ee995","modified":1706846918631},{"_id":"public/css/90d5ae48.css","hash":"e17db94cf68a8d6da67a162dde1cb22421eda634","modified":1706846918631},{"_id":"public/css/b4c95347.css","hash":"f22950938d45ab9209826a784baa356ff995c434","modified":1706846918631},{"_id":"public/css/f3729dde.css","hash":"2a7faa0c3816e3b653fb4540fa63504a26b2051f","modified":1706846918631},{"_id":"public/css/db04a759.css","hash":"28b40c018f86b9cec1b30500e50dba7b789a3694","modified":1706846918631},{"_id":"public/js/31d6cfe0.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706846918631},{"_id":"public/js/3cf4fd98.js","hash":"0d51155f6dc08d1d8c693d210c1407b2e26b5685","modified":1706846918631},{"_id":"public/js/4f127d19.js","hash":"6de1a413d02979b20926ab756c9c984b17c5809d","modified":1706846918631},{"_id":"public/js/5bf38c1b.js","hash":"e37e9ba275ab0d2ae27057f101a5c0c8e52c5104","modified":1706846918631},{"_id":"public/js/62d6af47.js","hash":"47a439c684732100a6c64c50433796d3a54ada08","modified":1706846918631},{"_id":"public/js/a7402528.js","hash":"e97c03568c8517d7366892158c86213d949a7856","modified":1706846918631},{"_id":"public/js/82a967e8.js","hash":"4f64c4ba7ad28f2f688f420a1a8e986eb358fa7b","modified":1706846918631},{"_id":"public/js/b72255a3.js","hash":"94ca9e409cf54ce10d8adcd9118b7459ecf417db","modified":1706846918631},{"_id":"public/img/qweather-color-icon/999.png","hash":"74e4fa5bdd815d988b55525d4e7f6d40bf1080d4","modified":1706846918631},{"_id":"public/js/e0a67917.js","hash":"2e30e8aa1bdd93d1005a36e4543d5761a719a707","modified":1706846918631},{"_id":"public/js/da8f6845.js","hash":"999c5bb86a8d220b065da973c32699402b4f3d8c","modified":1706846918631},{"_id":"public/js/f0821b81.js","hash":"9049df02eb79a5574bfb0a79127f0b8828e15b95","modified":1706846918631},{"_id":"public/js/d50bb744.js","hash":"8e74a77f70a57cbe9845e97a9e304daaee58a1f0","modified":1706846918631},{"_id":"public/lib/prism/one-dark.css","hash":"5967bad8dd34b1eb244956064ae7870f62e6cd75","modified":1706846918631},{"_id":"public/lib/prism/one-light.css","hash":"dd7660b35884866eee48f069e876f1c29661a150","modified":1706846918631},{"_id":"public/README/hello-world/index.html","hash":"320bfe496c52f9b889723fd57c6a477c2be09fad","modified":1706877845588},{"_id":"public/VEX/vex机器人程序/index.html","hash":"459ed348540d1d9f39f39fa3ee1361d53986f882","modified":1706961668352},{"_id":"public/杂谈/路桥第一马戏团出道录/index.html","hash":"aae02a29cd6fcd553f22989e3973dd89dbc977e9","modified":1706871279565},{"_id":"public/categories/VEX/index.html","hash":"243428bb88d367c8a96ffdb85923eea21046f6d5","modified":1706877845588},{"_id":"public/categories/杂谈/index.html","hash":"93e84b7bdb17b131c576f2506853587d91ef7365","modified":1706871279565},{"_id":"public/categories/README/index.html","hash":"074d1ac5c96867ab3aa2d278fa3fa4ed689ac4c7","modified":1706871279565},{"_id":"source/_posts/各路资源.md","hash":"4cd29224f233375fe795ac3739956333605d73bb","modified":1706964930222},{"_id":"source/_posts/小游戏.md","hash":"67145ba7dede1260491b013758597632a17d15d9","modified":1706870415880},{"_id":"source/_posts/实用工具.md","hash":"7e4a38df4688964bfdcce57bfda524e206efeb62","modified":1706869527709},{"_id":"public/收藏/小游戏/index.html","hash":"e3e4e756869ee31d712a1f5745c245fc7e704891","modified":1706871279565},{"_id":"public/收藏/各路资源/index.html","hash":"5500502dd1cf614ce549d0f4b01c85a51c8513db","modified":1706964936578},{"_id":"public/收藏/实用工具/index.html","hash":"b44961b8dc63bc8df164b649a3fe4e99352ff473","modified":1706871279565},{"_id":"public/categories/收藏/index.html","hash":"403ff852334b5318c899a8c34b59b26e8bd3fc34","modified":1706964936578},{"_id":"public/tags/资源/index.html","hash":"96bda94608bd56216e74f6f390cd6db67c1209fc","modified":1706964936578},{"_id":"public/tags/tools/index.html","hash":"0ad04f7b829b0784e424f8702157f698eac98862","modified":1706871279565},{"_id":"source/cosy-resume/img/Chose-B.jpg","hash":"2b890a4c61a0a6e109d5313c17a5bf2b34d44564","modified":1706870889318},{"_id":"public/cosy-resume/img/Chose-B.jpg","hash":"2b890a4c61a0a6e109d5313c17a5bf2b34d44564","modified":1706871279565},{"_id":"source/img/Chose-B.jpg","hash":"2b890a4c61a0a6e109d5313c17a5bf2b34d44564","modified":1706870889318},{"_id":"public/img/Chose-B.jpg","hash":"2b890a4c61a0a6e109d5313c17a5bf2b34d44564","modified":1706871421199},{"_id":"source/_posts/自动处理测试数据.md","hash":"029ff5831cf3779d13fedd5d3563863584c4d61e","modified":1706877841669},{"_id":"source/img/VEX/2023_11_11_testing_data.jpg","hash":"7720260420e769d3db101872402a2c3aab27ab14","modified":1699605162322},{"_id":"public/VEX/自动处理测试数据/index.html","hash":"d64a97b29b2b64f4af2221c3fb6702d8d6a94d1a","modified":1706877845588},{"_id":"public/tags/VEX/index.html","hash":"91e52d4e9724e9df4f3f50e33746977a8c76f20d","modified":1706877845588},{"_id":"public/img/VEX/2023_11_11_testing_data.jpg","hash":"7720260420e769d3db101872402a2c3aab27ab14","modified":1706875262829},{"_id":"public/archives/2023/11/index.html","hash":"b9da84234cb40bb86a52aa5563004918e0849f7c","modified":1706964936578}],"Category":[{"name":"VEX","_id":"cls4hbofr0000okwkgcd875lz"},{"name":"杂谈","_id":"cls4hbofu0001okwk6yl5d6dy"},{"name":"README","_id":"cls4hbofu0003okwkae2k0uhu"},{"name":"收藏","_id":"cls4ikum700027kwkhoqn7eur"}],"Data":[],"Page":[{"title":"时间线","layout":"cosy-roadmap","initYear":2024,"years":{"2021":[{"title":"入团","start":"10-25","end":"10-26","content":"这天Chose_B正式成为了一名共青团员"}],"2022":[{"title":"中考","start":"06-13","end":"06-16","content":"中考成绩 715 - 没见过这么简单的中考"}],"2024":[{"title":"搭建博客","start":"01-29","end":"02-03","content":"Chose_B终于建了自己的博客。搭博客好麻烦！（吐槽）"},{"title":"寒假!!!!!","start":"02-03","end":"02-21"}]},"_content":"","source":"cosy-roadmap/index.md","raw":"---\ntitle: 时间线\nlayout: cosy-roadmap\ninitYear: 2024\nyears:\n  2021:\n    - title: 入团\n      start: 10-25\n      end: 10-26\n      content: 这天Chose_B正式成为了一名共青团员\n  2022:\n    - title: 中考\n      start: 06-13\n      end: 06-16\n      content: 中考成绩 715\n        - 没见过这么简单的中考\n  2024:\n    - title: 搭建博客\n      start: 01-29\n      end: 02-03\n      content: Chose_B终于建了自己的博客。搭博客好麻烦！（吐槽）\n    - title: 寒假!!!!!\n      start: 02-03\n      end: 02-21\n      \n---\n","date":"2024-02-02T11:24:26.198Z","updated":"2024-02-02T11:24:26.198Z","path":"cosy-roadmap/index.html","_id":"cls44ji2i00026owkchm64tra","comments":1,"content":"","excerpt":"","more":""},{"title":"个人简历","layout":"cosy-resume","avatar":"/img/Chose-B.jpg","name":"Chose_B","role":"Full Stack","email":"L666no6@163.com","phone":"+86 135-8607-2185","birth":"Jun 18, 2007","location":"Taizhou, China","social":[{"name":"github","link":"https://github.com/Chose-B","icon":"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 24 24\"><path d=\"M9 19c-4.3 1.4-4.3-2.5-6-3m12 5v-3.5c0-1 .1-1.4-.5-2c2.8-.3 5.5-1.4 5.5-6a4.6 4.6 0 0 0-1.3-3.2a4.2 4.2 0 0 0-.1-3.2s-1.1-.3-3.5 1.3a12.3 12.3 0 0 0-6.2 0C6.5 2.8 5.4 3.1 5.4 3.1a4.2 4.2 0 0 0-.1 3.2A4.6 4.6 0 0 0 4 9.5c0 4.6 2.7 5.7 5.5 6c-.6.6-.6 1.2-.5 2V21\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg>"}],"about":["是口才不行的INTP","Chose_B名字的来源是初中的谐音梗"],"skill":["浅会一点C++ 。不过不再参加OI之后水平就一直原地踏步了","偶尔会剪视频，不过技术还不够成熟","来玩 DDraceNetwork 吗","めぐみぃ ! (この素晴らしいチョーカーに祝福を!)"],"education":[{"school":"台州市路桥中学","time":"2022-2025"}],"workExp":[{"inc":"STI-lz","time":"2023.4.27 ~ 至今"},{"inc":"路中机器人社","time":"2022.7 ~ 至今"}],"projectExp":[{"name":null,"desc":null,"list":[null]}],"portfolio":[{"name":"Bilibili","desc":"虽然经常鸽就是了","iconSVG":"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 32 32\"><path d=\"M29.976 15.783l-2-9a1 1 0 0 0-.421-.615l-6-4A1 1 0 0 0 21 2H11a1 1 0 0 0-.555.168l-6 4a1 1 0 0 0-.421.615l-2 9a1.002 1.002 0 0 0 .018.504l3 10a1 1 0 0 0 .67.671l10 3h.006a.979.979 0 0 0 .564 0h.005l10-3a1 1 0 0 0 .671-.67l3-10a1.002 1.002 0 0 0 .018-.505zm-19.05.833l-3.91-7.819l7.282 2.648zM16 12.497L19.589 18H12.41zM19.382 20L16 26.764L12.618 20zm-1.68-8.555l7.281-2.648l-3.91 7.82zm.488-2.305l3.096-4.747l3.515 2.343zM16 8.836L12.846 4h6.308zm-2.19.304L7.2 6.736l3.514-2.343zm-4.844 8.03l-4.802-1.801l1.201-5.402zm5.104 10.207l-6.502-1.95l3.128-4.798zm7.233-6.748l3.129 4.797l-6.502 1.951zm5.332-10.662l1.2 5.402l-4.802 1.8zM4.537 17.645l4.595 1.722l-2.793 4.283zm21.124 6.005l-2.793-4.283l4.595-1.722z\" fill=\"currentColor\"></path></svg>","link":"https://space.bilibili.com/1526890818"}],"_content":"","source":"cosy-resume/index.md","raw":"---\ntitle: 个人简历\nlayout: cosy-resume\navatar: /img/Chose-B.jpg\nname: Chose_B\nrole: Full Stack\nemail: L666no6@163.com\nphone: +86 135-8607-2185\nbirth: Jun 18, 2007\nlocation: Taizhou, China\nsocial:\n  - name: github\n    link: https://github.com/Chose-B\n    icon: <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 24 24\"><path d=\"M9 19c-4.3 1.4-4.3-2.5-6-3m12 5v-3.5c0-1 .1-1.4-.5-2c2.8-.3 5.5-1.4 5.5-6a4.6 4.6 0 0 0-1.3-3.2a4.2 4.2 0 0 0-.1-3.2s-1.1-.3-3.5 1.3a12.3 12.3 0 0 0-6.2 0C6.5 2.8 5.4 3.1 5.4 3.1a4.2 4.2 0 0 0-.1 3.2A4.6 4.6 0 0 0 4 9.5c0 4.6 2.7 5.7 5.5 6c-.6.6-.6 1.2-.5 2V21\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg>\n\nabout:\n  - 是口才不行的INTP\n  - Chose_B名字的来源是初中的谐音梗\n\nskill:\n  - 浅会一点C++ 。不过不再参加OI之后水平就一直原地踏步了\n  - 偶尔会剪视频，不过技术还不够成熟\n  - 来玩 DDraceNetwork 吗\n  - めぐみぃ ! (この素晴らしいチョーカーに祝福を!)\n\neducation:\n  - school: 台州市路桥中学\n    time: 2022-2025\n\nworkExp: \n  - inc: STI-lz\n    time: 2023.4.27 ~ 至今\n  - inc: 路中机器人社\n    time: 2022.7 ~ 至今\n\nprojectExp:\n  - name: \n    desc: \n    list:\n      - \n\nportfolio:\n  - name: Bilibili\n    desc: 虽然经常鸽就是了\n    iconSVG: <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 32 32\"><path d=\"M29.976 15.783l-2-9a1 1 0 0 0-.421-.615l-6-4A1 1 0 0 0 21 2H11a1 1 0 0 0-.555.168l-6 4a1 1 0 0 0-.421.615l-2 9a1.002 1.002 0 0 0 .018.504l3 10a1 1 0 0 0 .67.671l10 3h.006a.979.979 0 0 0 .564 0h.005l10-3a1 1 0 0 0 .671-.67l3-10a1.002 1.002 0 0 0 .018-.505zm-19.05.833l-3.91-7.819l7.282 2.648zM16 12.497L19.589 18H12.41zM19.382 20L16 26.764L12.618 20zm-1.68-8.555l7.281-2.648l-3.91 7.82zm.488-2.305l3.096-4.747l3.515 2.343zM16 8.836L12.846 4h6.308zm-2.19.304L7.2 6.736l3.514-2.343zm-4.844 8.03l-4.802-1.801l1.201-5.402zm5.104 10.207l-6.502-1.95l3.128-4.798zm7.233-6.748l3.129 4.797l-6.502 1.951zm5.332-10.662l1.2 5.402l-4.802 1.8zM4.537 17.645l4.595 1.722l-2.793 4.283zm21.124 6.005l-2.793-4.283l4.595-1.722z\" fill=\"currentColor\"></path></svg>\n    link: https://space.bilibili.com/1526890818\n---","date":"2024-02-02T12:39:45.810Z","updated":"2024-02-02T12:39:45.810Z","path":"cosy-resume/index.html","_id":"cls44ji2l00046owkah3s3ww2","comments":1,"content":"","excerpt":"","more":""}],"Post":[{"title":"VEX机器人程序","author":"Chose_B","date":"2024-01-29T16:00:00.000Z","use":"katex","_content":"# 序言\n## 语言基础说明  \n\nVEX程序可以支持 _C++_ 和 _python_ ，但是在这里只涉及 ___C++___     \n如果有 _python_ 基础而没有 _C++_ 基础，建议访问[菜鸟教程](https://www.runoob.com/cplusplus/cpp-tutorial.html)来学习语法知识  \n如果编程基础近似为0而对编程有兴趣的同学，建议先在[洛谷题单](https://www.luogu.com.cn/training/list)完成入门系列之后再来看VEX的教程\n\n## 编译环境\n支持VEX程序的软件有 [vscode](https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user) 、_VEXcode pro v5_ 等，本教程只介绍 ___vscode___ 的使用  \n点击此处的链接可以下载到 _vscode_ 的安装包  \n打开 _vscode_ 之后，需要下载拓展 _chinese_ , _c/c++_ , _VEX Robotics_   \n`如果有兴趣可以追加拓展 Better C++ Syntax 、 C/C++ Compile Run 、 Dracula Official 、 CodeGeeX 等`   \n另外，为了防患于未然，下载一个 _git_ 和及时把代码上传到 _github_ 是相当的有必要的  \n（我才不会告诉你我有一次文件损坏了只好从头重写呢）  \n下载 _git_ 只需要跟着 _vscode_ 的窗口一通按就好了，如何使用请看网上的[教程](https://www.runoob.com/git/git-tutorial.html)  \n可以点击 _打开文件夹_ 来开始你的代码\n\n## 硬件条件\n\n### 主机  \n![主机图](https://picdl.sunbangyan.cn/2023/11/13/30bda85ee2d0a3bc594fb858377d6b63.png)  \n\n### 手柄  \n![手柄正面图](https://picdm.sunbangyan.cn/2023/11/13/968d794a5f0ca8bc9c740b824c06866b.jpg)  \n\n![手柄背面图](https://picdm.sunbangyan.cn/2023/11/13/fc5565c734a368637488c795360e6c48.jpg)  \n\n### 场控   \n![场控图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)  \n\n### 钢条   \n![钢条图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)  \n\n### 传感器   \n![传感器图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)  \n\n### 电机   \n![电机图](https://picdm.sunbangyan.cn/2023/11/13/b86c1e9a14d043aec8aacf6a918774dc.jpg)  \n\n### 气泵   \n![气泵图](https://picst.sunbangyan.cn/2023/11/13/04aceda6d70c2f7adc2594376fa5c41b.jpg)  \n\n## VEX社区\nVEX在[B站](https://www.bilibili.com/)中并不算极小众的，其中更新的比较多的up主是[TXTaylor297992](https://space.bilibili.com/1684280853)   \n此外，VEX有[中文官方论坛](https://vexforum.cn/)，在这里可以下载到官方给出的规则文档和场地拼接的文档\n\n# 面向对象\n## 面向对象思维的介绍及引入\n[wiki介绍](https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)     \n程序设计思维中，与 ___面向对象___ 相对的概念叫做 ___面向过程___ 。     \n后者考虑问题是通常把问题拆分成几个小问题，在编写程序中对应的行为一般有编写若干个函数。由于OI中一般只要考虑一个主问题即可，所以面向对象在OI中出现较多     \n前者则是将一个个功能封装进 _对象_ 中，其对应的行为以实现 _类(class)_ 为典型。这种程序设计的思维在 项目化编程 中有极大的优点——重用性、灵活性和扩展性 高\n在此处，我们将从[class](https://www.runoob.com/cplusplus/cpp-classes-objects.html)的声明、定义、使用来入手，切实的感受 ___面向对象___ 的代码风格\n## classの定义     \n[![菜鸟教程给出的定义结构](https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11.png)](https://www.runoob.com/cplusplus/cpp-classes-objects.html)\n### 类 及 类名\n给类取名的时候，可以参照[struct](https://www.runoob.com/cplusplus/cpp-data-structures.html)，命名规则和变量一致\n类的名字以及成员变量 ___最好___ 有实际意义，例：\n```cpp\nclass student{\n    private:\n    string name;//人的名字\n    int c,m,e;//C代表语文，M代表数学，E代表英语\n};\n```\n### [访问修饰符](https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html)     \n`本教程不涉及 继承 以及 protected 的使用，因为本教程用不到它们`\n- public\n    公有成员在程序中类的外部是可访问的\n    public下的成员变量以及成员函数的使用与`struct`无异\n- private\n    成员和类的默认访问修饰符是 private      \n    私有成员变量或函数在类的外部是`不可访问`的，甚至是`不可查看`的。只有`类和友元函数`可以访问私有成员。\n    例:\n    ```cpp\n    class Box {\n    private:\n        double width;\n    public:\n        double length;\n        void setWidth( double wid );\n        double getWidth( void );\n    }b;  //相当于换行写了   Box b;\n    ```\n    在这个例子中，变量width的访问修饰符是private，因此`b.width`的写法是非法的     \n    正确的做法是，通过`b.setwidth(double wid)`来设置`width`的值；\n    通过`b.getWidth()`来获得`width`的值     \n    类似这种 __在私有区域定义数据，在公有区域定义相关的函数，以便在类的外部也可以调用这些函数__ 的做法一般叫做 ___数据封装___      这样能避免受到外界的干扰和误用，从而确保了安全     \n    样例中的`length`就不符合数据封装的原则，不要这样写 ~~否则你有可能会被狠狠批斗的~~\n### [重载函数和重载运算符](https://www.runoob.com/cplusplus/cpp-overloading.html)\n#### 重载函数\nC++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。     \n在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的**形式参数**（个数、类型或顺序）必须不同。     我们不能仅通过**返回类型**的不同来重载函数。\n重载函数可以为我们调用功能较相近的函数时提供便利,例:\n```cpp\n// 哦对了，重载函数在class外也是可以使用的哦\nvoid swap(int& a,int& b)      {int t=a;a=b;b=t;}\nvoid swap(float& a,float& b)  {float t=a;a=b;b=t;}\nvoid swap(bool& a,bool& b)    {bool t=b;a=b;b=t;}\n// 以下是在类中使用的\nclass printer{\n    public:\n       print(int a)   {cout<<a;}\n       print(float a)   {cout<<a;}\n       print(string a)   {cout<<a;}\n};\n//错误示范\nint f(void){void}\nfloat f(void){void}\n//主函数\nsigned main(){\n    printer p;\n    p.print(114514);\n    p.print(\"\\n1919810\\n\");\n    int a,b;\n        cin>>a>>b;\n        swap(a,b);\n        cout<<a<<' '<<b<<endl;\n        return 0;\n}\n```\n#### 重载运算符\n在c++中，运算符实际上也可以看作是一种函数，因此，就出现了**重载运算符**的用法     \n在这里我们介绍 [赋值运算符  = ](https://www.runoob.com/cplusplus/assignment-operators-overloading.html)     \n多说无益，直接上样例：\n```cpp\nclass node{  //平面直角坐标系中的一个点\n    private:\n        int x,y; //坐标\n    public:\n        void operator= (const node& n){  \n            //此处const node& n 也可以写作node n\n            //使用&是为了提高效率，使用const是为了防止n的值被这里的赋值函数更改\n            x = n.x;    // 等效于 this->x = n.x;\n            y = n.y;    // 等效于 this->y = n.y;\n        }\n        friend istream operator>>(istream& in,node& n){\n            // 不要求掌握，看看就好\n            in>>n.x>>n.y;\n            return in;\n        }\n};\n\nsigned main(){\nnode n;\n    node m;\n    cin >> n;\n    m = n;\n    // ...\n    // 这段代码没有什么意义，只是为了说明重载运算符后类的运算就可以用符合我们原有习惯的写法来编写程序这一点而已\n    return 0；\n}\n```\n可以看出，使用重载运算符的写法非常符合我们对变量的编写习惯。  \n这使得我们在使用类时感到非常的舒适 XD  \n需要注意的是，所有的运算符函数都是放在 ___public___ 访问修饰符下的     (其中 流运算符 是以友元函数的形式)\n\n### [构造函数和析构函数](https://www.runoob.com/cplusplus/cpp-constructor-destructor.html)，[拷贝构造函数](https://www.runoob.com/cplusplus/cpp-copy-constructor.html)     \n这三个函数是类中非常特殊的函数。通过它们可以实现 **初始化新对象**、**释放对象占用内存**、**复制对象** 的作用     \n如果不编写这三个函数，编译器都会自动加入这几个函数。但是如果类中涉及到**指针**和**动态内存**时需要格外注意，此时必须人为的编写 *析构函数* 和 *拷贝构造函数*     \n切记，这三个函数都应放在 ***public*** 下\n#### 构造函数\n类的构造函数会在**每次创建类的新对象时**执行。     构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。     构造函数可用于为某些成员变量设置初始值。\n#### 析构函数\n类的析构函数会在**每次删除所创建的对象时**执行。     析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀     析构函数有助于在跳出程序（比如关闭文件、释放内存等）前**释放资源**。     默认析构函数不会释放成员指针变量所指向的内存空间，如果要释放的话，还需要人为定义释放。     因此，当类中存在*指针变量*并且有*动态内存*分配时，最好有一个析构函数用来释放内存     另外，析构函数**不可以接受形参**，因此不存在析构函数的重载函数\n#### 拷贝构造函数\n类的拷贝构造函数会在创建对象时，使用同一类中之前创建的对象来初始化新创建的对象。     \n函数一般有如下功能：\n- 通过使用另一个同类型的对象来 ___初始化___ 新创建的对象。\n- 复制对象并把它作为 ___函数参数___。\n- 复制对象并把它作为 ___函数返回值___。\n如果在类中没有定义拷贝构造函数，编译器会自行定义一个。     如果类带有*指针变量*，并有*动态内存*分配，则它必须有一个拷贝构造函数。\n\n样例：\n```cpp\nclass node{\n    private:\n        int *n;    \n    public:\n        node();//构造函数\n        node(int sum);          //带参数的构造函数\n        ~node();                //析构函数\n        node(const node& obj);  //拷贝构造函数\n        int value(){\n           return *n;\n        }\n};\nnode::node(){                  //在类外定义函数时需要在函数名前加上“类名::”\n    n = new int;                  //为指针分配内存\n    *n = 0;\n}\nnode::node(int sum){\n    n = new int;\n    *n = sum;\n}\nnode::~node(){\n    delete n;                     //释放指针内存\n}\nnode::node(const node& obj){\n    n = new int;\n    *n = *obj.n;                  //拷贝值\n}\nint VALUE(node n){return n.value();} //拷贝构造函数的用法 II\nnode bigger_one(node a,node b){return a.value()>b.value() ? a : b ;}\n    //三元运算符  ? :  。?前条件成立则返回 : 前的，否则返回 : 后的\nsigned main(){\n    node n;\n    //无参数的构造函数可以省略\n    node m(4);                    \n    //带参数的构造函数的调用需要在变量后加括号，就像函数一样\n    node k(m);\n    //拷贝构造函数的用法 I\n    n = bigger_one(m,k);\n    //拷贝构造函数用法   III\n    n = bigger_one(m,4);\n    //构造函数的另类用法，其中遇到数值4时会调用node(int num)来把4转化为node类型\n}\n```\n### [头文件](https://zh.wikipedia.org/wiki/%E5%A4%B4%E6%96%87%E4%BB%B6)与注释，cpp与定义\n还记得前文提到过 class 有着较高 重用性，灵活性，拓展性 吗？     \n如果在每一个程序的头部复制大量的class的定义，那么这种灵活性就荡然无存了     \n因此，就不得不介绍头文件了\n\n一个头文件一般包含类、子程序、变量和其他标识符的前置声明     \n习惯上，*函数、类、枚举类、常量*的声明会放在头文件中，即`xxx.h`     \n而对应的*函数、类*的源码以及*注释*则会放在对应的源文件中，即`xxx.cpp`     \n值得注意的是，为了防止头文件被反复调用造成重复声明的错误，头文件应在首行加入\n```cpp\n#pragma once\n```\n或者\n```cpp\n// xxx.h\n#ifndef XXX\n#define XXX\n//你的代码\n#endif\n```\n多说无用，下面摆上样例          \n\n[样例：实现高精度算法](https://blog.csdn.net/weixin_30500289/article/details/96110759)     \n样例的代码非常的长，但是使用时只需要：\n```cpp\n#include \"intx.h\"\nsigned main(){\n    //...\n    return 0;\n}\n```\n另外，vscode是支持[doxygen注释](https://www.cnblogs.com/schips/p/12200388.html)的     [Doxygen官方文档](https://doxygen.nl/manual/)     \n在头文件中使用doxygen注释，可以对声明的类，函数进行说明     \n鼠标在引用了对应头文件的文件中只需要悬停在函数/变量/类/命名空间/...上就可以快捷的获知该处的注释     \n样例:\n```cpp\n// node.h\n/**\n * @class node\n * @brief 表示一个平面直角坐标系中的一个点\n***/\nclass node{\n    private:\n        /**\n         * @brief 表示坐标 \\f$\\left ( x,y \\right )\\f$\n        ***/\n        int x,y;\n    public:\n        /**\n         * @brief 初始化\n         * @param a 对应x坐标\n         * @param b 对应y坐标\n        ***/\n        void set(int a,int b){\n           x = a;\n           y = b;\n        }\n        /**\n         * @brief 计算距离\n         * @param n 第二个坐标点\n         * @return 两点距离的平方\n        ***/\n        float dist(node n){\n           return (this->x - n.x)*(this->x - n.x) + (this->y - n.y)*(this->y - n.y);\n        }\n};\n```\n鼠标悬停效果图     \n   ![node的样例](https://picdl.sunbangyan.cn/2023/11/13/f733c7f3255c153f7c3b739af3aa4fad.png)     \n   ![set()的样例](https://picss.sunbangyan.cn/2023/11/13/eda1e9a2bb9d2267a57071ee053221ee.png)     \n   ![dist()的样例](https://picss.sunbangyan.cn/2023/11/13/d723d6d27e66114087a12f7b2d6c430b.png)     \n### 后期学习方式\n 学会了class的阅读、编写后，我们进入后面的学习就有了一定的基础     \n   在vscode中，***ctrl+左键***可以查看头文件、函数、类的定义区域     \n   进入`v5_vcs.h`->`v5_cpp.h`->`需要查询的文件`，就可以看到官方给出的所有函数的定义。     \n   ![01-6-e1](https://picss.sunbangyan.cn/2023/11/13/876f9447986e256e48ac73d7df16cf0a.png)    \n\t![01-6-e2](https://picss.sunbangyan.cn/2023/11/13/262d62b1cc74dc22bb1e75e63a734ad7.png)   \n\t![01-6-e3](https://picst.sunbangyan.cn/2023/11/13/4ed72494d898de9ac52b3f04d58b1062.png)     \n   当然，我会在接下来的章节来挑选重点的函数来讲解。有兴趣有余力的同学可以根据这个方法自行探究。     \n\n# 主机(brain)与手柄(Controller)\n## 主机、手柄、电脑之间的硬件连接     \n![连线图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)     \n## 创建新的VEX工程文件、文件标题规范、文件储存位置     \n从VEX插件中 顺次点击 `new project -> v5 -> c++ -> competition template -> 命名项目名字 -> create`，一个新的VEX工程文件就创建了\n## Brain.functions()\n鉴于LXB水平有限，所以这里只讲一部分重要的函数\n### 定义\n```cpp\n// robot-config.h\nextern brain Brain;\n```\n构造函数没有参数输入\n### brain.timer\n- 定义\n    ```cpp\n    // vex_brain.cpp\n    /** \n     * @brief 以指定的单位获取计时器的值。\n     * @param units 时间单位。有 sec (秒) 和 msec (毫秒)\n     * @return 返回一个双精度值，该值表示计时器的值。\n     */\n    double timer( timeUnits units );\n    /** \n     * @brief 将计时器重置为零。\n     */\n    void reset();\n    ```\n- 使用例\n    ```cpp\n        // your_file.cpp\n        float xxx;\n        Brain.Timer.reset();// 虽然在这里没必要但是这是一个好习惯\n        xxx = Brain.Timer.time(sec);\n        while ( Brain.Timer.time(msec) <= xxx*1000 + 1145 ); //空循环，经过1.145s之后会继续\n        ```\n### brain.screen\n- 定义\n    ```cpp\n    // vex_brain.cpp\n    void print( char *format, ... );\n    void printAt( int x, int y, const char *format, ... );\n    void drawPixel( int x,int y)\n    ```\n- 使用说明     \n    这里的`print()`函数的使用和`printf()`无异     \n    `printAt()`添加了参数`x`、`y`,含义是在主机屏幕输出时开始的坐标     \n    `drawPixel`是在屏幕的(x,y)处绘制一个像素点\n## Controller.functions()\n### 定义\n```cpp\n// robot-config.h\nextern controller Controller;\n```\n和 `brain` 的定义一样平淡\n### 按钮     \n![手柄正面图](https://picdm.sunbangyan.cn/2023/11/13/968d794a5f0ca8bc9c740b824c06866b.jpg)     \n图中按钮可用的共有10个，分别是：\n    - ButtonLeft\n    - ButtonRight\n    - ButtonUp\n    - ButtonDown\n    - ButtonA\n    - ButtonB\n    - ButtonX\n    - ButtonY\n    - ButtonL1\n    - ButtonL2\n    - ButtonR1\n    - ButtonR2\n\n他们都属于 `controller`类中的成员类`button`，有以下成员函数：\n+ pressing()     \n    检查当下，如果按钮被按下则返回`true`，否则返回`false`。\n+ pressed()     \n    形参需要填入一个`void`函数的函数名来调用     \n    下次按钮被按下的时候调用函数\n\n使用例:\n```cpp\n// your_file.cpp\n// ...\nvoid function(void){\n   // ...\n}\n\nsigned main(){\n// ...\n   if ( Controller1.ButtonA.pressing() ){\n      // ...\n   }\n   Controller1.ButtonB.pressed(function);\n}\n```\n\n### 摇杆     \n遥控器上看似只有两个遥感，实际上程序中对应了4个`axis`对象:\n  - Axis1\n  - Axis2\n  - Axis3\n  - Axis4\n\n一个遥杆可以向任意二维方向旋转，每一个二维的位置都可以用二维坐标来表示。也就是说，一个摇杆对应了两个不同方向的`axis`对象。     \n其中，`Axis1`和`Axis4`都是横向的，`Axis2`和`Axis3`都是竖向的。     \n`axis`一般只使用成员函数`position()`\n```cpp\n// your_file.cpp\nvoid Dipan(){\n   // 底盘运动函数\n   float a1 = Controller1.Axis1.position(percent);\n   float a3 = Controller1.Axis3.position(percent);\n   move(a3+a1,a3-a1);\n}\n```\n\n### 屏幕     \n有时，我们需要在遥控器上面显示信息来提示操作手。例如，改变了某个电机的转速时，通过提示操作手可以方便操作手进行下一步操作。     \n下面是在屏幕上显示一段文字的实例:\n```cpp\n// your_debug_file.cpp\n/* ... */ {\n   Controller1.Screen.clearLine(); // 清空之前的消息\n   Controller1.Screen.print(\"电机温度:%.2f ℃\",MotorShot.temperature(celsius)); //输出格式同std::printf()\n}\n```\n\n# 电机(motor)与运动\n## 声明     \n`motor`的构造函数有3个参数(建议都填入),分别是`index`、`gears`、`reverse`。\n```cpp\n// vex_motor.h\nmotor( int32_t index, gearSetting gears, bool reverse );\n```\n   - `index`     \n      表明电机接入的端口。     \n      主机上有两排端口,编号1-22。电机接入第`N`个端口就写 `PORTN`\n   - `gears`     \n      表明电机转速比     \n      有三种转速比,`ratio6_1`、`ratio18_1`、`ratio36_1`,     分别对应三种颜色的电机:蓝电机、绿电机、红电机     \n\n      ![](image/motor_radio.png)     \n   - `reverse`     \n      电机默认转向:正转or反转\n\n```cpp\n// robot-config.h\n// ...\nmotor MotorLF = motor(PORT1,radio18_1,false);\nmotor MotorLB = motor(PORT2,radio18_1,false);\nmotor MotorRF = motor(PORT3,radio18_1,true);\nmotor MotorRB = motor(PORT4,radio18_1,true);\n```\n## 电机 与 手动控制程序     \n### 电机转动     \n+ `spin()`     \n   此函数会让电机以指定速度旋转。     \n   ```cpp\n   // vex_motor.h\n   /**\n   * @brief 打开电机并按指定方向和指定速度旋转。\n   * @param dir 电机旋转的方向。有 forward 和 reverse 两种值。也支持 fwd 和 rev 两种缩写\n   * @param velocity 速度大小。值域[-100.0,100.0]。超出则化为 ±100\n   * @param units 速度的单位。常用 percent ,也可缩写为 pct\n   */\n   void spin( directionType dir, double velocity, velocityUnits units );\n   ```\n   以底盘的运动程序为例：\n   \n   ```cpp\n   // your_file.h\n   void move(float l,float r){\n      MotorLF.spin(forward,l,pct);\n      MotorLB.spin(forward,l,pct);\n      MotorRF.spin(forward,r,pct);\n      MotorRB.spin(forward,r,pct);\n   }\n   ```\n+ `stop()`     \n   使电机停止(停止向电机供电)\n   ```cpp\n   /** \n   * @brief 使用默认制动模式停止电机。\n   */\n   void stop( void );\n\n   /** \n   * @brief 使用指定的制动模式停止电机。\n   * @param mode 制动模式可以设置为滑行(coast)、制动(brake)或保持(hold)。\n   */\n   void stop( brakeType mode );\n   ```\n   以底盘的停止运行为例:\n   ```cpp\n   // your_file.cpp\n   void Stop(bool flag = false){\n      if (flag == false){\n         MotorLF.stop(coast);\n         MotorLB.stop(coast);\n         MotorRF.stop(coast);\n         MotorRB.stop(coast);\n      }\n      else{\n         MotorLF.stop(hold);\n         MotorLB.stop(hold);\n         MotorRF.stop(hold);\n         MotorRB.stop(hold);\n      }\n   }\n   ```\n底盘的停止一般使用`coast`。这是为了防止`hold`状态下机器人被碰撞导致电机的损坏。\n自动程序中由于有`不允许进入对手场地`的规则，因此只要队伍内部有配合，就不用讨论上述的问题\n### 监测电机\n* `double position( rotationUnits units )`     \n  返回电机转过的角度     \n  一般填入单位 degrees     \n* `void resetPosition()`     \n  重置 `position()`的返回值     \n  重置需要一小段时间，重置时尽量保持电机的静止\n* `double temperature( temperatureUnits units )`     \n  返回电机此时的温度     \n  可填入单位 摄氏度(`celsius`)     \n* ...\n\n# 陀螺仪 与 自动转弯\n## 声明、命名\n需要填入的参数仅有端口\n```cpp\n// vex_imu.h\ninertial( int32_t index, turnType dir = turnType::right );  \n```\n声明比`motor`简单\n```cpp\n// robot-config.cpp\ninertial ine = inertial(PORT11);\n```\n## 初始化\n类似于`motor`中的`position()`，对陀螺仪初始化是必要的。\n```cpp\n// your_file.cpp\nvoid reset(){\n  //初始化底盘电机\n  MotorLF.resetPosition();\n  MotorLB.resetPosition();\n  MotorRF.resetPosition();\n  MotorRB.resetPosition();\n  //初始化陀螺仪\n  ine.calibrate();\n  //初始化计时器\n  Brain.Timer.reset();\n}\n```\n## 数据检测\n仅介绍最常用的`heading()`,其他函数仅作涉及\n\n * `heading()`\n    ```cpp\n    /**\n     * @brief 获取惯性传感器的水平方向,方向角取值范围 [0,360] ,单位:度\n     * @return 返回一个double值，该值表示惯性传感器的方向。\n     * @param units 单位,默认为度\n     */\n    double heading( rotationUnits units = rotationUnits::deg );\n    ```\n    \n * `rotation()`  \n    获取仰角\n## 自动程序中的转弯问题     \n自动程序中，是不可以通过操作手柄来给机器人输入数据的。因此，机器人在自动赛时段的运动完全依靠程序的预设。     \n*如何让机器人旋转到我们需要的方向？*     \n\n\n最简单的写法是使用计时器。机器人旋转的速度是粗略相等的，因此在程序开发时间较短的情况下，这可以作为最后的保底程序来使用。\n   ```cpp\n   // your_auto_file.cpp\n   void turn_with_timer(int t){\n      int turn_speed=100;\n      if (t<0) {\n         turn_speed=-100;\n         t=-t;\n      }                                   // 左右转放在同一程序里\n      move(turn_speed,-turn_speed);\n      wait(t,msec);                       // 定义见于vex.h中\n      stop(true);                         // 旋转结束建议锁死，以提高准确度\n   }\n   ```\n但是这并不是一个合适的方案。我们难以控制每次旋转时的环境因素保持一样(比如地面摩擦系数，电机温度，电池电压等)。有时这种小小的偏差就会导致行进线路的变形，会影响到之后的自动任务，甚至可能`DQ(犯规)`。     \n在精准转弯的要求下，我们便需要陀螺仪来帮助校准。  \n```cpp\n// your_auto_file.cpp\n#include \"extensions.h\"    // include pids.h\nvoid turn(int deg){\n  pids turning ;          // 定义pid算法对象\n  turning.pre(deg,10);    // 向pid系统中输入目标和最大允许偏差\n  float movement;         // 记录每次pid系统反馈的运动量\n  Ine.calibrate();        // 初始化陀螺仪\n  while ( turning.check (Ine.heading(degrees)) )  {\n                          // 当机器人还未稳定在最大允许偏差区间内时一直不断调整\n    movement = turning.moving();\n    move(-movement *0.4,movement *0.4);\n                          // 运动\n  }\n  \n  stop(false);             // pid算法下机器人旋转的末速度很小，不需要hold\n  wait (0.8,sec);          // 等待机器人彻底停止\n}\n```\n`PID算法`将在[第7章节](/README.md/#07-pid精确控制算法)中详细介绍其优缺点。\n## 画外吐槽     \n我非常讨厌陀螺仪     \n因为它带给我的回忆除了出bug就是掉链子     \n\n[陀螺仪发癫珍贵录像](https://www.bilibili.com/video/BV1FW4y1V7af)\n\n# 气泵\n## 定义、命名     \n气泵的程序其实是最简单的，只不过定义和电机或者传感器都有点区别\n```cpp\n// vex_triport.h\n/**\n* @brief 在参数中指定的三线端口上创建新的digital_out对象。\n* @param port 三线端口。\n*/\ndigital_out( triport::port &port );\n```\n`triport`和电机端口的`int32_t`不同     \n|port : |int32_t|triport|\n|-|-|-|\n|个数|21|8|\n|编号|1-22|A-H|\n|位置|主机上下两侧|主机左侧|\n|格式|PORTn|Brain.ThreeWirePort.N|\n\n习惯上把气泵命名为 `pne` (Pneumatic components)\n```cpp\n// robot-config.cpp\ndigital_out pne ( Brain.ThreeWirePort.A );\n```\n\n## 实物介绍     \n气泵的程序很简单，但是气泵的部件比电机复杂的多     \n![](image/05-2-e1.png)     \n图中的结构中，通过程序所能操作的仅仅是 发送到/接受数据于 `换向阀驱动器` ，从而改变换向阀联通的状态。     \n机器人上是否使用气泵，需要考虑机械师的技术水平。因为程序能在气泵上做的事情太少太简单了。\n## functions\n* `set()`\n  设置气泵的伸缩状态。\n  ```cpp\n  /**\n     * @brief 将digital_out设备设置为布尔值。\n     * @param value 布尔值。(true or false)\n     */\n    void set( bool value );\n  ```\n  当`pne.set(true)`执行后，换向阀驱动器将会亮起红灯     \n  当`pne.set(false)`执行后，换向阀驱动器红队将会熄灭\n* value()     \n  读取气泵的状态     \n  `pne.set(true)`后，value的返回值就会变为`true`，反之亦然。\n\n# 视觉传感器\n1. 定义、命名\n2. 初始化\n3. 颜色设置 和 识别机制的介绍\n4. 返回值\n\n# *PID精确控制算法\n## 引入\nPID即：`Proportional`（比例）、`Integral`（积分）、`Differential`（微分）的缩写。顾名思义，PID控制算法是结合比例、积分和微分三种环节于一体的控制算法  \nPID控制的实质就是根据输入的偏差值，按照比例、积分、微分的函数关系进行运算，运算结果用以控制输出  \n![PID算法图](https://baike.baidu.com/pic/PID%E7%AE%97%E6%B3%95/4660106/0/8435e5dde71190ef66feccacc11b9d16fdfa60bf?fr=lemma&fromModule=lemma_content-image)\n### 偏差\n`偏差`即**预定目标**和**当前状态**之间的差值  \n我们设 预定值`goal`是我们希望系统平衡时传感器的返回值  \n传感器实时返回的数值为`input`  \n那么根据`偏差`的定义，我们可以得到`偏差`的计算式:\n$$ error = goal - input $$\n其中`error`为我们所求的偏差值\n### 比例算法\n> 成比例地反映控制系统的偏差信号，偏差一旦产生，立即产生控制作用以减小偏差。\n\n比例算法的核心思想非常简单：离目标越远，就应该调整的越快  \n我们举 `量取1L水`的例子来说明  \n如果桶里面只有 10ml 水 ，那么你倒水的时候就会哗哗的往里面倒  \n而如果此时 桶快满了 ，你为了不倒多了，你就会选择慢慢的向下加  \n\n将这样的思想抽象成数学语言:  \n记比例算法的输出值为 `P`  \n那么 `error` 越大 ， `P`就应该越大\n$$ P \\propto error $$\n即\n$$ P = k_p · error $$\n其中 $$k_p$$ 是我们引入的系数，称为`比例系数`\n### 积分算法\n> 积分环节的作用，主要用于消除静差提高系统的无差度。\n#### 定义\n积分算法是对比例算法的补充  \n还是`量取1L水`的例子,但是这次桶破了一个洞:\n> 为了方便说明，不妨假设每秒的漏水为$$10ml$$ , $$k_p=0.8$$\n\n你还是用`比例算法`的思想去倒水  \n然而在你加水加到了$$920ml$$时，你会发现此时水位已经不再上涨  \n这是因为此时你加水的速度是\n$$ (1000-920)\\times0.8=10 \\space (ml) $$\n和漏水的速度持平\n\n如果你可以关注到水位一直都在$$920ml$$处这个现象的话,你可以尝试根据累计水位和目标之间的偏差来计算你到底应该额外加入多少的水  \n记积分算法的输出值为`I`,那么:\n$$ I \\propto \\int_{0}^{T} error·{\\rm d}t $$\n即\n$$ I = k_i · \\int_{0}^{T} error·{\\rm d}t $$\n其中$$k_i$$为我们引入的常量`积分系数`  \n$$T$$为pid算法从开始运行到当前时间的计时\n#### 离散化\n显然,$$\\lim_{dt \\to 0^{+}}$$的情况在现实中是无法实现的,我们只能采取近似的计算方法  \n积分算法的理论计算式离散化后可以用下式计算:  \n$$ I = k_i · \\sum_{t=0}^{T} error·\\Delta t $$\n用C++实现:\n```cpp\nI = I + ki*error*(time_now - time_last);\ntime_last = time_now;\n```\n#### 积分限制器\n引入积分算法后可能出现以下情况:  \n1. 以电机为例，在电机的启停或设定值大幅变化时，系统在较短时间内产生了很大的偏差。此时积分迅速积累，就会造成控制量输出远远大于电机的极限输入控制量，从而会引起很大的超调，甚至会产生震荡。  \n2. 积分饱和：当系统一直存在一个方向的偏差时，积分会不断增大，会造成控制量进入饱和区，一旦出现反向的偏差时，需要很长时间才能推出饱和区，而去响应反向偏差。也以电机为例，电机在积分饱和时，电机响应延时较大，会出现电机超出目标位置，需来回调整数次才能稳定。  \n\n此时就有必要限制积分算法的输出  \n如果$$I$$超出了某一预定的范围$$[-I_{max},I_{max}]$$,可以对I的大小进行限制\n```cpp\nvoid I_limit(float& I,float I_max){\n    if (I>I_max){\n        I = I_max;\n    }\n    else if (I<-I_max){\n        I = -I_max;\n    }\n    return;\n}\n```\n\n### 微分算法\n> 微分环节的作用能反映偏差信号的变化趋势（变化速率），并能在偏差信号的值变得太大之前，在系统中引入一个有效的早期修正信号，从而加快系统的动作速度，减小调节时间。\n>\n#### 定义\n微分算法同样是对比例算法的补充  \n这次的例子换成`在手指上面立筷子`吧  \n\n立筷子还不简单,你轻易的让筷子保持了竖直  \n正当我们放松的时候，一阵阴风袭来，把筷子稍稍吹歪了  \n* 只用比例算法？  \n  筷子才歪这么一点，我都不需要怎么动哎  \n  然后很快筷子就倒了\n* 加上积分算法?\n  本来筷子是保持平衡的，也就是\n  $$output=P+I=0$$  \n  $$\\because P=K_p·error=0$$  \n  $$\\therefore I_{t=0}=0$$  \n  此时积分算法能起到的效果和比例算法没有什么差别了\n\n看来我们需要新的方法  \n立筷子之所以容易失败，是因为筷子只要有一点偏差，如果不迅速的加以修正，筷子就会快速的倒下  \n如果在$$P$$和$$I$$的基础上，再增加一项$$D$$，使得\n$$ D \\propto 筷子高度的瞬时变化率 $$\n问题就可以迎刃而解  \n注意到`微分`是衡量`瞬时变化率`的很好的数学工具，于是我们可以写出:\n$$ D \\propto \\tfrac{d}{dt} error $$\n即\n$$ D = k_d·\\tfrac{d}{dt} error $$\n其中$$k_d$$为我们引入的`微分系数`\n#### 离散化\n同样的，由于$$\\lim_{dt \\to 0^{+}}$$在现实中无法实现，微分算法的计算同样需要离散化  \n$$ D = k_d·\\tfrac{ \\Delta error }{ \\Delta t } $$  \n用c++实现:  \n```cpp\nD = kd*(error-error_last)/(time_now-time_last);\nerror_last = error;\ntime_last = time_now;\n```\n## 综合使用\n使用$$P$$、$$I$$、$$D$$三种算法，足以满足大多数输出的控制了\n总输出值的理想计算式:\n$$ output = P + I + D $$\n如果全部带入:\n$$ output = k_p·error + k_i·\\int_{0}^{T}error·dt + k_d·\\tfrac{d}{dt}error $$\n离散化后可以用C++实现\n$$ output = k_p·error + k_i·\\sum_{t=0}^{T}error·\\Delta t + k_d·\\tfrac{ \\Delta error }{ \\Delta t }$$\n## 调试参数\n实践中，真正折磨人的不是PID算法的理解，而是PID细节的实现和参数的调节  \n对于$$k_p$$ $$k_i$$ $$k_d$$三个参数，获得的办法只有:  \n* 不断实验\n* ~~玄学~~ 直觉\n\n~~祝你好运~~\n\n# 手动程序\n1. 与操作手对接\n2. 底盘方案\n   * 左前进右旋转\n   * 万向底盘\n   * 无头模式\n\n# 自动程序\n1. 自动赛规则\n2. 前进控制\n3. 转弯控制\n4. 完成自动赛任务\n5. 多备案 + 耐心\n\n# 规则类怪谈\n1. 码风要求\n2. 注释规范化\n3. 请参与github的更新\n","source":"_posts/VEX机器人程序.md","raw":"---\ntitle: VEX机器人程序\nauthor: Chose_B\ndate: 2024-01-30\ncategories: VEX\nuse: katex\n---\n# 序言\n## 语言基础说明  \n\nVEX程序可以支持 _C++_ 和 _python_ ，但是在这里只涉及 ___C++___     \n如果有 _python_ 基础而没有 _C++_ 基础，建议访问[菜鸟教程](https://www.runoob.com/cplusplus/cpp-tutorial.html)来学习语法知识  \n如果编程基础近似为0而对编程有兴趣的同学，建议先在[洛谷题单](https://www.luogu.com.cn/training/list)完成入门系列之后再来看VEX的教程\n\n## 编译环境\n支持VEX程序的软件有 [vscode](https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user) 、_VEXcode pro v5_ 等，本教程只介绍 ___vscode___ 的使用  \n点击此处的链接可以下载到 _vscode_ 的安装包  \n打开 _vscode_ 之后，需要下载拓展 _chinese_ , _c/c++_ , _VEX Robotics_   \n`如果有兴趣可以追加拓展 Better C++ Syntax 、 C/C++ Compile Run 、 Dracula Official 、 CodeGeeX 等`   \n另外，为了防患于未然，下载一个 _git_ 和及时把代码上传到 _github_ 是相当的有必要的  \n（我才不会告诉你我有一次文件损坏了只好从头重写呢）  \n下载 _git_ 只需要跟着 _vscode_ 的窗口一通按就好了，如何使用请看网上的[教程](https://www.runoob.com/git/git-tutorial.html)  \n可以点击 _打开文件夹_ 来开始你的代码\n\n## 硬件条件\n\n### 主机  \n![主机图](https://picdl.sunbangyan.cn/2023/11/13/30bda85ee2d0a3bc594fb858377d6b63.png)  \n\n### 手柄  \n![手柄正面图](https://picdm.sunbangyan.cn/2023/11/13/968d794a5f0ca8bc9c740b824c06866b.jpg)  \n\n![手柄背面图](https://picdm.sunbangyan.cn/2023/11/13/fc5565c734a368637488c795360e6c48.jpg)  \n\n### 场控   \n![场控图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)  \n\n### 钢条   \n![钢条图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)  \n\n### 传感器   \n![传感器图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)  \n\n### 电机   \n![电机图](https://picdm.sunbangyan.cn/2023/11/13/b86c1e9a14d043aec8aacf6a918774dc.jpg)  \n\n### 气泵   \n![气泵图](https://picst.sunbangyan.cn/2023/11/13/04aceda6d70c2f7adc2594376fa5c41b.jpg)  \n\n## VEX社区\nVEX在[B站](https://www.bilibili.com/)中并不算极小众的，其中更新的比较多的up主是[TXTaylor297992](https://space.bilibili.com/1684280853)   \n此外，VEX有[中文官方论坛](https://vexforum.cn/)，在这里可以下载到官方给出的规则文档和场地拼接的文档\n\n# 面向对象\n## 面向对象思维的介绍及引入\n[wiki介绍](https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)     \n程序设计思维中，与 ___面向对象___ 相对的概念叫做 ___面向过程___ 。     \n后者考虑问题是通常把问题拆分成几个小问题，在编写程序中对应的行为一般有编写若干个函数。由于OI中一般只要考虑一个主问题即可，所以面向对象在OI中出现较多     \n前者则是将一个个功能封装进 _对象_ 中，其对应的行为以实现 _类(class)_ 为典型。这种程序设计的思维在 项目化编程 中有极大的优点——重用性、灵活性和扩展性 高\n在此处，我们将从[class](https://www.runoob.com/cplusplus/cpp-classes-objects.html)的声明、定义、使用来入手，切实的感受 ___面向对象___ 的代码风格\n## classの定义     \n[![菜鸟教程给出的定义结构](https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11.png)](https://www.runoob.com/cplusplus/cpp-classes-objects.html)\n### 类 及 类名\n给类取名的时候，可以参照[struct](https://www.runoob.com/cplusplus/cpp-data-structures.html)，命名规则和变量一致\n类的名字以及成员变量 ___最好___ 有实际意义，例：\n```cpp\nclass student{\n    private:\n    string name;//人的名字\n    int c,m,e;//C代表语文，M代表数学，E代表英语\n};\n```\n### [访问修饰符](https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html)     \n`本教程不涉及 继承 以及 protected 的使用，因为本教程用不到它们`\n- public\n    公有成员在程序中类的外部是可访问的\n    public下的成员变量以及成员函数的使用与`struct`无异\n- private\n    成员和类的默认访问修饰符是 private      \n    私有成员变量或函数在类的外部是`不可访问`的，甚至是`不可查看`的。只有`类和友元函数`可以访问私有成员。\n    例:\n    ```cpp\n    class Box {\n    private:\n        double width;\n    public:\n        double length;\n        void setWidth( double wid );\n        double getWidth( void );\n    }b;  //相当于换行写了   Box b;\n    ```\n    在这个例子中，变量width的访问修饰符是private，因此`b.width`的写法是非法的     \n    正确的做法是，通过`b.setwidth(double wid)`来设置`width`的值；\n    通过`b.getWidth()`来获得`width`的值     \n    类似这种 __在私有区域定义数据，在公有区域定义相关的函数，以便在类的外部也可以调用这些函数__ 的做法一般叫做 ___数据封装___      这样能避免受到外界的干扰和误用，从而确保了安全     \n    样例中的`length`就不符合数据封装的原则，不要这样写 ~~否则你有可能会被狠狠批斗的~~\n### [重载函数和重载运算符](https://www.runoob.com/cplusplus/cpp-overloading.html)\n#### 重载函数\nC++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。     \n在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的**形式参数**（个数、类型或顺序）必须不同。     我们不能仅通过**返回类型**的不同来重载函数。\n重载函数可以为我们调用功能较相近的函数时提供便利,例:\n```cpp\n// 哦对了，重载函数在class外也是可以使用的哦\nvoid swap(int& a,int& b)      {int t=a;a=b;b=t;}\nvoid swap(float& a,float& b)  {float t=a;a=b;b=t;}\nvoid swap(bool& a,bool& b)    {bool t=b;a=b;b=t;}\n// 以下是在类中使用的\nclass printer{\n    public:\n       print(int a)   {cout<<a;}\n       print(float a)   {cout<<a;}\n       print(string a)   {cout<<a;}\n};\n//错误示范\nint f(void){void}\nfloat f(void){void}\n//主函数\nsigned main(){\n    printer p;\n    p.print(114514);\n    p.print(\"\\n1919810\\n\");\n    int a,b;\n        cin>>a>>b;\n        swap(a,b);\n        cout<<a<<' '<<b<<endl;\n        return 0;\n}\n```\n#### 重载运算符\n在c++中，运算符实际上也可以看作是一种函数，因此，就出现了**重载运算符**的用法     \n在这里我们介绍 [赋值运算符  = ](https://www.runoob.com/cplusplus/assignment-operators-overloading.html)     \n多说无益，直接上样例：\n```cpp\nclass node{  //平面直角坐标系中的一个点\n    private:\n        int x,y; //坐标\n    public:\n        void operator= (const node& n){  \n            //此处const node& n 也可以写作node n\n            //使用&是为了提高效率，使用const是为了防止n的值被这里的赋值函数更改\n            x = n.x;    // 等效于 this->x = n.x;\n            y = n.y;    // 等效于 this->y = n.y;\n        }\n        friend istream operator>>(istream& in,node& n){\n            // 不要求掌握，看看就好\n            in>>n.x>>n.y;\n            return in;\n        }\n};\n\nsigned main(){\nnode n;\n    node m;\n    cin >> n;\n    m = n;\n    // ...\n    // 这段代码没有什么意义，只是为了说明重载运算符后类的运算就可以用符合我们原有习惯的写法来编写程序这一点而已\n    return 0；\n}\n```\n可以看出，使用重载运算符的写法非常符合我们对变量的编写习惯。  \n这使得我们在使用类时感到非常的舒适 XD  \n需要注意的是，所有的运算符函数都是放在 ___public___ 访问修饰符下的     (其中 流运算符 是以友元函数的形式)\n\n### [构造函数和析构函数](https://www.runoob.com/cplusplus/cpp-constructor-destructor.html)，[拷贝构造函数](https://www.runoob.com/cplusplus/cpp-copy-constructor.html)     \n这三个函数是类中非常特殊的函数。通过它们可以实现 **初始化新对象**、**释放对象占用内存**、**复制对象** 的作用     \n如果不编写这三个函数，编译器都会自动加入这几个函数。但是如果类中涉及到**指针**和**动态内存**时需要格外注意，此时必须人为的编写 *析构函数* 和 *拷贝构造函数*     \n切记，这三个函数都应放在 ***public*** 下\n#### 构造函数\n类的构造函数会在**每次创建类的新对象时**执行。     构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。     构造函数可用于为某些成员变量设置初始值。\n#### 析构函数\n类的析构函数会在**每次删除所创建的对象时**执行。     析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀     析构函数有助于在跳出程序（比如关闭文件、释放内存等）前**释放资源**。     默认析构函数不会释放成员指针变量所指向的内存空间，如果要释放的话，还需要人为定义释放。     因此，当类中存在*指针变量*并且有*动态内存*分配时，最好有一个析构函数用来释放内存     另外，析构函数**不可以接受形参**，因此不存在析构函数的重载函数\n#### 拷贝构造函数\n类的拷贝构造函数会在创建对象时，使用同一类中之前创建的对象来初始化新创建的对象。     \n函数一般有如下功能：\n- 通过使用另一个同类型的对象来 ___初始化___ 新创建的对象。\n- 复制对象并把它作为 ___函数参数___。\n- 复制对象并把它作为 ___函数返回值___。\n如果在类中没有定义拷贝构造函数，编译器会自行定义一个。     如果类带有*指针变量*，并有*动态内存*分配，则它必须有一个拷贝构造函数。\n\n样例：\n```cpp\nclass node{\n    private:\n        int *n;    \n    public:\n        node();//构造函数\n        node(int sum);          //带参数的构造函数\n        ~node();                //析构函数\n        node(const node& obj);  //拷贝构造函数\n        int value(){\n           return *n;\n        }\n};\nnode::node(){                  //在类外定义函数时需要在函数名前加上“类名::”\n    n = new int;                  //为指针分配内存\n    *n = 0;\n}\nnode::node(int sum){\n    n = new int;\n    *n = sum;\n}\nnode::~node(){\n    delete n;                     //释放指针内存\n}\nnode::node(const node& obj){\n    n = new int;\n    *n = *obj.n;                  //拷贝值\n}\nint VALUE(node n){return n.value();} //拷贝构造函数的用法 II\nnode bigger_one(node a,node b){return a.value()>b.value() ? a : b ;}\n    //三元运算符  ? :  。?前条件成立则返回 : 前的，否则返回 : 后的\nsigned main(){\n    node n;\n    //无参数的构造函数可以省略\n    node m(4);                    \n    //带参数的构造函数的调用需要在变量后加括号，就像函数一样\n    node k(m);\n    //拷贝构造函数的用法 I\n    n = bigger_one(m,k);\n    //拷贝构造函数用法   III\n    n = bigger_one(m,4);\n    //构造函数的另类用法，其中遇到数值4时会调用node(int num)来把4转化为node类型\n}\n```\n### [头文件](https://zh.wikipedia.org/wiki/%E5%A4%B4%E6%96%87%E4%BB%B6)与注释，cpp与定义\n还记得前文提到过 class 有着较高 重用性，灵活性，拓展性 吗？     \n如果在每一个程序的头部复制大量的class的定义，那么这种灵活性就荡然无存了     \n因此，就不得不介绍头文件了\n\n一个头文件一般包含类、子程序、变量和其他标识符的前置声明     \n习惯上，*函数、类、枚举类、常量*的声明会放在头文件中，即`xxx.h`     \n而对应的*函数、类*的源码以及*注释*则会放在对应的源文件中，即`xxx.cpp`     \n值得注意的是，为了防止头文件被反复调用造成重复声明的错误，头文件应在首行加入\n```cpp\n#pragma once\n```\n或者\n```cpp\n// xxx.h\n#ifndef XXX\n#define XXX\n//你的代码\n#endif\n```\n多说无用，下面摆上样例          \n\n[样例：实现高精度算法](https://blog.csdn.net/weixin_30500289/article/details/96110759)     \n样例的代码非常的长，但是使用时只需要：\n```cpp\n#include \"intx.h\"\nsigned main(){\n    //...\n    return 0;\n}\n```\n另外，vscode是支持[doxygen注释](https://www.cnblogs.com/schips/p/12200388.html)的     [Doxygen官方文档](https://doxygen.nl/manual/)     \n在头文件中使用doxygen注释，可以对声明的类，函数进行说明     \n鼠标在引用了对应头文件的文件中只需要悬停在函数/变量/类/命名空间/...上就可以快捷的获知该处的注释     \n样例:\n```cpp\n// node.h\n/**\n * @class node\n * @brief 表示一个平面直角坐标系中的一个点\n***/\nclass node{\n    private:\n        /**\n         * @brief 表示坐标 \\f$\\left ( x,y \\right )\\f$\n        ***/\n        int x,y;\n    public:\n        /**\n         * @brief 初始化\n         * @param a 对应x坐标\n         * @param b 对应y坐标\n        ***/\n        void set(int a,int b){\n           x = a;\n           y = b;\n        }\n        /**\n         * @brief 计算距离\n         * @param n 第二个坐标点\n         * @return 两点距离的平方\n        ***/\n        float dist(node n){\n           return (this->x - n.x)*(this->x - n.x) + (this->y - n.y)*(this->y - n.y);\n        }\n};\n```\n鼠标悬停效果图     \n   ![node的样例](https://picdl.sunbangyan.cn/2023/11/13/f733c7f3255c153f7c3b739af3aa4fad.png)     \n   ![set()的样例](https://picss.sunbangyan.cn/2023/11/13/eda1e9a2bb9d2267a57071ee053221ee.png)     \n   ![dist()的样例](https://picss.sunbangyan.cn/2023/11/13/d723d6d27e66114087a12f7b2d6c430b.png)     \n### 后期学习方式\n 学会了class的阅读、编写后，我们进入后面的学习就有了一定的基础     \n   在vscode中，***ctrl+左键***可以查看头文件、函数、类的定义区域     \n   进入`v5_vcs.h`->`v5_cpp.h`->`需要查询的文件`，就可以看到官方给出的所有函数的定义。     \n   ![01-6-e1](https://picss.sunbangyan.cn/2023/11/13/876f9447986e256e48ac73d7df16cf0a.png)    \n\t![01-6-e2](https://picss.sunbangyan.cn/2023/11/13/262d62b1cc74dc22bb1e75e63a734ad7.png)   \n\t![01-6-e3](https://picst.sunbangyan.cn/2023/11/13/4ed72494d898de9ac52b3f04d58b1062.png)     \n   当然，我会在接下来的章节来挑选重点的函数来讲解。有兴趣有余力的同学可以根据这个方法自行探究。     \n\n# 主机(brain)与手柄(Controller)\n## 主机、手柄、电脑之间的硬件连接     \n![连线图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)     \n## 创建新的VEX工程文件、文件标题规范、文件储存位置     \n从VEX插件中 顺次点击 `new project -> v5 -> c++ -> competition template -> 命名项目名字 -> create`，一个新的VEX工程文件就创建了\n## Brain.functions()\n鉴于LXB水平有限，所以这里只讲一部分重要的函数\n### 定义\n```cpp\n// robot-config.h\nextern brain Brain;\n```\n构造函数没有参数输入\n### brain.timer\n- 定义\n    ```cpp\n    // vex_brain.cpp\n    /** \n     * @brief 以指定的单位获取计时器的值。\n     * @param units 时间单位。有 sec (秒) 和 msec (毫秒)\n     * @return 返回一个双精度值，该值表示计时器的值。\n     */\n    double timer( timeUnits units );\n    /** \n     * @brief 将计时器重置为零。\n     */\n    void reset();\n    ```\n- 使用例\n    ```cpp\n        // your_file.cpp\n        float xxx;\n        Brain.Timer.reset();// 虽然在这里没必要但是这是一个好习惯\n        xxx = Brain.Timer.time(sec);\n        while ( Brain.Timer.time(msec) <= xxx*1000 + 1145 ); //空循环，经过1.145s之后会继续\n        ```\n### brain.screen\n- 定义\n    ```cpp\n    // vex_brain.cpp\n    void print( char *format, ... );\n    void printAt( int x, int y, const char *format, ... );\n    void drawPixel( int x,int y)\n    ```\n- 使用说明     \n    这里的`print()`函数的使用和`printf()`无异     \n    `printAt()`添加了参数`x`、`y`,含义是在主机屏幕输出时开始的坐标     \n    `drawPixel`是在屏幕的(x,y)处绘制一个像素点\n## Controller.functions()\n### 定义\n```cpp\n// robot-config.h\nextern controller Controller;\n```\n和 `brain` 的定义一样平淡\n### 按钮     \n![手柄正面图](https://picdm.sunbangyan.cn/2023/11/13/968d794a5f0ca8bc9c740b824c06866b.jpg)     \n图中按钮可用的共有10个，分别是：\n    - ButtonLeft\n    - ButtonRight\n    - ButtonUp\n    - ButtonDown\n    - ButtonA\n    - ButtonB\n    - ButtonX\n    - ButtonY\n    - ButtonL1\n    - ButtonL2\n    - ButtonR1\n    - ButtonR2\n\n他们都属于 `controller`类中的成员类`button`，有以下成员函数：\n+ pressing()     \n    检查当下，如果按钮被按下则返回`true`，否则返回`false`。\n+ pressed()     \n    形参需要填入一个`void`函数的函数名来调用     \n    下次按钮被按下的时候调用函数\n\n使用例:\n```cpp\n// your_file.cpp\n// ...\nvoid function(void){\n   // ...\n}\n\nsigned main(){\n// ...\n   if ( Controller1.ButtonA.pressing() ){\n      // ...\n   }\n   Controller1.ButtonB.pressed(function);\n}\n```\n\n### 摇杆     \n遥控器上看似只有两个遥感，实际上程序中对应了4个`axis`对象:\n  - Axis1\n  - Axis2\n  - Axis3\n  - Axis4\n\n一个遥杆可以向任意二维方向旋转，每一个二维的位置都可以用二维坐标来表示。也就是说，一个摇杆对应了两个不同方向的`axis`对象。     \n其中，`Axis1`和`Axis4`都是横向的，`Axis2`和`Axis3`都是竖向的。     \n`axis`一般只使用成员函数`position()`\n```cpp\n// your_file.cpp\nvoid Dipan(){\n   // 底盘运动函数\n   float a1 = Controller1.Axis1.position(percent);\n   float a3 = Controller1.Axis3.position(percent);\n   move(a3+a1,a3-a1);\n}\n```\n\n### 屏幕     \n有时，我们需要在遥控器上面显示信息来提示操作手。例如，改变了某个电机的转速时，通过提示操作手可以方便操作手进行下一步操作。     \n下面是在屏幕上显示一段文字的实例:\n```cpp\n// your_debug_file.cpp\n/* ... */ {\n   Controller1.Screen.clearLine(); // 清空之前的消息\n   Controller1.Screen.print(\"电机温度:%.2f ℃\",MotorShot.temperature(celsius)); //输出格式同std::printf()\n}\n```\n\n# 电机(motor)与运动\n## 声明     \n`motor`的构造函数有3个参数(建议都填入),分别是`index`、`gears`、`reverse`。\n```cpp\n// vex_motor.h\nmotor( int32_t index, gearSetting gears, bool reverse );\n```\n   - `index`     \n      表明电机接入的端口。     \n      主机上有两排端口,编号1-22。电机接入第`N`个端口就写 `PORTN`\n   - `gears`     \n      表明电机转速比     \n      有三种转速比,`ratio6_1`、`ratio18_1`、`ratio36_1`,     分别对应三种颜色的电机:蓝电机、绿电机、红电机     \n\n      ![](image/motor_radio.png)     \n   - `reverse`     \n      电机默认转向:正转or反转\n\n```cpp\n// robot-config.h\n// ...\nmotor MotorLF = motor(PORT1,radio18_1,false);\nmotor MotorLB = motor(PORT2,radio18_1,false);\nmotor MotorRF = motor(PORT3,radio18_1,true);\nmotor MotorRB = motor(PORT4,radio18_1,true);\n```\n## 电机 与 手动控制程序     \n### 电机转动     \n+ `spin()`     \n   此函数会让电机以指定速度旋转。     \n   ```cpp\n   // vex_motor.h\n   /**\n   * @brief 打开电机并按指定方向和指定速度旋转。\n   * @param dir 电机旋转的方向。有 forward 和 reverse 两种值。也支持 fwd 和 rev 两种缩写\n   * @param velocity 速度大小。值域[-100.0,100.0]。超出则化为 ±100\n   * @param units 速度的单位。常用 percent ,也可缩写为 pct\n   */\n   void spin( directionType dir, double velocity, velocityUnits units );\n   ```\n   以底盘的运动程序为例：\n   \n   ```cpp\n   // your_file.h\n   void move(float l,float r){\n      MotorLF.spin(forward,l,pct);\n      MotorLB.spin(forward,l,pct);\n      MotorRF.spin(forward,r,pct);\n      MotorRB.spin(forward,r,pct);\n   }\n   ```\n+ `stop()`     \n   使电机停止(停止向电机供电)\n   ```cpp\n   /** \n   * @brief 使用默认制动模式停止电机。\n   */\n   void stop( void );\n\n   /** \n   * @brief 使用指定的制动模式停止电机。\n   * @param mode 制动模式可以设置为滑行(coast)、制动(brake)或保持(hold)。\n   */\n   void stop( brakeType mode );\n   ```\n   以底盘的停止运行为例:\n   ```cpp\n   // your_file.cpp\n   void Stop(bool flag = false){\n      if (flag == false){\n         MotorLF.stop(coast);\n         MotorLB.stop(coast);\n         MotorRF.stop(coast);\n         MotorRB.stop(coast);\n      }\n      else{\n         MotorLF.stop(hold);\n         MotorLB.stop(hold);\n         MotorRF.stop(hold);\n         MotorRB.stop(hold);\n      }\n   }\n   ```\n底盘的停止一般使用`coast`。这是为了防止`hold`状态下机器人被碰撞导致电机的损坏。\n自动程序中由于有`不允许进入对手场地`的规则，因此只要队伍内部有配合，就不用讨论上述的问题\n### 监测电机\n* `double position( rotationUnits units )`     \n  返回电机转过的角度     \n  一般填入单位 degrees     \n* `void resetPosition()`     \n  重置 `position()`的返回值     \n  重置需要一小段时间，重置时尽量保持电机的静止\n* `double temperature( temperatureUnits units )`     \n  返回电机此时的温度     \n  可填入单位 摄氏度(`celsius`)     \n* ...\n\n# 陀螺仪 与 自动转弯\n## 声明、命名\n需要填入的参数仅有端口\n```cpp\n// vex_imu.h\ninertial( int32_t index, turnType dir = turnType::right );  \n```\n声明比`motor`简单\n```cpp\n// robot-config.cpp\ninertial ine = inertial(PORT11);\n```\n## 初始化\n类似于`motor`中的`position()`，对陀螺仪初始化是必要的。\n```cpp\n// your_file.cpp\nvoid reset(){\n  //初始化底盘电机\n  MotorLF.resetPosition();\n  MotorLB.resetPosition();\n  MotorRF.resetPosition();\n  MotorRB.resetPosition();\n  //初始化陀螺仪\n  ine.calibrate();\n  //初始化计时器\n  Brain.Timer.reset();\n}\n```\n## 数据检测\n仅介绍最常用的`heading()`,其他函数仅作涉及\n\n * `heading()`\n    ```cpp\n    /**\n     * @brief 获取惯性传感器的水平方向,方向角取值范围 [0,360] ,单位:度\n     * @return 返回一个double值，该值表示惯性传感器的方向。\n     * @param units 单位,默认为度\n     */\n    double heading( rotationUnits units = rotationUnits::deg );\n    ```\n    \n * `rotation()`  \n    获取仰角\n## 自动程序中的转弯问题     \n自动程序中，是不可以通过操作手柄来给机器人输入数据的。因此，机器人在自动赛时段的运动完全依靠程序的预设。     \n*如何让机器人旋转到我们需要的方向？*     \n\n\n最简单的写法是使用计时器。机器人旋转的速度是粗略相等的，因此在程序开发时间较短的情况下，这可以作为最后的保底程序来使用。\n   ```cpp\n   // your_auto_file.cpp\n   void turn_with_timer(int t){\n      int turn_speed=100;\n      if (t<0) {\n         turn_speed=-100;\n         t=-t;\n      }                                   // 左右转放在同一程序里\n      move(turn_speed,-turn_speed);\n      wait(t,msec);                       // 定义见于vex.h中\n      stop(true);                         // 旋转结束建议锁死，以提高准确度\n   }\n   ```\n但是这并不是一个合适的方案。我们难以控制每次旋转时的环境因素保持一样(比如地面摩擦系数，电机温度，电池电压等)。有时这种小小的偏差就会导致行进线路的变形，会影响到之后的自动任务，甚至可能`DQ(犯规)`。     \n在精准转弯的要求下，我们便需要陀螺仪来帮助校准。  \n```cpp\n// your_auto_file.cpp\n#include \"extensions.h\"    // include pids.h\nvoid turn(int deg){\n  pids turning ;          // 定义pid算法对象\n  turning.pre(deg,10);    // 向pid系统中输入目标和最大允许偏差\n  float movement;         // 记录每次pid系统反馈的运动量\n  Ine.calibrate();        // 初始化陀螺仪\n  while ( turning.check (Ine.heading(degrees)) )  {\n                          // 当机器人还未稳定在最大允许偏差区间内时一直不断调整\n    movement = turning.moving();\n    move(-movement *0.4,movement *0.4);\n                          // 运动\n  }\n  \n  stop(false);             // pid算法下机器人旋转的末速度很小，不需要hold\n  wait (0.8,sec);          // 等待机器人彻底停止\n}\n```\n`PID算法`将在[第7章节](/README.md/#07-pid精确控制算法)中详细介绍其优缺点。\n## 画外吐槽     \n我非常讨厌陀螺仪     \n因为它带给我的回忆除了出bug就是掉链子     \n\n[陀螺仪发癫珍贵录像](https://www.bilibili.com/video/BV1FW4y1V7af)\n\n# 气泵\n## 定义、命名     \n气泵的程序其实是最简单的，只不过定义和电机或者传感器都有点区别\n```cpp\n// vex_triport.h\n/**\n* @brief 在参数中指定的三线端口上创建新的digital_out对象。\n* @param port 三线端口。\n*/\ndigital_out( triport::port &port );\n```\n`triport`和电机端口的`int32_t`不同     \n|port : |int32_t|triport|\n|-|-|-|\n|个数|21|8|\n|编号|1-22|A-H|\n|位置|主机上下两侧|主机左侧|\n|格式|PORTn|Brain.ThreeWirePort.N|\n\n习惯上把气泵命名为 `pne` (Pneumatic components)\n```cpp\n// robot-config.cpp\ndigital_out pne ( Brain.ThreeWirePort.A );\n```\n\n## 实物介绍     \n气泵的程序很简单，但是气泵的部件比电机复杂的多     \n![](image/05-2-e1.png)     \n图中的结构中，通过程序所能操作的仅仅是 发送到/接受数据于 `换向阀驱动器` ，从而改变换向阀联通的状态。     \n机器人上是否使用气泵，需要考虑机械师的技术水平。因为程序能在气泵上做的事情太少太简单了。\n## functions\n* `set()`\n  设置气泵的伸缩状态。\n  ```cpp\n  /**\n     * @brief 将digital_out设备设置为布尔值。\n     * @param value 布尔值。(true or false)\n     */\n    void set( bool value );\n  ```\n  当`pne.set(true)`执行后，换向阀驱动器将会亮起红灯     \n  当`pne.set(false)`执行后，换向阀驱动器红队将会熄灭\n* value()     \n  读取气泵的状态     \n  `pne.set(true)`后，value的返回值就会变为`true`，反之亦然。\n\n# 视觉传感器\n1. 定义、命名\n2. 初始化\n3. 颜色设置 和 识别机制的介绍\n4. 返回值\n\n# *PID精确控制算法\n## 引入\nPID即：`Proportional`（比例）、`Integral`（积分）、`Differential`（微分）的缩写。顾名思义，PID控制算法是结合比例、积分和微分三种环节于一体的控制算法  \nPID控制的实质就是根据输入的偏差值，按照比例、积分、微分的函数关系进行运算，运算结果用以控制输出  \n![PID算法图](https://baike.baidu.com/pic/PID%E7%AE%97%E6%B3%95/4660106/0/8435e5dde71190ef66feccacc11b9d16fdfa60bf?fr=lemma&fromModule=lemma_content-image)\n### 偏差\n`偏差`即**预定目标**和**当前状态**之间的差值  \n我们设 预定值`goal`是我们希望系统平衡时传感器的返回值  \n传感器实时返回的数值为`input`  \n那么根据`偏差`的定义，我们可以得到`偏差`的计算式:\n$$ error = goal - input $$\n其中`error`为我们所求的偏差值\n### 比例算法\n> 成比例地反映控制系统的偏差信号，偏差一旦产生，立即产生控制作用以减小偏差。\n\n比例算法的核心思想非常简单：离目标越远，就应该调整的越快  \n我们举 `量取1L水`的例子来说明  \n如果桶里面只有 10ml 水 ，那么你倒水的时候就会哗哗的往里面倒  \n而如果此时 桶快满了 ，你为了不倒多了，你就会选择慢慢的向下加  \n\n将这样的思想抽象成数学语言:  \n记比例算法的输出值为 `P`  \n那么 `error` 越大 ， `P`就应该越大\n$$ P \\propto error $$\n即\n$$ P = k_p · error $$\n其中 $$k_p$$ 是我们引入的系数，称为`比例系数`\n### 积分算法\n> 积分环节的作用，主要用于消除静差提高系统的无差度。\n#### 定义\n积分算法是对比例算法的补充  \n还是`量取1L水`的例子,但是这次桶破了一个洞:\n> 为了方便说明，不妨假设每秒的漏水为$$10ml$$ , $$k_p=0.8$$\n\n你还是用`比例算法`的思想去倒水  \n然而在你加水加到了$$920ml$$时，你会发现此时水位已经不再上涨  \n这是因为此时你加水的速度是\n$$ (1000-920)\\times0.8=10 \\space (ml) $$\n和漏水的速度持平\n\n如果你可以关注到水位一直都在$$920ml$$处这个现象的话,你可以尝试根据累计水位和目标之间的偏差来计算你到底应该额外加入多少的水  \n记积分算法的输出值为`I`,那么:\n$$ I \\propto \\int_{0}^{T} error·{\\rm d}t $$\n即\n$$ I = k_i · \\int_{0}^{T} error·{\\rm d}t $$\n其中$$k_i$$为我们引入的常量`积分系数`  \n$$T$$为pid算法从开始运行到当前时间的计时\n#### 离散化\n显然,$$\\lim_{dt \\to 0^{+}}$$的情况在现实中是无法实现的,我们只能采取近似的计算方法  \n积分算法的理论计算式离散化后可以用下式计算:  \n$$ I = k_i · \\sum_{t=0}^{T} error·\\Delta t $$\n用C++实现:\n```cpp\nI = I + ki*error*(time_now - time_last);\ntime_last = time_now;\n```\n#### 积分限制器\n引入积分算法后可能出现以下情况:  \n1. 以电机为例，在电机的启停或设定值大幅变化时，系统在较短时间内产生了很大的偏差。此时积分迅速积累，就会造成控制量输出远远大于电机的极限输入控制量，从而会引起很大的超调，甚至会产生震荡。  \n2. 积分饱和：当系统一直存在一个方向的偏差时，积分会不断增大，会造成控制量进入饱和区，一旦出现反向的偏差时，需要很长时间才能推出饱和区，而去响应反向偏差。也以电机为例，电机在积分饱和时，电机响应延时较大，会出现电机超出目标位置，需来回调整数次才能稳定。  \n\n此时就有必要限制积分算法的输出  \n如果$$I$$超出了某一预定的范围$$[-I_{max},I_{max}]$$,可以对I的大小进行限制\n```cpp\nvoid I_limit(float& I,float I_max){\n    if (I>I_max){\n        I = I_max;\n    }\n    else if (I<-I_max){\n        I = -I_max;\n    }\n    return;\n}\n```\n\n### 微分算法\n> 微分环节的作用能反映偏差信号的变化趋势（变化速率），并能在偏差信号的值变得太大之前，在系统中引入一个有效的早期修正信号，从而加快系统的动作速度，减小调节时间。\n>\n#### 定义\n微分算法同样是对比例算法的补充  \n这次的例子换成`在手指上面立筷子`吧  \n\n立筷子还不简单,你轻易的让筷子保持了竖直  \n正当我们放松的时候，一阵阴风袭来，把筷子稍稍吹歪了  \n* 只用比例算法？  \n  筷子才歪这么一点，我都不需要怎么动哎  \n  然后很快筷子就倒了\n* 加上积分算法?\n  本来筷子是保持平衡的，也就是\n  $$output=P+I=0$$  \n  $$\\because P=K_p·error=0$$  \n  $$\\therefore I_{t=0}=0$$  \n  此时积分算法能起到的效果和比例算法没有什么差别了\n\n看来我们需要新的方法  \n立筷子之所以容易失败，是因为筷子只要有一点偏差，如果不迅速的加以修正，筷子就会快速的倒下  \n如果在$$P$$和$$I$$的基础上，再增加一项$$D$$，使得\n$$ D \\propto 筷子高度的瞬时变化率 $$\n问题就可以迎刃而解  \n注意到`微分`是衡量`瞬时变化率`的很好的数学工具，于是我们可以写出:\n$$ D \\propto \\tfrac{d}{dt} error $$\n即\n$$ D = k_d·\\tfrac{d}{dt} error $$\n其中$$k_d$$为我们引入的`微分系数`\n#### 离散化\n同样的，由于$$\\lim_{dt \\to 0^{+}}$$在现实中无法实现，微分算法的计算同样需要离散化  \n$$ D = k_d·\\tfrac{ \\Delta error }{ \\Delta t } $$  \n用c++实现:  \n```cpp\nD = kd*(error-error_last)/(time_now-time_last);\nerror_last = error;\ntime_last = time_now;\n```\n## 综合使用\n使用$$P$$、$$I$$、$$D$$三种算法，足以满足大多数输出的控制了\n总输出值的理想计算式:\n$$ output = P + I + D $$\n如果全部带入:\n$$ output = k_p·error + k_i·\\int_{0}^{T}error·dt + k_d·\\tfrac{d}{dt}error $$\n离散化后可以用C++实现\n$$ output = k_p·error + k_i·\\sum_{t=0}^{T}error·\\Delta t + k_d·\\tfrac{ \\Delta error }{ \\Delta t }$$\n## 调试参数\n实践中，真正折磨人的不是PID算法的理解，而是PID细节的实现和参数的调节  \n对于$$k_p$$ $$k_i$$ $$k_d$$三个参数，获得的办法只有:  \n* 不断实验\n* ~~玄学~~ 直觉\n\n~~祝你好运~~\n\n# 手动程序\n1. 与操作手对接\n2. 底盘方案\n   * 左前进右旋转\n   * 万向底盘\n   * 无头模式\n\n# 自动程序\n1. 自动赛规则\n2. 前进控制\n3. 转弯控制\n4. 完成自动赛任务\n5. 多备案 + 耐心\n\n# 规则类怪谈\n1. 码风要求\n2. 注释规范化\n3. 请参与github的更新\n","slug":"VEX机器人程序","published":1,"updated":"2024-02-03T12:00:02.914Z","_id":"cls44ji2g00016owk6uzwd0r8","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h1><h2 id=\"语言基础说明\"><a href=\"#语言基础说明\" class=\"headerlink\" title=\"语言基础说明\"></a>语言基础说明</h2><p>VEX程序可以支持 <em>C++</em> 和 <em>python</em> ，但是在这里只涉及 <em><strong>C++</strong></em><br>如果有 <em>python</em> 基础而没有 <em>C++</em> 基础，建议访问<a href=\"https://www.runoob.com/cplusplus/cpp-tutorial.html\">菜鸟教程</a>来学习语法知识<br>如果编程基础近似为0而对编程有兴趣的同学，建议先在<a href=\"https://www.luogu.com.cn/training/list\">洛谷题单</a>完成入门系列之后再来看VEX的教程</p>\n<h2 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h2><p>支持VEX程序的软件有 <a href=\"https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user\">vscode</a> 、<em>VEXcode pro v5</em> 等，本教程只介绍 <em><strong>vscode</strong></em> 的使用<br>点击此处的链接可以下载到 <em>vscode</em> 的安装包<br>打开 <em>vscode</em> 之后，需要下载拓展 <em>chinese</em> , <em>c&#x2F;c++</em> , <em>VEX Robotics</em><br><code>如果有兴趣可以追加拓展 Better C++ Syntax 、 C/C++ Compile Run 、 Dracula Official 、 CodeGeeX 等</code><br>另外，为了防患于未然，下载一个 <em>git</em> 和及时把代码上传到 <em>github</em> 是相当的有必要的<br>（我才不会告诉你我有一次文件损坏了只好从头重写呢）<br>下载 <em>git</em> 只需要跟着 <em>vscode</em> 的窗口一通按就好了，如何使用请看网上的<a href=\"https://www.runoob.com/git/git-tutorial.html\">教程</a><br>可以点击 <em>打开文件夹</em> 来开始你的代码</p>\n<h2 id=\"硬件条件\"><a href=\"#硬件条件\" class=\"headerlink\" title=\"硬件条件\"></a>硬件条件</h2><h3 id=\"主机\"><a href=\"#主机\" class=\"headerlink\" title=\"主机\"></a>主机</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/30bda85ee2d0a3bc594fb858377d6b63.png\" alt=\"主机图\">  </p>\n<h3 id=\"手柄\"><a href=\"#手柄\" class=\"headerlink\" title=\"手柄\"></a>手柄</h3><p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/968d794a5f0ca8bc9c740b824c06866b.jpg\" alt=\"手柄正面图\">  </p>\n<p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/fc5565c734a368637488c795360e6c48.jpg\" alt=\"手柄背面图\">  </p>\n<h3 id=\"场控\"><a href=\"#场控\" class=\"headerlink\" title=\"场控\"></a>场控</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"场控图\">  </p>\n<h3 id=\"钢条\"><a href=\"#钢条\" class=\"headerlink\" title=\"钢条\"></a>钢条</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"钢条图\">  </p>\n<h3 id=\"传感器\"><a href=\"#传感器\" class=\"headerlink\" title=\"传感器\"></a>传感器</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"传感器图\">  </p>\n<h3 id=\"电机\"><a href=\"#电机\" class=\"headerlink\" title=\"电机\"></a>电机</h3><p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/b86c1e9a14d043aec8aacf6a918774dc.jpg\" alt=\"电机图\">  </p>\n<h3 id=\"气泵\"><a href=\"#气泵\" class=\"headerlink\" title=\"气泵\"></a>气泵</h3><p><img src=\"https://picst.sunbangyan.cn/2023/11/13/04aceda6d70c2f7adc2594376fa5c41b.jpg\" alt=\"气泵图\">  </p>\n<h2 id=\"VEX社区\"><a href=\"#VEX社区\" class=\"headerlink\" title=\"VEX社区\"></a>VEX社区</h2><p>VEX在<a href=\"https://www.bilibili.com/\">B站</a>中并不算极小众的，其中更新的比较多的up主是<a href=\"https://space.bilibili.com/1684280853\">TXTaylor297992</a><br>此外，VEX有<a href=\"https://vexforum.cn/\">中文官方论坛</a>，在这里可以下载到官方给出的规则文档和场地拼接的文档</p>\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><h2 id=\"面向对象思维的介绍及引入\"><a href=\"#面向对象思维的介绍及引入\" class=\"headerlink\" title=\"面向对象思维的介绍及引入\"></a>面向对象思维的介绍及引入</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\">wiki介绍</a><br>程序设计思维中，与 <em><strong>面向对象</strong></em> 相对的概念叫做 <em><strong>面向过程</strong></em> 。<br>后者考虑问题是通常把问题拆分成几个小问题，在编写程序中对应的行为一般有编写若干个函数。由于OI中一般只要考虑一个主问题即可，所以面向对象在OI中出现较多<br>前者则是将一个个功能封装进 <em>对象</em> 中，其对应的行为以实现 <em>类(class)</em> 为典型。这种程序设计的思维在 项目化编程 中有极大的优点——重用性、灵活性和扩展性 高<br>在此处，我们将从<a href=\"https://www.runoob.com/cplusplus/cpp-classes-objects.html\">class</a>的声明、定义、使用来入手，切实的感受 <em><strong>面向对象</strong></em> 的代码风格</p>\n<h2 id=\"classの定义\"><a href=\"#classの定义\" class=\"headerlink\" title=\"classの定义\"></a>classの定义</h2><p><a href=\"https://www.runoob.com/cplusplus/cpp-classes-objects.html\"><img src=\"https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11.png\" alt=\"菜鸟教程给出的定义结构\"></a></p>\n<h3 id=\"类-及-类名\"><a href=\"#类-及-类名\" class=\"headerlink\" title=\"类 及 类名\"></a>类 及 类名</h3><p>给类取名的时候，可以参照<a href=\"https://www.runoob.com/cplusplus/cpp-data-structures.html\">struct</a>，命名规则和变量一致<br>类的名字以及成员变量 <em><strong>最好</strong></em> 有实际意义，例：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span><span class=\"token comment\">//人的名字</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">;</span><span class=\"token comment\">//C代表语文，M代表数学，E代表英语</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a><a href=\"https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html\">访问修饰符</a></h3><p><code>本教程不涉及 继承 以及 protected 的使用，因为本教程用不到它们</code></p>\n<ul>\n<li>public<br>  公有成员在程序中类的外部是可访问的<br>  public下的成员变量以及成员函数的使用与<code>struct</code>无异</li>\n<li>private<br>  成员和类的默认访问修饰符是 private<br>  私有成员变量或函数在类的外部是<code>不可访问</code>的，甚至是<code>不可查看</code>的。只有<code>类和友元函数</code>可以访问私有成员。<br>  例:  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> wid <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//相当于换行写了   Box b;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n  在这个例子中，变量width的访问修饰符是private，因此<code>b.width</code>的写法是非法的<br>  正确的做法是，通过<code>b.setwidth(double wid)</code>来设置<code>width</code>的值；<br>  通过<code>b.getWidth()</code>来获得<code>width</code>的值<br>  类似这种 <strong>在私有区域定义数据，在公有区域定义相关的函数，以便在类的外部也可以调用这些函数</strong> 的做法一般叫做 <em><strong>数据封装</strong></em>      这样能避免受到外界的干扰和误用，从而确保了安全<br>  样例中的<code>length</code>就不符合数据封装的原则，不要这样写 <del>否则你有可能会被狠狠批斗的</del></li>\n</ul>\n<h3 id=\"重载函数和重载运算符\"><a href=\"#重载函数和重载运算符\" class=\"headerlink\" title=\"重载函数和重载运算符\"></a><a href=\"https://www.runoob.com/cplusplus/cpp-overloading.html\">重载函数和重载运算符</a></h3><h4 id=\"重载函数\"><a href=\"#重载函数\" class=\"headerlink\" title=\"重载函数\"></a>重载函数</h4><p>C++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。<br>在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的<strong>形式参数</strong>（个数、类型或顺序）必须不同。     我们不能仅通过<strong>返回类型</strong>的不同来重载函数。<br>重载函数可以为我们调用功能较相近的函数时提供便利,例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 哦对了，重载函数在class外也是可以使用的哦</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">float</span> t<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">bool</span> t<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 以下是在类中使用的</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">printer</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> a<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string a<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//错误示范</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//主函数</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    printer p<span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">114514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n1919810\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">' '</span><span class=\"token operator\">&lt;&lt;</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"重载运算符\"><a href=\"#重载运算符\" class=\"headerlink\" title=\"重载运算符\"></a>重载运算符</h4><p>在c++中，运算符实际上也可以看作是一种函数，因此，就出现了<strong>重载运算符</strong>的用法<br>在这里我们介绍 <a href=\"https://www.runoob.com/cplusplus/assignment-operators-overloading.html\">赋值运算符  &#x3D; </a><br>多说无益，直接上样例：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//平面直角坐标系中的一个点</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span> <span class=\"token comment\">//坐标</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  \n            <span class=\"token comment\">//此处const node&amp; n 也可以写作node n</span>\n            <span class=\"token comment\">//使用&amp;是为了提高效率，使用const是为了防止n的值被这里的赋值函数更改</span>\n            x <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 等效于 this->x = n.x;</span>\n            y <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 等效于 this->y = n.y;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">friend</span> istream <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span>node<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 不要求掌握，看看就好</span>\n            in<span class=\"token operator\">>></span>n<span class=\"token punctuation\">.</span>x<span class=\"token operator\">>></span>n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\nnode n<span class=\"token punctuation\">;</span>\n    node m<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// 这段代码没有什么意义，只是为了说明重载运算符后类的运算就可以用符合我们原有习惯的写法来编写程序这一点而已</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>；\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看出，使用重载运算符的写法非常符合我们对变量的编写习惯。<br>这使得我们在使用类时感到非常的舒适 XD<br>需要注意的是，所有的运算符函数都是放在 <em><strong>public</strong></em> 访问修饰符下的     (其中 流运算符 是以友元函数的形式)</p>\n<h3 id=\"构造函数和析构函数，拷贝构造函数\"><a href=\"#构造函数和析构函数，拷贝构造函数\" class=\"headerlink\" title=\"构造函数和析构函数，拷贝构造函数\"></a><a href=\"https://www.runoob.com/cplusplus/cpp-constructor-destructor.html\">构造函数和析构函数</a>，<a href=\"https://www.runoob.com/cplusplus/cpp-copy-constructor.html\">拷贝构造函数</a></h3><p>这三个函数是类中非常特殊的函数。通过它们可以实现 <strong>初始化新对象</strong>、<strong>释放对象占用内存</strong>、<strong>复制对象</strong> 的作用<br>如果不编写这三个函数，编译器都会自动加入这几个函数。但是如果类中涉及到<strong>指针</strong>和<strong>动态内存</strong>时需要格外注意，此时必须人为的编写 <em>析构函数</em> 和 <em>拷贝构造函数</em><br>切记，这三个函数都应放在 <em><strong>public</strong></em> 下</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>类的构造函数会在<strong>每次创建类的新对象时</strong>执行。     构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。     构造函数可用于为某些成员变量设置初始值。</p>\n<h4 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h4><p>类的析构函数会在<strong>每次删除所创建的对象时</strong>执行。     析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀     析构函数有助于在跳出程序（比如关闭文件、释放内存等）前<strong>释放资源</strong>。     默认析构函数不会释放成员指针变量所指向的内存空间，如果要释放的话，还需要人为定义释放。     因此，当类中存在<em>指针变量</em>并且有<em>动态内存</em>分配时，最好有一个析构函数用来释放内存     另外，析构函数<strong>不可以接受形参</strong>，因此不存在析构函数的重载函数</p>\n<h4 id=\"拷贝构造函数\"><a href=\"#拷贝构造函数\" class=\"headerlink\" title=\"拷贝构造函数\"></a>拷贝构造函数</h4><p>类的拷贝构造函数会在创建对象时，使用同一类中之前创建的对象来初始化新创建的对象。<br>函数一般有如下功能：</p>\n<ul>\n<li>通过使用另一个同类型的对象来 <em><strong>初始化</strong></em> 新创建的对象。</li>\n<li>复制对象并把它作为 ___函数参数___。</li>\n<li>复制对象并把它作为 ___函数返回值___。<br>如果在类中没有定义拷贝构造函数，编译器会自行定义一个。     如果类带有<em>指针变量</em>，并有<em>动态内存</em>分配，则它必须有一个拷贝构造函数。</li>\n</ul>\n<p>样例：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>    \n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//构造函数</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//带参数的构造函数</span>\n        <span class=\"token operator\">~</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">//析构函数</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//拷贝构造函数</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nnode<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>                  <span class=\"token comment\">//在类外定义函数时需要在函数名前加上“类名::”</span>\n    n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">//为指针分配内存</span>\n    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nnode<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">node</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">delete</span> n<span class=\"token punctuation\">;</span>                     <span class=\"token comment\">//释放指针内存</span>\n<span class=\"token punctuation\">&#125;</span>\nnode<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">//拷贝值</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">VALUE</span><span class=\"token punctuation\">(</span>node n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//拷贝构造函数的用法 II</span>\nnode <span class=\"token function\">bigger_one</span><span class=\"token punctuation\">(</span>node a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>b<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//三元运算符  ? :  。?前条件成立则返回 : 前的，否则返回 : 后的</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    node n<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//无参数的构造函数可以省略</span>\n    node <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    \n    <span class=\"token comment\">//带参数的构造函数的调用需要在变量后加括号，就像函数一样</span>\n    node <span class=\"token function\">k</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//拷贝构造函数的用法 I</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">bigger_one</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//拷贝构造函数用法   III</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">bigger_one</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//构造函数的另类用法，其中遇到数值4时会调用node(int num)来把4转化为node类型</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"头文件与注释，cpp与定义\"><a href=\"#头文件与注释，cpp与定义\" class=\"headerlink\" title=\"头文件与注释，cpp与定义\"></a><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%B4%E6%96%87%E4%BB%B6\">头文件</a>与注释，cpp与定义</h3><p>还记得前文提到过 class 有着较高 重用性，灵活性，拓展性 吗？<br>如果在每一个程序的头部复制大量的class的定义，那么这种灵活性就荡然无存了<br>因此，就不得不介绍头文件了</p>\n<p>一个头文件一般包含类、子程序、变量和其他标识符的前置声明<br>习惯上，<em>函数、类、枚举类、常量</em>的声明会放在头文件中，即<code>xxx.h</code><br>而对应的<em>函数、类</em>的源码以及<em>注释</em>则会放在对应的源文件中，即<code>xxx.cpp</code><br>值得注意的是，为了防止头文件被反复调用造成重复声明的错误，头文件应在首行加入</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// xxx.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">XXX</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">XXX</span></span>\n<span class=\"token comment\">//你的代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>多说无用，下面摆上样例          </p>\n<p><a href=\"https://blog.csdn.net/weixin_30500289/article/details/96110759\">样例：实现高精度算法</a><br>样例的代码非常的长，但是使用时只需要：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"intx.h\"</span></span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>另外，vscode是支持<a href=\"https://www.cnblogs.com/schips/p/12200388.html\">doxygen注释</a>的     <a href=\"https://doxygen.nl/manual/\">Doxygen官方文档</a><br>在头文件中使用doxygen注释，可以对声明的类，函数进行说明<br>鼠标在引用了对应头文件的文件中只需要悬停在函数&#x2F;变量&#x2F;类&#x2F;命名空间&#x2F;…上就可以快捷的获知该处的注释<br>样例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// node.h</span>\n<span class=\"token comment\">/**\n * @class node\n * @brief 表示一个平面直角坐标系中的一个点\n***/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/**\n         * @brief 表示坐标 \\f$\\left ( x,y \\right )\\f$\n        ***/</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/**\n         * @brief 初始化\n         * @param a 对应x坐标\n         * @param b 对应y坐标\n        ***/</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n           y <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">/**\n         * @brief 计算距离\n         * @param n 第二个坐标点\n         * @return 两点距离的平方\n        ***/</span>\n        <span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>node n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>x <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>x <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>y <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>y <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>鼠标悬停效果图<br>   <img src=\"https://picdl.sunbangyan.cn/2023/11/13/f733c7f3255c153f7c3b739af3aa4fad.png\" alt=\"node的样例\"><br>   <img src=\"https://picss.sunbangyan.cn/2023/11/13/eda1e9a2bb9d2267a57071ee053221ee.png\" alt=\"set()的样例\"><br>   <img src=\"https://picss.sunbangyan.cn/2023/11/13/d723d6d27e66114087a12f7b2d6c430b.png\" alt=\"dist()的样例\">     </p>\n<h3 id=\"后期学习方式\"><a href=\"#后期学习方式\" class=\"headerlink\" title=\"后期学习方式\"></a>后期学习方式</h3><p> 学会了class的阅读、编写后，我们进入后面的学习就有了一定的基础<br>   在vscode中，<em><strong>ctrl+左键</strong></em>可以查看头文件、函数、类的定义区域<br>   进入<code>v5_vcs.h</code>-&gt;<code>v5_cpp.h</code>-&gt;<code>需要查询的文件</code>，就可以看到官方给出的所有函数的定义。<br>   <img src=\"https://picss.sunbangyan.cn/2023/11/13/876f9447986e256e48ac73d7df16cf0a.png\" alt=\"01-6-e1\"><br>    <img src=\"https://picss.sunbangyan.cn/2023/11/13/262d62b1cc74dc22bb1e75e63a734ad7.png\" alt=\"01-6-e2\"><br>    <img src=\"https://picst.sunbangyan.cn/2023/11/13/4ed72494d898de9ac52b3f04d58b1062.png\" alt=\"01-6-e3\"><br>   当然，我会在接下来的章节来挑选重点的函数来讲解。有兴趣有余力的同学可以根据这个方法自行探究。     </p>\n<h1 id=\"主机-brain-与手柄-Controller\"><a href=\"#主机-brain-与手柄-Controller\" class=\"headerlink\" title=\"主机(brain)与手柄(Controller)\"></a>主机(brain)与手柄(Controller)</h1><h2 id=\"主机、手柄、电脑之间的硬件连接\"><a href=\"#主机、手柄、电脑之间的硬件连接\" class=\"headerlink\" title=\"主机、手柄、电脑之间的硬件连接\"></a>主机、手柄、电脑之间的硬件连接</h2><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"连线图\">     </p>\n<h2 id=\"创建新的VEX工程文件、文件标题规范、文件储存位置\"><a href=\"#创建新的VEX工程文件、文件标题规范、文件储存位置\" class=\"headerlink\" title=\"创建新的VEX工程文件、文件标题规范、文件储存位置\"></a>创建新的VEX工程文件、文件标题规范、文件储存位置</h2><p>从VEX插件中 顺次点击 <code>new project -&gt; v5 -&gt; c++ -&gt; competition template -&gt; 命名项目名字 -&gt; create</code>，一个新的VEX工程文件就创建了</p>\n<h2 id=\"Brain-functions\"><a href=\"#Brain-functions\" class=\"headerlink\" title=\"Brain.functions()\"></a>Brain.functions()</h2><p>鉴于LXB水平有限，所以这里只讲一部分重要的函数</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.h</span>\n<span class=\"token keyword\">extern</span> brain Brain<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>构造函数没有参数输入</p>\n<h3 id=\"brain-timer\"><a href=\"#brain-timer\" class=\"headerlink\" title=\"brain.timer\"></a>brain.timer</h3><ul>\n<li>定义  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_brain.cpp</span>\n<span class=\"token comment\">/** \n * @brief 以指定的单位获取计时器的值。\n * @param units 时间单位。有 sec (秒) 和 msec (毫秒)\n * @return 返回一个双精度值，该值表示计时器的值。\n */</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span> timeUnits units <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** \n * @brief 将计时器重置为零。\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用例  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">float</span> xxx<span class=\"token punctuation\">;</span>\nBrain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 虽然在这里没必要但是这是一个好习惯</span>\nxxx <span class=\"token operator\">=</span> Brain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span>sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> Brain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span>msec<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> xxx<span class=\"token operator\">*</span><span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token number\">1145</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//空循环，经过1.145s之后会继续</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"brain-screen\"><a href=\"#brain-screen\" class=\"headerlink\" title=\"brain.screen\"></a>brain.screen</h3><ul>\n<li>定义  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_brain.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printAt</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">drawPixel</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用说明<br>  这里的<code>print()</code>函数的使用和<code>printf()</code>无异<br>  <code>printAt()</code>添加了参数<code>x</code>、<code>y</code>,含义是在主机屏幕输出时开始的坐标<br>  <code>drawPixel</code>是在屏幕的(x,y)处绘制一个像素点</li>\n</ul>\n<h2 id=\"Controller-functions\"><a href=\"#Controller-functions\" class=\"headerlink\" title=\"Controller.functions()\"></a>Controller.functions()</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.h</span>\n<span class=\"token keyword\">extern</span> controller Controller<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>和 <code>brain</code> 的定义一样平淡</p>\n<h3 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h3><p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/968d794a5f0ca8bc9c740b824c06866b.jpg\" alt=\"手柄正面图\"><br>图中按钮可用的共有10个，分别是：<br>    - ButtonLeft<br>    - ButtonRight<br>    - ButtonUp<br>    - ButtonDown<br>    - ButtonA<br>    - ButtonB<br>    - ButtonX<br>    - ButtonY<br>    - ButtonL1<br>    - ButtonL2<br>    - ButtonR1<br>    - ButtonR2</p>\n<p>他们都属于 <code>controller</code>类中的成员类<code>button</code>，有以下成员函数：</p>\n<ul>\n<li>pressing()<br>  检查当下，如果按钮被按下则返回<code>true</code>，否则返回<code>false</code>。</li>\n<li>pressed()<br>  形参需要填入一个<code>void</code>函数的函数名来调用<br>  下次按钮被按下的时候调用函数</li>\n</ul>\n<p>使用例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// ...</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> Controller1<span class=\"token punctuation\">.</span>ButtonA<span class=\"token punctuation\">.</span><span class=\"token function\">pressing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// ...</span>\n   <span class=\"token punctuation\">&#125;</span>\n   Controller1<span class=\"token punctuation\">.</span>ButtonB<span class=\"token punctuation\">.</span><span class=\"token function\">pressed</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"摇杆\"><a href=\"#摇杆\" class=\"headerlink\" title=\"摇杆\"></a>摇杆</h3><p>遥控器上看似只有两个遥感，实际上程序中对应了4个<code>axis</code>对象:</p>\n<ul>\n<li>Axis1</li>\n<li>Axis2</li>\n<li>Axis3</li>\n<li>Axis4</li>\n</ul>\n<p>一个遥杆可以向任意二维方向旋转，每一个二维的位置都可以用二维坐标来表示。也就是说，一个摇杆对应了两个不同方向的<code>axis</code>对象。<br>其中，<code>Axis1</code>和<code>Axis4</code>都是横向的，<code>Axis2</code>和<code>Axis3</code>都是竖向的。<br><code>axis</code>一般只使用成员函数<code>position()</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Dipan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 底盘运动函数</span>\n   <span class=\"token keyword\">float</span> a1 <span class=\"token operator\">=</span> Controller1<span class=\"token punctuation\">.</span>Axis1<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">float</span> a3 <span class=\"token operator\">=</span> Controller1<span class=\"token punctuation\">.</span>Axis3<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a3<span class=\"token operator\">+</span>a1<span class=\"token punctuation\">,</span>a3<span class=\"token operator\">-</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"屏幕\"><a href=\"#屏幕\" class=\"headerlink\" title=\"屏幕\"></a>屏幕</h3><p>有时，我们需要在遥控器上面显示信息来提示操作手。例如，改变了某个电机的转速时，通过提示操作手可以方便操作手进行下一步操作。<br>下面是在屏幕上显示一段文字的实例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_debug_file.cpp</span>\n<span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#123;</span>\n   Controller1<span class=\"token punctuation\">.</span>Screen<span class=\"token punctuation\">.</span><span class=\"token function\">clearLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清空之前的消息</span>\n   Controller1<span class=\"token punctuation\">.</span>Screen<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电机温度:%.2f ℃\"</span><span class=\"token punctuation\">,</span>MotorShot<span class=\"token punctuation\">.</span><span class=\"token function\">temperature</span><span class=\"token punctuation\">(</span>celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出格式同std::printf()</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"电机-motor-与运动\"><a href=\"#电机-motor-与运动\" class=\"headerlink\" title=\"电机(motor)与运动\"></a>电机(motor)与运动</h1><h2 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h2><p><code>motor</code>的构造函数有3个参数(建议都填入),分别是<code>index</code>、<code>gears</code>、<code>reverse</code>。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_motor.h</span>\n<span class=\"token function\">motor</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int32_t</span> index<span class=\"token punctuation\">,</span> gearSetting gears<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> reverse <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><p><code>index</code><br> 表明电机接入的端口。<br> 主机上有两排端口,编号1-22。电机接入第<code>N</code>个端口就写 <code>PORTN</code></p>\n</li>\n<li><p><code>gears</code><br> 表明电机转速比<br> 有三种转速比,<code>ratio6_1</code>、<code>ratio18_1</code>、<code>ratio36_1</code>,     分别对应三种颜色的电机:蓝电机、绿电机、红电机     </p>\n<p> <img src=\"/image/motor_radio.png\">     </p>\n</li>\n<li><p><code>reverse</code><br> 电机默认转向:正转or反转</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.h</span>\n<span class=\"token comment\">// ...</span>\nmotor MotorLF <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT1<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmotor MotorLB <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT2<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmotor MotorRF <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT3<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmotor MotorRB <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT4<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"电机-与-手动控制程序\"><a href=\"#电机-与-手动控制程序\" class=\"headerlink\" title=\"电机 与 手动控制程序\"></a>电机 与 手动控制程序</h2><h3 id=\"电机转动\"><a href=\"#电机转动\" class=\"headerlink\" title=\"电机转动\"></a>电机转动</h3><ul>\n<li><p><code>spin()</code><br> 此函数会让电机以指定速度旋转。     </p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_motor.h</span>\n<span class=\"token comment\">/**\n* @brief 打开电机并按指定方向和指定速度旋转。\n* @param dir 电机旋转的方向。有 forward 和 reverse 两种值。也支持 fwd 和 rev 两种缩写\n* @param velocity 速度大小。值域[-100.0,100.0]。超出则化为 ±100\n* @param units 速度的单位。常用 percent ,也可缩写为 pct\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">spin</span><span class=\"token punctuation\">(</span> directionType dir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> velocity<span class=\"token punctuation\">,</span> velocityUnits units <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p> 以底盘的运动程序为例：</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p><code>stop()</code><br> 使电机停止(停止向电机供电)</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/** \n* @brief 使用默认制动模式停止电机。\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** \n* @brief 使用指定的制动模式停止电机。\n* @param mode 制动模式可以设置为滑行(coast)、制动(brake)或保持(hold)。\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span> brakeType mode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p> 以底盘的停止运行为例:</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>底盘的停止一般使用<code>coast</code>。这是为了防止<code>hold</code>状态下机器人被碰撞导致电机的损坏。<br>自动程序中由于有<code>不允许进入对手场地</code>的规则，因此只要队伍内部有配合，就不用讨论上述的问题</p>\n</li>\n</ul>\n<h3 id=\"监测电机\"><a href=\"#监测电机\" class=\"headerlink\" title=\"监测电机\"></a>监测电机</h3><ul>\n<li><code>double position( rotationUnits units )</code><br>返回电机转过的角度<br>一般填入单位 degrees     </li>\n<li><code>void resetPosition()</code><br>重置 <code>position()</code>的返回值<br>重置需要一小段时间，重置时尽量保持电机的静止</li>\n<li><code>double temperature( temperatureUnits units )</code><br>返回电机此时的温度<br>可填入单位 摄氏度(<code>celsius</code>)     </li>\n<li>…</li>\n</ul>\n<h1 id=\"陀螺仪-与-自动转弯\"><a href=\"#陀螺仪-与-自动转弯\" class=\"headerlink\" title=\"陀螺仪 与 自动转弯\"></a>陀螺仪 与 自动转弯</h1><h2 id=\"声明、命名\"><a href=\"#声明、命名\" class=\"headerlink\" title=\"声明、命名\"></a>声明、命名</h2><p>需要填入的参数仅有端口</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_imu.h</span>\n<span class=\"token function\">inertial</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int32_t</span> index<span class=\"token punctuation\">,</span> turnType dir <span class=\"token operator\">=</span> turnType<span class=\"token double-colon punctuation\">::</span>right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>声明比<code>motor</code>简单</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.cpp</span>\ninertial ine <span class=\"token operator\">=</span> <span class=\"token function\">inertial</span><span class=\"token punctuation\">(</span>PORT11<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>类似于<code>motor</code>中的<code>position()</code>，对陀螺仪初始化是必要的。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//初始化底盘电机</span>\n  MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//初始化陀螺仪</span>\n  ine<span class=\"token punctuation\">.</span><span class=\"token function\">calibrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//初始化计时器</span>\n  Brain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"数据检测\"><a href=\"#数据检测\" class=\"headerlink\" title=\"数据检测\"></a>数据检测</h2><p>仅介绍最常用的<code>heading()</code>,其他函数仅作涉及</p>\n<ul>\n<li><p><code>heading()</code></p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * @brief 获取惯性传感器的水平方向,方向角取值范围 [0,360] ,单位:度\n * @return 返回一个double值，该值表示惯性传感器的方向。\n * @param units 单位,默认为度\n */</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">heading</span><span class=\"token punctuation\">(</span> rotationUnits units <span class=\"token operator\">=</span> rotationUnits<span class=\"token double-colon punctuation\">::</span>deg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>rotation()</code><br> 获取仰角</p>\n</li>\n</ul>\n<h2 id=\"自动程序中的转弯问题\"><a href=\"#自动程序中的转弯问题\" class=\"headerlink\" title=\"自动程序中的转弯问题\"></a>自动程序中的转弯问题</h2><p>自动程序中，是不可以通过操作手柄来给机器人输入数据的。因此，机器人在自动赛时段的运动完全依靠程序的预设。<br><em>如何让机器人旋转到我们需要的方向？</em>     </p>\n<p>最简单的写法是使用计时器。机器人旋转的速度是粗略相等的，因此在程序开发时间较短的情况下，这可以作为最后的保底程序来使用。<br>   <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_auto_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">turn_with_timer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">int</span> turn_speed<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      turn_speed<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n      t<span class=\"token operator\">=</span><span class=\"token operator\">-</span>t<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>                                   <span class=\"token comment\">// 左右转放在同一程序里</span>\n   <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>turn_speed<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>turn_speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>msec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 定义见于vex.h中</span>\n   <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 旋转结束建议锁死，以提高准确度</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>但是这并不是一个合适的方案。我们难以控制每次旋转时的环境因素保持一样(比如地面摩擦系数，电机温度，电池电压等)。有时这种小小的偏差就会导致行进线路的变形，会影响到之后的自动任务，甚至可能<code>DQ(犯规)</code>。<br>在精准转弯的要求下，我们便需要陀螺仪来帮助校准。  </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_auto_file.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"extensions.h\"</span>    <span class=\"token comment\">// include pids.h</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">turn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  pids turning <span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 定义pid算法对象</span>\n  turning<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>deg<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 向pid系统中输入目标和最大允许偏差</span>\n  <span class=\"token keyword\">float</span> movement<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 记录每次pid系统反馈的运动量</span>\n  Ine<span class=\"token punctuation\">.</span><span class=\"token function\">calibrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 初始化陀螺仪</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> turning<span class=\"token punctuation\">.</span><span class=\"token function\">check</span> <span class=\"token punctuation\">(</span>Ine<span class=\"token punctuation\">.</span><span class=\"token function\">heading</span><span class=\"token punctuation\">(</span>degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n                          <span class=\"token comment\">// 当机器人还未稳定在最大允许偏差区间内时一直不断调整</span>\n    movement <span class=\"token operator\">=</span> turning<span class=\"token punctuation\">.</span><span class=\"token function\">moving</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>movement <span class=\"token operator\">*</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span>movement <span class=\"token operator\">*</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token comment\">// 运动</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// pid算法下机器人旋转的末速度很小，不需要hold</span>\n  <span class=\"token function\">wait</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span>sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 等待机器人彻底停止</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>PID算法</code>将在<a href=\"/README.md/#07-pid%E7%B2%BE%E7%A1%AE%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95\">第7章节</a>中详细介绍其优缺点。</p>\n<h2 id=\"画外吐槽\"><a href=\"#画外吐槽\" class=\"headerlink\" title=\"画外吐槽\"></a>画外吐槽</h2><p>我非常讨厌陀螺仪<br>因为它带给我的回忆除了出bug就是掉链子     </p>\n<p><a href=\"https://www.bilibili.com/video/BV1FW4y1V7af\">陀螺仪发癫珍贵录像</a></p>\n<h1 id=\"气泵-1\"><a href=\"#气泵-1\" class=\"headerlink\" title=\"气泵\"></a>气泵</h1><h2 id=\"定义、命名\"><a href=\"#定义、命名\" class=\"headerlink\" title=\"定义、命名\"></a>定义、命名</h2><p>气泵的程序其实是最简单的，只不过定义和电机或者传感器都有点区别</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_triport.h</span>\n<span class=\"token comment\">/**\n* @brief 在参数中指定的三线端口上创建新的digital_out对象。\n* @param port 三线端口。\n*/</span>\n<span class=\"token function\">digital_out</span><span class=\"token punctuation\">(</span> triport<span class=\"token double-colon punctuation\">::</span>port <span class=\"token operator\">&amp;</span>port <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>triport</code>和电机端口的<code>int32_t</code>不同     </p>\n<table>\n<thead>\n<tr>\n<th>port :</th>\n<th>int32_t</th>\n<th>triport</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>个数</td>\n<td>21</td>\n<td>8</td>\n</tr>\n<tr>\n<td>编号</td>\n<td>1-22</td>\n<td>A-H</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>主机上下两侧</td>\n<td>主机左侧</td>\n</tr>\n<tr>\n<td>格式</td>\n<td>PORTn</td>\n<td>Brain.ThreeWirePort.N</td>\n</tr>\n</tbody></table>\n<p>习惯上把气泵命名为 <code>pne</code> (Pneumatic components)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.cpp</span>\ndigital_out <span class=\"token function\">pne</span> <span class=\"token punctuation\">(</span> Brain<span class=\"token punctuation\">.</span>ThreeWirePort<span class=\"token punctuation\">.</span>A <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"实物介绍\"><a href=\"#实物介绍\" class=\"headerlink\" title=\"实物介绍\"></a>实物介绍</h2><p>气泵的程序很简单，但是气泵的部件比电机复杂的多<br><img src=\"/image/05-2-e1.png\"><br>图中的结构中，通过程序所能操作的仅仅是 发送到&#x2F;接受数据于 <code>换向阀驱动器</code> ，从而改变换向阀联通的状态。<br>机器人上是否使用气泵，需要考虑机械师的技术水平。因为程序能在气泵上做的事情太少太简单了。</p>\n<h2 id=\"functions\"><a href=\"#functions\" class=\"headerlink\" title=\"functions\"></a>functions</h2><ul>\n<li><code>set()</code><br>设置气泵的伸缩状态。<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n   * @brief 将digital_out设备设置为布尔值。\n   * @param value 布尔值。(true or false)\n   */</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">bool</span> value <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n当<code>pne.set(true)</code>执行后，换向阀驱动器将会亮起红灯<br>当<code>pne.set(false)</code>执行后，换向阀驱动器红队将会熄灭</li>\n<li>value()<br>读取气泵的状态<br><code>pne.set(true)</code>后，value的返回值就会变为<code>true</code>，反之亦然。</li>\n</ul>\n<h1 id=\"视觉传感器\"><a href=\"#视觉传感器\" class=\"headerlink\" title=\"视觉传感器\"></a>视觉传感器</h1><ol>\n<li>定义、命名</li>\n<li>初始化</li>\n<li>颜色设置 和 识别机制的介绍</li>\n<li>返回值</li>\n</ol>\n<h1 id=\"PID精确控制算法\"><a href=\"#PID精确控制算法\" class=\"headerlink\" title=\"*PID精确控制算法\"></a>*PID精确控制算法</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>PID即：<code>Proportional</code>（比例）、<code>Integral</code>（积分）、<code>Differential</code>（微分）的缩写。顾名思义，PID控制算法是结合比例、积分和微分三种环节于一体的控制算法<br>PID控制的实质就是根据输入的偏差值，按照比例、积分、微分的函数关系进行运算，运算结果用以控制输出<br><img src=\"https://baike.baidu.com/pic/PID%E7%AE%97%E6%B3%95/4660106/0/8435e5dde71190ef66feccacc11b9d16fdfa60bf?fr=lemma&fromModule=lemma_content-image\" alt=\"PID算法图\"></p>\n<h3 id=\"偏差\"><a href=\"#偏差\" class=\"headerlink\" title=\"偏差\"></a>偏差</h3><p><code>偏差</code>即<strong>预定目标</strong>和<strong>当前状态</strong>之间的差值<br>我们设 预定值<code>goal</code>是我们希望系统平衡时传感器的返回值<br>传感器实时返回的数值为<code>input</code><br>那么根据<code>偏差</code>的定义，我们可以得到<code>偏差</code>的计算式:<br>$$ error &#x3D; goal - input $$<br>其中<code>error</code>为我们所求的偏差值</p>\n<h3 id=\"比例算法\"><a href=\"#比例算法\" class=\"headerlink\" title=\"比例算法\"></a>比例算法</h3><blockquote>\n<p>成比例地反映控制系统的偏差信号，偏差一旦产生，立即产生控制作用以减小偏差。</p>\n</blockquote>\n<p>比例算法的核心思想非常简单：离目标越远，就应该调整的越快<br>我们举 <code>量取1L水</code>的例子来说明<br>如果桶里面只有 10ml 水 ，那么你倒水的时候就会哗哗的往里面倒<br>而如果此时 桶快满了 ，你为了不倒多了，你就会选择慢慢的向下加  </p>\n<p>将这样的思想抽象成数学语言:<br>记比例算法的输出值为 <code>P</code><br>那么 <code>error</code> 越大 ， <code>P</code>就应该越大<br>$$ P \\propto error $$<br>即<br>$$ P &#x3D; k_p · error $$<br>其中 $$k_p$$ 是我们引入的系数，称为<code>比例系数</code></p>\n<h3 id=\"积分算法\"><a href=\"#积分算法\" class=\"headerlink\" title=\"积分算法\"></a>积分算法</h3><blockquote>\n<p>积分环节的作用，主要用于消除静差提高系统的无差度。</p>\n</blockquote>\n<h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>积分算法是对比例算法的补充<br>还是<code>量取1L水</code>的例子,但是这次桶破了一个洞:</p>\n<blockquote>\n<p>为了方便说明，不妨假设每秒的漏水为$$10ml$$ , $$k_p&#x3D;0.8$$</p>\n</blockquote>\n<p>你还是用<code>比例算法</code>的思想去倒水<br>然而在你加水加到了$$920ml$$时，你会发现此时水位已经不再上涨<br>这是因为此时你加水的速度是<br>$$ (1000-920)\\times0.8&#x3D;10 \\space (ml) $$<br>和漏水的速度持平</p>\n<p>如果你可以关注到水位一直都在$$920ml$$处这个现象的话,你可以尝试根据累计水位和目标之间的偏差来计算你到底应该额外加入多少的水<br>记积分算法的输出值为<code>I</code>,那么:<br>$$ I \\propto \\int_{0}^{T} error·{\\rm d}t $$<br>即<br>$$ I &#x3D; k_i · \\int_{0}^{T} error·{\\rm d}t $$<br>其中$$k_i$$为我们引入的常量<code>积分系数</code><br>$$T$$为pid算法从开始运行到当前时间的计时</p>\n<h4 id=\"离散化\"><a href=\"#离散化\" class=\"headerlink\" title=\"离散化\"></a>离散化</h4><p>显然,$$\\lim_{dt \\to 0^{+}}$$的情况在现实中是无法实现的,我们只能采取近似的计算方法<br>积分算法的理论计算式离散化后可以用下式计算:<br>$$ I &#x3D; k_i · \\sum_{t&#x3D;0}^{T} error·\\Delta t $$<br>用C++实现:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">I <span class=\"token operator\">=</span> I <span class=\"token operator\">+</span> ki<span class=\"token operator\">*</span>error<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>time_now <span class=\"token operator\">-</span> time_last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntime_last <span class=\"token operator\">=</span> time_now<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"积分限制器\"><a href=\"#积分限制器\" class=\"headerlink\" title=\"积分限制器\"></a>积分限制器</h4><p>引入积分算法后可能出现以下情况:  </p>\n<ol>\n<li>以电机为例，在电机的启停或设定值大幅变化时，系统在较短时间内产生了很大的偏差。此时积分迅速积累，就会造成控制量输出远远大于电机的极限输入控制量，从而会引起很大的超调，甚至会产生震荡。  </li>\n<li>积分饱和：当系统一直存在一个方向的偏差时，积分会不断增大，会造成控制量进入饱和区，一旦出现反向的偏差时，需要很长时间才能推出饱和区，而去响应反向偏差。也以电机为例，电机在积分饱和时，电机响应延时较大，会出现电机超出目标位置，需来回调整数次才能稳定。</li>\n</ol>\n<p>此时就有必要限制积分算法的输出<br>如果$$I$$超出了某一预定的范围$$[-I_{max},I_{max}]$$,可以对I的大小进行限制</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">I_limit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> I<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> I_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>I<span class=\"token operator\">></span>I_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        I <span class=\"token operator\">=</span> I_max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>I<span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span>I_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        I <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>I_max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"微分算法\"><a href=\"#微分算法\" class=\"headerlink\" title=\"微分算法\"></a>微分算法</h3><blockquote>\n<p>微分环节的作用能反映偏差信号的变化趋势（变化速率），并能在偏差信号的值变得太大之前，在系统中引入一个有效的早期修正信号，从而加快系统的动作速度，减小调节时间。</p>\n</blockquote>\n<h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>微分算法同样是对比例算法的补充<br>这次的例子换成<code>在手指上面立筷子</code>吧  </p>\n<p>立筷子还不简单,你轻易的让筷子保持了竖直<br>正当我们放松的时候，一阵阴风袭来，把筷子稍稍吹歪了  </p>\n<ul>\n<li>只用比例算法？<br>筷子才歪这么一点，我都不需要怎么动哎<br>然后很快筷子就倒了</li>\n<li>加上积分算法?<br>本来筷子是保持平衡的，也就是<br>$$output&#x3D;P+I&#x3D;0$$<br>$$\\because P&#x3D;K_p·error&#x3D;0$$<br>$$\\therefore I_{t&#x3D;0}&#x3D;0$$<br>此时积分算法能起到的效果和比例算法没有什么差别了</li>\n</ul>\n<p>看来我们需要新的方法<br>立筷子之所以容易失败，是因为筷子只要有一点偏差，如果不迅速的加以修正，筷子就会快速的倒下<br>如果在$$P$$和$$I$$的基础上，再增加一项$$D$$，使得<br>$$ D \\propto 筷子高度的瞬时变化率 $$<br>问题就可以迎刃而解<br>注意到<code>微分</code>是衡量<code>瞬时变化率</code>的很好的数学工具，于是我们可以写出:<br>$$ D \\propto \\tfrac{d}{dt} error $$<br>即<br>$$ D &#x3D; k_d·\\tfrac{d}{dt} error $$<br>其中$$k_d$$为我们引入的<code>微分系数</code></p>\n<h4 id=\"离散化-1\"><a href=\"#离散化-1\" class=\"headerlink\" title=\"离散化\"></a>离散化</h4><p>同样的，由于$$\\lim_{dt \\to 0^{+}}$$在现实中无法实现，微分算法的计算同样需要离散化<br>$$ D &#x3D; k_d·\\tfrac{ \\Delta error }{ \\Delta t } $$<br>用c++实现:  </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">D <span class=\"token operator\">=</span> kd<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">-</span>error_last<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>time_now<span class=\"token operator\">-</span>time_last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nerror_last <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\ntime_last <span class=\"token operator\">=</span> time_now<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"综合使用\"><a href=\"#综合使用\" class=\"headerlink\" title=\"综合使用\"></a>综合使用</h2><p>使用$$P$$、$$I$$、$$D$$三种算法，足以满足大多数输出的控制了<br>总输出值的理想计算式:<br>$$ output &#x3D; P + I + D $$<br>如果全部带入:<br>$$ output &#x3D; k_p·error + k_i·\\int_{0}^{T}error·dt + k_d·\\tfrac{d}{dt}error $$<br>离散化后可以用C++实现<br>$$ output &#x3D; k_p·error + k_i·\\sum_{t&#x3D;0}^{T}error·\\Delta t + k_d·\\tfrac{ \\Delta error }{ \\Delta t }$$</p>\n<h2 id=\"调试参数\"><a href=\"#调试参数\" class=\"headerlink\" title=\"调试参数\"></a>调试参数</h2><p>实践中，真正折磨人的不是PID算法的理解，而是PID细节的实现和参数的调节<br>对于$$k_p$$ $$k_i$$ $$k_d$$三个参数，获得的办法只有:  </p>\n<ul>\n<li>不断实验</li>\n<li><del>玄学</del> 直觉</li>\n</ul>\n<p><del>祝你好运</del></p>\n<h1 id=\"手动程序\"><a href=\"#手动程序\" class=\"headerlink\" title=\"手动程序\"></a>手动程序</h1><ol>\n<li>与操作手对接</li>\n<li>底盘方案<ul>\n<li>左前进右旋转</li>\n<li>万向底盘</li>\n<li>无头模式</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"自动程序\"><a href=\"#自动程序\" class=\"headerlink\" title=\"自动程序\"></a>自动程序</h1><ol>\n<li>自动赛规则</li>\n<li>前进控制</li>\n<li>转弯控制</li>\n<li>完成自动赛任务</li>\n<li>多备案 + 耐心</li>\n</ol>\n<h1 id=\"规则类怪谈\"><a href=\"#规则类怪谈\" class=\"headerlink\" title=\"规则类怪谈\"></a>规则类怪谈</h1><ol>\n<li>码风要求</li>\n<li>注释规范化</li>\n<li>请参与github的更新</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h1><h2 id=\"语言基础说明\"><a href=\"#语言基础说明\" class=\"headerlink\" title=\"语言基础说明\"></a>语言基础说明</h2><p>VEX程序可以支持 <em>C++</em> 和 <em>python</em> ，但是在这里只涉及 <em><strong>C++</strong></em><br>如果有 <em>python</em> 基础而没有 <em>C++</em> 基础，建议访问<a href=\"https://www.runoob.com/cplusplus/cpp-tutorial.html\">菜鸟教程</a>来学习语法知识<br>如果编程基础近似为0而对编程有兴趣的同学，建议先在<a href=\"https://www.luogu.com.cn/training/list\">洛谷题单</a>完成入门系列之后再来看VEX的教程</p>\n<h2 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h2><p>支持VEX程序的软件有 <a href=\"https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user\">vscode</a> 、<em>VEXcode pro v5</em> 等，本教程只介绍 <em><strong>vscode</strong></em> 的使用<br>点击此处的链接可以下载到 <em>vscode</em> 的安装包<br>打开 <em>vscode</em> 之后，需要下载拓展 <em>chinese</em> , <em>c&#x2F;c++</em> , <em>VEX Robotics</em><br><code>如果有兴趣可以追加拓展 Better C++ Syntax 、 C/C++ Compile Run 、 Dracula Official 、 CodeGeeX 等</code><br>另外，为了防患于未然，下载一个 <em>git</em> 和及时把代码上传到 <em>github</em> 是相当的有必要的<br>（我才不会告诉你我有一次文件损坏了只好从头重写呢）<br>下载 <em>git</em> 只需要跟着 <em>vscode</em> 的窗口一通按就好了，如何使用请看网上的<a href=\"https://www.runoob.com/git/git-tutorial.html\">教程</a><br>可以点击 <em>打开文件夹</em> 来开始你的代码</p>\n<h2 id=\"硬件条件\"><a href=\"#硬件条件\" class=\"headerlink\" title=\"硬件条件\"></a>硬件条件</h2><h3 id=\"主机\"><a href=\"#主机\" class=\"headerlink\" title=\"主机\"></a>主机</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/30bda85ee2d0a3bc594fb858377d6b63.png\" alt=\"主机图\">  </p>\n<h3 id=\"手柄\"><a href=\"#手柄\" class=\"headerlink\" title=\"手柄\"></a>手柄</h3><p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/968d794a5f0ca8bc9c740b824c06866b.jpg\" alt=\"手柄正面图\">  </p>\n<p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/fc5565c734a368637488c795360e6c48.jpg\" alt=\"手柄背面图\">  </p>\n<h3 id=\"场控\"><a href=\"#场控\" class=\"headerlink\" title=\"场控\"></a>场控</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"场控图\">  </p>\n<h3 id=\"钢条\"><a href=\"#钢条\" class=\"headerlink\" title=\"钢条\"></a>钢条</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"钢条图\">  </p>\n<h3 id=\"传感器\"><a href=\"#传感器\" class=\"headerlink\" title=\"传感器\"></a>传感器</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"传感器图\">  </p>\n<h3 id=\"电机\"><a href=\"#电机\" class=\"headerlink\" title=\"电机\"></a>电机</h3><p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/b86c1e9a14d043aec8aacf6a918774dc.jpg\" alt=\"电机图\">  </p>\n<h3 id=\"气泵\"><a href=\"#气泵\" class=\"headerlink\" title=\"气泵\"></a>气泵</h3><p><img src=\"https://picst.sunbangyan.cn/2023/11/13/04aceda6d70c2f7adc2594376fa5c41b.jpg\" alt=\"气泵图\">  </p>\n<h2 id=\"VEX社区\"><a href=\"#VEX社区\" class=\"headerlink\" title=\"VEX社区\"></a>VEX社区</h2><p>VEX在<a href=\"https://www.bilibili.com/\">B站</a>中并不算极小众的，其中更新的比较多的up主是<a href=\"https://space.bilibili.com/1684280853\">TXTaylor297992</a><br>此外，VEX有<a href=\"https://vexforum.cn/\">中文官方论坛</a>，在这里可以下载到官方给出的规则文档和场地拼接的文档</p>\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><h2 id=\"面向对象思维的介绍及引入\"><a href=\"#面向对象思维的介绍及引入\" class=\"headerlink\" title=\"面向对象思维的介绍及引入\"></a>面向对象思维的介绍及引入</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\">wiki介绍</a><br>程序设计思维中，与 <em><strong>面向对象</strong></em> 相对的概念叫做 <em><strong>面向过程</strong></em> 。<br>后者考虑问题是通常把问题拆分成几个小问题，在编写程序中对应的行为一般有编写若干个函数。由于OI中一般只要考虑一个主问题即可，所以面向对象在OI中出现较多<br>前者则是将一个个功能封装进 <em>对象</em> 中，其对应的行为以实现 <em>类(class)</em> 为典型。这种程序设计的思维在 项目化编程 中有极大的优点——重用性、灵活性和扩展性 高<br>在此处，我们将从<a href=\"https://www.runoob.com/cplusplus/cpp-classes-objects.html\">class</a>的声明、定义、使用来入手，切实的感受 <em><strong>面向对象</strong></em> 的代码风格</p>\n<h2 id=\"classの定义\"><a href=\"#classの定义\" class=\"headerlink\" title=\"classの定义\"></a>classの定义</h2><p><a href=\"https://www.runoob.com/cplusplus/cpp-classes-objects.html\"><img src=\"https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11.png\" alt=\"菜鸟教程给出的定义结构\"></a></p>\n<h3 id=\"类-及-类名\"><a href=\"#类-及-类名\" class=\"headerlink\" title=\"类 及 类名\"></a>类 及 类名</h3><p>给类取名的时候，可以参照<a href=\"https://www.runoob.com/cplusplus/cpp-data-structures.html\">struct</a>，命名规则和变量一致<br>类的名字以及成员变量 <em><strong>最好</strong></em> 有实际意义，例：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span><span class=\"token comment\">//人的名字</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">;</span><span class=\"token comment\">//C代表语文，M代表数学，E代表英语</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a><a href=\"https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html\">访问修饰符</a></h3><p><code>本教程不涉及 继承 以及 protected 的使用，因为本教程用不到它们</code></p>\n<ul>\n<li>public<br>  公有成员在程序中类的外部是可访问的<br>  public下的成员变量以及成员函数的使用与<code>struct</code>无异</li>\n<li>private<br>  成员和类的默认访问修饰符是 private<br>  私有成员变量或函数在类的外部是<code>不可访问</code>的，甚至是<code>不可查看</code>的。只有<code>类和友元函数</code>可以访问私有成员。<br>  例:  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> wid <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//相当于换行写了   Box b;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n  在这个例子中，变量width的访问修饰符是private，因此<code>b.width</code>的写法是非法的<br>  正确的做法是，通过<code>b.setwidth(double wid)</code>来设置<code>width</code>的值；<br>  通过<code>b.getWidth()</code>来获得<code>width</code>的值<br>  类似这种 <strong>在私有区域定义数据，在公有区域定义相关的函数，以便在类的外部也可以调用这些函数</strong> 的做法一般叫做 <em><strong>数据封装</strong></em>      这样能避免受到外界的干扰和误用，从而确保了安全<br>  样例中的<code>length</code>就不符合数据封装的原则，不要这样写 <del>否则你有可能会被狠狠批斗的</del></li>\n</ul>\n<h3 id=\"重载函数和重载运算符\"><a href=\"#重载函数和重载运算符\" class=\"headerlink\" title=\"重载函数和重载运算符\"></a><a href=\"https://www.runoob.com/cplusplus/cpp-overloading.html\">重载函数和重载运算符</a></h3><h4 id=\"重载函数\"><a href=\"#重载函数\" class=\"headerlink\" title=\"重载函数\"></a>重载函数</h4><p>C++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。<br>在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的<strong>形式参数</strong>（个数、类型或顺序）必须不同。     我们不能仅通过<strong>返回类型</strong>的不同来重载函数。<br>重载函数可以为我们调用功能较相近的函数时提供便利,例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 哦对了，重载函数在class外也是可以使用的哦</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">float</span> t<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">bool</span> t<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 以下是在类中使用的</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">printer</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> a<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string a<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//错误示范</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//主函数</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    printer p<span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">114514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n1919810\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">' '</span><span class=\"token operator\">&lt;&lt;</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"重载运算符\"><a href=\"#重载运算符\" class=\"headerlink\" title=\"重载运算符\"></a>重载运算符</h4><p>在c++中，运算符实际上也可以看作是一种函数，因此，就出现了<strong>重载运算符</strong>的用法<br>在这里我们介绍 <a href=\"https://www.runoob.com/cplusplus/assignment-operators-overloading.html\">赋值运算符  &#x3D; </a><br>多说无益，直接上样例：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//平面直角坐标系中的一个点</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span> <span class=\"token comment\">//坐标</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  \n            <span class=\"token comment\">//此处const node&amp; n 也可以写作node n</span>\n            <span class=\"token comment\">//使用&amp;是为了提高效率，使用const是为了防止n的值被这里的赋值函数更改</span>\n            x <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 等效于 this->x = n.x;</span>\n            y <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 等效于 this->y = n.y;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">friend</span> istream <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span>node<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 不要求掌握，看看就好</span>\n            in<span class=\"token operator\">>></span>n<span class=\"token punctuation\">.</span>x<span class=\"token operator\">>></span>n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\nnode n<span class=\"token punctuation\">;</span>\n    node m<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// 这段代码没有什么意义，只是为了说明重载运算符后类的运算就可以用符合我们原有习惯的写法来编写程序这一点而已</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>；\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看出，使用重载运算符的写法非常符合我们对变量的编写习惯。<br>这使得我们在使用类时感到非常的舒适 XD<br>需要注意的是，所有的运算符函数都是放在 <em><strong>public</strong></em> 访问修饰符下的     (其中 流运算符 是以友元函数的形式)</p>\n<h3 id=\"构造函数和析构函数，拷贝构造函数\"><a href=\"#构造函数和析构函数，拷贝构造函数\" class=\"headerlink\" title=\"构造函数和析构函数，拷贝构造函数\"></a><a href=\"https://www.runoob.com/cplusplus/cpp-constructor-destructor.html\">构造函数和析构函数</a>，<a href=\"https://www.runoob.com/cplusplus/cpp-copy-constructor.html\">拷贝构造函数</a></h3><p>这三个函数是类中非常特殊的函数。通过它们可以实现 <strong>初始化新对象</strong>、<strong>释放对象占用内存</strong>、<strong>复制对象</strong> 的作用<br>如果不编写这三个函数，编译器都会自动加入这几个函数。但是如果类中涉及到<strong>指针</strong>和<strong>动态内存</strong>时需要格外注意，此时必须人为的编写 <em>析构函数</em> 和 <em>拷贝构造函数</em><br>切记，这三个函数都应放在 <em><strong>public</strong></em> 下</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>类的构造函数会在<strong>每次创建类的新对象时</strong>执行。     构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。     构造函数可用于为某些成员变量设置初始值。</p>\n<h4 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h4><p>类的析构函数会在<strong>每次删除所创建的对象时</strong>执行。     析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀     析构函数有助于在跳出程序（比如关闭文件、释放内存等）前<strong>释放资源</strong>。     默认析构函数不会释放成员指针变量所指向的内存空间，如果要释放的话，还需要人为定义释放。     因此，当类中存在<em>指针变量</em>并且有<em>动态内存</em>分配时，最好有一个析构函数用来释放内存     另外，析构函数<strong>不可以接受形参</strong>，因此不存在析构函数的重载函数</p>\n<h4 id=\"拷贝构造函数\"><a href=\"#拷贝构造函数\" class=\"headerlink\" title=\"拷贝构造函数\"></a>拷贝构造函数</h4><p>类的拷贝构造函数会在创建对象时，使用同一类中之前创建的对象来初始化新创建的对象。<br>函数一般有如下功能：</p>\n<ul>\n<li>通过使用另一个同类型的对象来 <em><strong>初始化</strong></em> 新创建的对象。</li>\n<li>复制对象并把它作为 ___函数参数___。</li>\n<li>复制对象并把它作为 ___函数返回值___。<br>如果在类中没有定义拷贝构造函数，编译器会自行定义一个。     如果类带有<em>指针变量</em>，并有<em>动态内存</em>分配，则它必须有一个拷贝构造函数。</li>\n</ul>\n<p>样例：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>    \n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//构造函数</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//带参数的构造函数</span>\n        <span class=\"token operator\">~</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">//析构函数</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//拷贝构造函数</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nnode<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>                  <span class=\"token comment\">//在类外定义函数时需要在函数名前加上“类名::”</span>\n    n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">//为指针分配内存</span>\n    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nnode<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">node</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">delete</span> n<span class=\"token punctuation\">;</span>                     <span class=\"token comment\">//释放指针内存</span>\n<span class=\"token punctuation\">&#125;</span>\nnode<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">//拷贝值</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">VALUE</span><span class=\"token punctuation\">(</span>node n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//拷贝构造函数的用法 II</span>\nnode <span class=\"token function\">bigger_one</span><span class=\"token punctuation\">(</span>node a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>b<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//三元运算符  ? :  。?前条件成立则返回 : 前的，否则返回 : 后的</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    node n<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//无参数的构造函数可以省略</span>\n    node <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    \n    <span class=\"token comment\">//带参数的构造函数的调用需要在变量后加括号，就像函数一样</span>\n    node <span class=\"token function\">k</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//拷贝构造函数的用法 I</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">bigger_one</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//拷贝构造函数用法   III</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">bigger_one</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//构造函数的另类用法，其中遇到数值4时会调用node(int num)来把4转化为node类型</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"头文件与注释，cpp与定义\"><a href=\"#头文件与注释，cpp与定义\" class=\"headerlink\" title=\"头文件与注释，cpp与定义\"></a><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%B4%E6%96%87%E4%BB%B6\">头文件</a>与注释，cpp与定义</h3><p>还记得前文提到过 class 有着较高 重用性，灵活性，拓展性 吗？<br>如果在每一个程序的头部复制大量的class的定义，那么这种灵活性就荡然无存了<br>因此，就不得不介绍头文件了</p>\n<p>一个头文件一般包含类、子程序、变量和其他标识符的前置声明<br>习惯上，<em>函数、类、枚举类、常量</em>的声明会放在头文件中，即<code>xxx.h</code><br>而对应的<em>函数、类</em>的源码以及<em>注释</em>则会放在对应的源文件中，即<code>xxx.cpp</code><br>值得注意的是，为了防止头文件被反复调用造成重复声明的错误，头文件应在首行加入</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// xxx.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">XXX</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">XXX</span></span>\n<span class=\"token comment\">//你的代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>多说无用，下面摆上样例          </p>\n<p><a href=\"https://blog.csdn.net/weixin_30500289/article/details/96110759\">样例：实现高精度算法</a><br>样例的代码非常的长，但是使用时只需要：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"intx.h\"</span></span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>另外，vscode是支持<a href=\"https://www.cnblogs.com/schips/p/12200388.html\">doxygen注释</a>的     <a href=\"https://doxygen.nl/manual/\">Doxygen官方文档</a><br>在头文件中使用doxygen注释，可以对声明的类，函数进行说明<br>鼠标在引用了对应头文件的文件中只需要悬停在函数&#x2F;变量&#x2F;类&#x2F;命名空间&#x2F;…上就可以快捷的获知该处的注释<br>样例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// node.h</span>\n<span class=\"token comment\">/**\n * @class node\n * @brief 表示一个平面直角坐标系中的一个点\n***/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/**\n         * @brief 表示坐标 \\f$\\left ( x,y \\right )\\f$\n        ***/</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/**\n         * @brief 初始化\n         * @param a 对应x坐标\n         * @param b 对应y坐标\n        ***/</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n           y <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">/**\n         * @brief 计算距离\n         * @param n 第二个坐标点\n         * @return 两点距离的平方\n        ***/</span>\n        <span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>node n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>x <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>x <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>y <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>y <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>鼠标悬停效果图<br>   <img src=\"https://picdl.sunbangyan.cn/2023/11/13/f733c7f3255c153f7c3b739af3aa4fad.png\" alt=\"node的样例\"><br>   <img src=\"https://picss.sunbangyan.cn/2023/11/13/eda1e9a2bb9d2267a57071ee053221ee.png\" alt=\"set()的样例\"><br>   <img src=\"https://picss.sunbangyan.cn/2023/11/13/d723d6d27e66114087a12f7b2d6c430b.png\" alt=\"dist()的样例\">     </p>\n<h3 id=\"后期学习方式\"><a href=\"#后期学习方式\" class=\"headerlink\" title=\"后期学习方式\"></a>后期学习方式</h3><p> 学会了class的阅读、编写后，我们进入后面的学习就有了一定的基础<br>   在vscode中，<em><strong>ctrl+左键</strong></em>可以查看头文件、函数、类的定义区域<br>   进入<code>v5_vcs.h</code>-&gt;<code>v5_cpp.h</code>-&gt;<code>需要查询的文件</code>，就可以看到官方给出的所有函数的定义。<br>   <img src=\"https://picss.sunbangyan.cn/2023/11/13/876f9447986e256e48ac73d7df16cf0a.png\" alt=\"01-6-e1\"><br>    <img src=\"https://picss.sunbangyan.cn/2023/11/13/262d62b1cc74dc22bb1e75e63a734ad7.png\" alt=\"01-6-e2\"><br>    <img src=\"https://picst.sunbangyan.cn/2023/11/13/4ed72494d898de9ac52b3f04d58b1062.png\" alt=\"01-6-e3\"><br>   当然，我会在接下来的章节来挑选重点的函数来讲解。有兴趣有余力的同学可以根据这个方法自行探究。     </p>\n<h1 id=\"主机-brain-与手柄-Controller\"><a href=\"#主机-brain-与手柄-Controller\" class=\"headerlink\" title=\"主机(brain)与手柄(Controller)\"></a>主机(brain)与手柄(Controller)</h1><h2 id=\"主机、手柄、电脑之间的硬件连接\"><a href=\"#主机、手柄、电脑之间的硬件连接\" class=\"headerlink\" title=\"主机、手柄、电脑之间的硬件连接\"></a>主机、手柄、电脑之间的硬件连接</h2><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"连线图\">     </p>\n<h2 id=\"创建新的VEX工程文件、文件标题规范、文件储存位置\"><a href=\"#创建新的VEX工程文件、文件标题规范、文件储存位置\" class=\"headerlink\" title=\"创建新的VEX工程文件、文件标题规范、文件储存位置\"></a>创建新的VEX工程文件、文件标题规范、文件储存位置</h2><p>从VEX插件中 顺次点击 <code>new project -&gt; v5 -&gt; c++ -&gt; competition template -&gt; 命名项目名字 -&gt; create</code>，一个新的VEX工程文件就创建了</p>\n<h2 id=\"Brain-functions\"><a href=\"#Brain-functions\" class=\"headerlink\" title=\"Brain.functions()\"></a>Brain.functions()</h2><p>鉴于LXB水平有限，所以这里只讲一部分重要的函数</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.h</span>\n<span class=\"token keyword\">extern</span> brain Brain<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>构造函数没有参数输入</p>\n<h3 id=\"brain-timer\"><a href=\"#brain-timer\" class=\"headerlink\" title=\"brain.timer\"></a>brain.timer</h3><ul>\n<li>定义  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_brain.cpp</span>\n<span class=\"token comment\">/** \n * @brief 以指定的单位获取计时器的值。\n * @param units 时间单位。有 sec (秒) 和 msec (毫秒)\n * @return 返回一个双精度值，该值表示计时器的值。\n */</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span> timeUnits units <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** \n * @brief 将计时器重置为零。\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用例  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">float</span> xxx<span class=\"token punctuation\">;</span>\nBrain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 虽然在这里没必要但是这是一个好习惯</span>\nxxx <span class=\"token operator\">=</span> Brain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span>sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> Brain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span>msec<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> xxx<span class=\"token operator\">*</span><span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token number\">1145</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//空循环，经过1.145s之后会继续</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"brain-screen\"><a href=\"#brain-screen\" class=\"headerlink\" title=\"brain.screen\"></a>brain.screen</h3><ul>\n<li>定义  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_brain.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printAt</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">drawPixel</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用说明<br>  这里的<code>print()</code>函数的使用和<code>printf()</code>无异<br>  <code>printAt()</code>添加了参数<code>x</code>、<code>y</code>,含义是在主机屏幕输出时开始的坐标<br>  <code>drawPixel</code>是在屏幕的(x,y)处绘制一个像素点</li>\n</ul>\n<h2 id=\"Controller-functions\"><a href=\"#Controller-functions\" class=\"headerlink\" title=\"Controller.functions()\"></a>Controller.functions()</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.h</span>\n<span class=\"token keyword\">extern</span> controller Controller<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>和 <code>brain</code> 的定义一样平淡</p>\n<h3 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h3><p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/968d794a5f0ca8bc9c740b824c06866b.jpg\" alt=\"手柄正面图\"><br>图中按钮可用的共有10个，分别是：<br>    - ButtonLeft<br>    - ButtonRight<br>    - ButtonUp<br>    - ButtonDown<br>    - ButtonA<br>    - ButtonB<br>    - ButtonX<br>    - ButtonY<br>    - ButtonL1<br>    - ButtonL2<br>    - ButtonR1<br>    - ButtonR2</p>\n<p>他们都属于 <code>controller</code>类中的成员类<code>button</code>，有以下成员函数：</p>\n<ul>\n<li>pressing()<br>  检查当下，如果按钮被按下则返回<code>true</code>，否则返回<code>false</code>。</li>\n<li>pressed()<br>  形参需要填入一个<code>void</code>函数的函数名来调用<br>  下次按钮被按下的时候调用函数</li>\n</ul>\n<p>使用例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// ...</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> Controller1<span class=\"token punctuation\">.</span>ButtonA<span class=\"token punctuation\">.</span><span class=\"token function\">pressing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// ...</span>\n   <span class=\"token punctuation\">&#125;</span>\n   Controller1<span class=\"token punctuation\">.</span>ButtonB<span class=\"token punctuation\">.</span><span class=\"token function\">pressed</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"摇杆\"><a href=\"#摇杆\" class=\"headerlink\" title=\"摇杆\"></a>摇杆</h3><p>遥控器上看似只有两个遥感，实际上程序中对应了4个<code>axis</code>对象:</p>\n<ul>\n<li>Axis1</li>\n<li>Axis2</li>\n<li>Axis3</li>\n<li>Axis4</li>\n</ul>\n<p>一个遥杆可以向任意二维方向旋转，每一个二维的位置都可以用二维坐标来表示。也就是说，一个摇杆对应了两个不同方向的<code>axis</code>对象。<br>其中，<code>Axis1</code>和<code>Axis4</code>都是横向的，<code>Axis2</code>和<code>Axis3</code>都是竖向的。<br><code>axis</code>一般只使用成员函数<code>position()</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Dipan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 底盘运动函数</span>\n   <span class=\"token keyword\">float</span> a1 <span class=\"token operator\">=</span> Controller1<span class=\"token punctuation\">.</span>Axis1<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">float</span> a3 <span class=\"token operator\">=</span> Controller1<span class=\"token punctuation\">.</span>Axis3<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a3<span class=\"token operator\">+</span>a1<span class=\"token punctuation\">,</span>a3<span class=\"token operator\">-</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"屏幕\"><a href=\"#屏幕\" class=\"headerlink\" title=\"屏幕\"></a>屏幕</h3><p>有时，我们需要在遥控器上面显示信息来提示操作手。例如，改变了某个电机的转速时，通过提示操作手可以方便操作手进行下一步操作。<br>下面是在屏幕上显示一段文字的实例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_debug_file.cpp</span>\n<span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#123;</span>\n   Controller1<span class=\"token punctuation\">.</span>Screen<span class=\"token punctuation\">.</span><span class=\"token function\">clearLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清空之前的消息</span>\n   Controller1<span class=\"token punctuation\">.</span>Screen<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电机温度:%.2f ℃\"</span><span class=\"token punctuation\">,</span>MotorShot<span class=\"token punctuation\">.</span><span class=\"token function\">temperature</span><span class=\"token punctuation\">(</span>celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出格式同std::printf()</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"电机-motor-与运动\"><a href=\"#电机-motor-与运动\" class=\"headerlink\" title=\"电机(motor)与运动\"></a>电机(motor)与运动</h1><h2 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h2><p><code>motor</code>的构造函数有3个参数(建议都填入),分别是<code>index</code>、<code>gears</code>、<code>reverse</code>。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_motor.h</span>\n<span class=\"token function\">motor</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int32_t</span> index<span class=\"token punctuation\">,</span> gearSetting gears<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> reverse <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><p><code>index</code><br> 表明电机接入的端口。<br> 主机上有两排端口,编号1-22。电机接入第<code>N</code>个端口就写 <code>PORTN</code></p>\n</li>\n<li><p><code>gears</code><br> 表明电机转速比<br> 有三种转速比,<code>ratio6_1</code>、<code>ratio18_1</code>、<code>ratio36_1</code>,     分别对应三种颜色的电机:蓝电机、绿电机、红电机     </p>\n<p> <img src=\"/image/motor_radio.png\">     </p>\n</li>\n<li><p><code>reverse</code><br> 电机默认转向:正转or反转</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.h</span>\n<span class=\"token comment\">// ...</span>\nmotor MotorLF <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT1<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmotor MotorLB <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT2<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmotor MotorRF <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT3<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmotor MotorRB <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT4<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"电机-与-手动控制程序\"><a href=\"#电机-与-手动控制程序\" class=\"headerlink\" title=\"电机 与 手动控制程序\"></a>电机 与 手动控制程序</h2><h3 id=\"电机转动\"><a href=\"#电机转动\" class=\"headerlink\" title=\"电机转动\"></a>电机转动</h3><ul>\n<li><p><code>spin()</code><br> 此函数会让电机以指定速度旋转。     </p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_motor.h</span>\n<span class=\"token comment\">/**\n* @brief 打开电机并按指定方向和指定速度旋转。\n* @param dir 电机旋转的方向。有 forward 和 reverse 两种值。也支持 fwd 和 rev 两种缩写\n* @param velocity 速度大小。值域[-100.0,100.0]。超出则化为 ±100\n* @param units 速度的单位。常用 percent ,也可缩写为 pct\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">spin</span><span class=\"token punctuation\">(</span> directionType dir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> velocity<span class=\"token punctuation\">,</span> velocityUnits units <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p> 以底盘的运动程序为例：</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p><code>stop()</code><br> 使电机停止(停止向电机供电)</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/** \n* @brief 使用默认制动模式停止电机。\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** \n* @brief 使用指定的制动模式停止电机。\n* @param mode 制动模式可以设置为滑行(coast)、制动(brake)或保持(hold)。\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span> brakeType mode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p> 以底盘的停止运行为例:</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>底盘的停止一般使用<code>coast</code>。这是为了防止<code>hold</code>状态下机器人被碰撞导致电机的损坏。<br>自动程序中由于有<code>不允许进入对手场地</code>的规则，因此只要队伍内部有配合，就不用讨论上述的问题</p>\n</li>\n</ul>\n<h3 id=\"监测电机\"><a href=\"#监测电机\" class=\"headerlink\" title=\"监测电机\"></a>监测电机</h3><ul>\n<li><code>double position( rotationUnits units )</code><br>返回电机转过的角度<br>一般填入单位 degrees     </li>\n<li><code>void resetPosition()</code><br>重置 <code>position()</code>的返回值<br>重置需要一小段时间，重置时尽量保持电机的静止</li>\n<li><code>double temperature( temperatureUnits units )</code><br>返回电机此时的温度<br>可填入单位 摄氏度(<code>celsius</code>)     </li>\n<li>…</li>\n</ul>\n<h1 id=\"陀螺仪-与-自动转弯\"><a href=\"#陀螺仪-与-自动转弯\" class=\"headerlink\" title=\"陀螺仪 与 自动转弯\"></a>陀螺仪 与 自动转弯</h1><h2 id=\"声明、命名\"><a href=\"#声明、命名\" class=\"headerlink\" title=\"声明、命名\"></a>声明、命名</h2><p>需要填入的参数仅有端口</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_imu.h</span>\n<span class=\"token function\">inertial</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int32_t</span> index<span class=\"token punctuation\">,</span> turnType dir <span class=\"token operator\">=</span> turnType<span class=\"token double-colon punctuation\">::</span>right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>声明比<code>motor</code>简单</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.cpp</span>\ninertial ine <span class=\"token operator\">=</span> <span class=\"token function\">inertial</span><span class=\"token punctuation\">(</span>PORT11<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>类似于<code>motor</code>中的<code>position()</code>，对陀螺仪初始化是必要的。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//初始化底盘电机</span>\n  MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//初始化陀螺仪</span>\n  ine<span class=\"token punctuation\">.</span><span class=\"token function\">calibrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//初始化计时器</span>\n  Brain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"数据检测\"><a href=\"#数据检测\" class=\"headerlink\" title=\"数据检测\"></a>数据检测</h2><p>仅介绍最常用的<code>heading()</code>,其他函数仅作涉及</p>\n<ul>\n<li><p><code>heading()</code></p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * @brief 获取惯性传感器的水平方向,方向角取值范围 [0,360] ,单位:度\n * @return 返回一个double值，该值表示惯性传感器的方向。\n * @param units 单位,默认为度\n */</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">heading</span><span class=\"token punctuation\">(</span> rotationUnits units <span class=\"token operator\">=</span> rotationUnits<span class=\"token double-colon punctuation\">::</span>deg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>rotation()</code><br> 获取仰角</p>\n</li>\n</ul>\n<h2 id=\"自动程序中的转弯问题\"><a href=\"#自动程序中的转弯问题\" class=\"headerlink\" title=\"自动程序中的转弯问题\"></a>自动程序中的转弯问题</h2><p>自动程序中，是不可以通过操作手柄来给机器人输入数据的。因此，机器人在自动赛时段的运动完全依靠程序的预设。<br><em>如何让机器人旋转到我们需要的方向？</em>     </p>\n<p>最简单的写法是使用计时器。机器人旋转的速度是粗略相等的，因此在程序开发时间较短的情况下，这可以作为最后的保底程序来使用。<br>   <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_auto_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">turn_with_timer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">int</span> turn_speed<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      turn_speed<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n      t<span class=\"token operator\">=</span><span class=\"token operator\">-</span>t<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>                                   <span class=\"token comment\">// 左右转放在同一程序里</span>\n   <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>turn_speed<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>turn_speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>msec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 定义见于vex.h中</span>\n   <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 旋转结束建议锁死，以提高准确度</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>但是这并不是一个合适的方案。我们难以控制每次旋转时的环境因素保持一样(比如地面摩擦系数，电机温度，电池电压等)。有时这种小小的偏差就会导致行进线路的变形，会影响到之后的自动任务，甚至可能<code>DQ(犯规)</code>。<br>在精准转弯的要求下，我们便需要陀螺仪来帮助校准。  </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_auto_file.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"extensions.h\"</span>    <span class=\"token comment\">// include pids.h</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">turn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  pids turning <span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 定义pid算法对象</span>\n  turning<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>deg<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 向pid系统中输入目标和最大允许偏差</span>\n  <span class=\"token keyword\">float</span> movement<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 记录每次pid系统反馈的运动量</span>\n  Ine<span class=\"token punctuation\">.</span><span class=\"token function\">calibrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 初始化陀螺仪</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> turning<span class=\"token punctuation\">.</span><span class=\"token function\">check</span> <span class=\"token punctuation\">(</span>Ine<span class=\"token punctuation\">.</span><span class=\"token function\">heading</span><span class=\"token punctuation\">(</span>degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n                          <span class=\"token comment\">// 当机器人还未稳定在最大允许偏差区间内时一直不断调整</span>\n    movement <span class=\"token operator\">=</span> turning<span class=\"token punctuation\">.</span><span class=\"token function\">moving</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>movement <span class=\"token operator\">*</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span>movement <span class=\"token operator\">*</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token comment\">// 运动</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// pid算法下机器人旋转的末速度很小，不需要hold</span>\n  <span class=\"token function\">wait</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span>sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 等待机器人彻底停止</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>PID算法</code>将在<a href=\"/README.md/#07-pid%E7%B2%BE%E7%A1%AE%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95\">第7章节</a>中详细介绍其优缺点。</p>\n<h2 id=\"画外吐槽\"><a href=\"#画外吐槽\" class=\"headerlink\" title=\"画外吐槽\"></a>画外吐槽</h2><p>我非常讨厌陀螺仪<br>因为它带给我的回忆除了出bug就是掉链子     </p>\n<p><a href=\"https://www.bilibili.com/video/BV1FW4y1V7af\">陀螺仪发癫珍贵录像</a></p>\n<h1 id=\"气泵-1\"><a href=\"#气泵-1\" class=\"headerlink\" title=\"气泵\"></a>气泵</h1><h2 id=\"定义、命名\"><a href=\"#定义、命名\" class=\"headerlink\" title=\"定义、命名\"></a>定义、命名</h2><p>气泵的程序其实是最简单的，只不过定义和电机或者传感器都有点区别</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_triport.h</span>\n<span class=\"token comment\">/**\n* @brief 在参数中指定的三线端口上创建新的digital_out对象。\n* @param port 三线端口。\n*/</span>\n<span class=\"token function\">digital_out</span><span class=\"token punctuation\">(</span> triport<span class=\"token double-colon punctuation\">::</span>port <span class=\"token operator\">&amp;</span>port <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>triport</code>和电机端口的<code>int32_t</code>不同     </p>\n<table>\n<thead>\n<tr>\n<th>port :</th>\n<th>int32_t</th>\n<th>triport</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>个数</td>\n<td>21</td>\n<td>8</td>\n</tr>\n<tr>\n<td>编号</td>\n<td>1-22</td>\n<td>A-H</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>主机上下两侧</td>\n<td>主机左侧</td>\n</tr>\n<tr>\n<td>格式</td>\n<td>PORTn</td>\n<td>Brain.ThreeWirePort.N</td>\n</tr>\n</tbody></table>\n<p>习惯上把气泵命名为 <code>pne</code> (Pneumatic components)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.cpp</span>\ndigital_out <span class=\"token function\">pne</span> <span class=\"token punctuation\">(</span> Brain<span class=\"token punctuation\">.</span>ThreeWirePort<span class=\"token punctuation\">.</span>A <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"实物介绍\"><a href=\"#实物介绍\" class=\"headerlink\" title=\"实物介绍\"></a>实物介绍</h2><p>气泵的程序很简单，但是气泵的部件比电机复杂的多<br><img src=\"/image/05-2-e1.png\"><br>图中的结构中，通过程序所能操作的仅仅是 发送到&#x2F;接受数据于 <code>换向阀驱动器</code> ，从而改变换向阀联通的状态。<br>机器人上是否使用气泵，需要考虑机械师的技术水平。因为程序能在气泵上做的事情太少太简单了。</p>\n<h2 id=\"functions\"><a href=\"#functions\" class=\"headerlink\" title=\"functions\"></a>functions</h2><ul>\n<li><code>set()</code><br>设置气泵的伸缩状态。<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n   * @brief 将digital_out设备设置为布尔值。\n   * @param value 布尔值。(true or false)\n   */</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">bool</span> value <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n当<code>pne.set(true)</code>执行后，换向阀驱动器将会亮起红灯<br>当<code>pne.set(false)</code>执行后，换向阀驱动器红队将会熄灭</li>\n<li>value()<br>读取气泵的状态<br><code>pne.set(true)</code>后，value的返回值就会变为<code>true</code>，反之亦然。</li>\n</ul>\n<h1 id=\"视觉传感器\"><a href=\"#视觉传感器\" class=\"headerlink\" title=\"视觉传感器\"></a>视觉传感器</h1><ol>\n<li>定义、命名</li>\n<li>初始化</li>\n<li>颜色设置 和 识别机制的介绍</li>\n<li>返回值</li>\n</ol>\n<h1 id=\"PID精确控制算法\"><a href=\"#PID精确控制算法\" class=\"headerlink\" title=\"*PID精确控制算法\"></a>*PID精确控制算法</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>PID即：<code>Proportional</code>（比例）、<code>Integral</code>（积分）、<code>Differential</code>（微分）的缩写。顾名思义，PID控制算法是结合比例、积分和微分三种环节于一体的控制算法<br>PID控制的实质就是根据输入的偏差值，按照比例、积分、微分的函数关系进行运算，运算结果用以控制输出<br><img src=\"https://baike.baidu.com/pic/PID%E7%AE%97%E6%B3%95/4660106/0/8435e5dde71190ef66feccacc11b9d16fdfa60bf?fr=lemma&fromModule=lemma_content-image\" alt=\"PID算法图\"></p>\n<h3 id=\"偏差\"><a href=\"#偏差\" class=\"headerlink\" title=\"偏差\"></a>偏差</h3><p><code>偏差</code>即<strong>预定目标</strong>和<strong>当前状态</strong>之间的差值<br>我们设 预定值<code>goal</code>是我们希望系统平衡时传感器的返回值<br>传感器实时返回的数值为<code>input</code><br>那么根据<code>偏差</code>的定义，我们可以得到<code>偏差</code>的计算式:<br>$$ error &#x3D; goal - input $$<br>其中<code>error</code>为我们所求的偏差值</p>\n<h3 id=\"比例算法\"><a href=\"#比例算法\" class=\"headerlink\" title=\"比例算法\"></a>比例算法</h3><blockquote>\n<p>成比例地反映控制系统的偏差信号，偏差一旦产生，立即产生控制作用以减小偏差。</p>\n</blockquote>\n<p>比例算法的核心思想非常简单：离目标越远，就应该调整的越快<br>我们举 <code>量取1L水</code>的例子来说明<br>如果桶里面只有 10ml 水 ，那么你倒水的时候就会哗哗的往里面倒<br>而如果此时 桶快满了 ，你为了不倒多了，你就会选择慢慢的向下加  </p>\n<p>将这样的思想抽象成数学语言:<br>记比例算法的输出值为 <code>P</code><br>那么 <code>error</code> 越大 ， <code>P</code>就应该越大<br>$$ P \\propto error $$<br>即<br>$$ P &#x3D; k_p · error $$<br>其中 $$k_p$$ 是我们引入的系数，称为<code>比例系数</code></p>\n<h3 id=\"积分算法\"><a href=\"#积分算法\" class=\"headerlink\" title=\"积分算法\"></a>积分算法</h3><blockquote>\n<p>积分环节的作用，主要用于消除静差提高系统的无差度。</p>\n</blockquote>\n<h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>积分算法是对比例算法的补充<br>还是<code>量取1L水</code>的例子,但是这次桶破了一个洞:</p>\n<blockquote>\n<p>为了方便说明，不妨假设每秒的漏水为$$10ml$$ , $$k_p&#x3D;0.8$$</p>\n</blockquote>\n<p>你还是用<code>比例算法</code>的思想去倒水<br>然而在你加水加到了$$920ml$$时，你会发现此时水位已经不再上涨<br>这是因为此时你加水的速度是<br>$$ (1000-920)\\times0.8&#x3D;10 \\space (ml) $$<br>和漏水的速度持平</p>\n<p>如果你可以关注到水位一直都在$$920ml$$处这个现象的话,你可以尝试根据累计水位和目标之间的偏差来计算你到底应该额外加入多少的水<br>记积分算法的输出值为<code>I</code>,那么:<br>$$ I \\propto \\int_{0}^{T} error·{\\rm d}t $$<br>即<br>$$ I &#x3D; k_i · \\int_{0}^{T} error·{\\rm d}t $$<br>其中$$k_i$$为我们引入的常量<code>积分系数</code><br>$$T$$为pid算法从开始运行到当前时间的计时</p>\n<h4 id=\"离散化\"><a href=\"#离散化\" class=\"headerlink\" title=\"离散化\"></a>离散化</h4><p>显然,$$\\lim_{dt \\to 0^{+}}$$的情况在现实中是无法实现的,我们只能采取近似的计算方法<br>积分算法的理论计算式离散化后可以用下式计算:<br>$$ I &#x3D; k_i · \\sum_{t&#x3D;0}^{T} error·\\Delta t $$<br>用C++实现:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">I <span class=\"token operator\">=</span> I <span class=\"token operator\">+</span> ki<span class=\"token operator\">*</span>error<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>time_now <span class=\"token operator\">-</span> time_last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntime_last <span class=\"token operator\">=</span> time_now<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"积分限制器\"><a href=\"#积分限制器\" class=\"headerlink\" title=\"积分限制器\"></a>积分限制器</h4><p>引入积分算法后可能出现以下情况:  </p>\n<ol>\n<li>以电机为例，在电机的启停或设定值大幅变化时，系统在较短时间内产生了很大的偏差。此时积分迅速积累，就会造成控制量输出远远大于电机的极限输入控制量，从而会引起很大的超调，甚至会产生震荡。  </li>\n<li>积分饱和：当系统一直存在一个方向的偏差时，积分会不断增大，会造成控制量进入饱和区，一旦出现反向的偏差时，需要很长时间才能推出饱和区，而去响应反向偏差。也以电机为例，电机在积分饱和时，电机响应延时较大，会出现电机超出目标位置，需来回调整数次才能稳定。</li>\n</ol>\n<p>此时就有必要限制积分算法的输出<br>如果$$I$$超出了某一预定的范围$$[-I_{max},I_{max}]$$,可以对I的大小进行限制</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">I_limit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> I<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> I_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>I<span class=\"token operator\">></span>I_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        I <span class=\"token operator\">=</span> I_max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>I<span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span>I_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        I <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>I_max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"微分算法\"><a href=\"#微分算法\" class=\"headerlink\" title=\"微分算法\"></a>微分算法</h3><blockquote>\n<p>微分环节的作用能反映偏差信号的变化趋势（变化速率），并能在偏差信号的值变得太大之前，在系统中引入一个有效的早期修正信号，从而加快系统的动作速度，减小调节时间。</p>\n</blockquote>\n<h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>微分算法同样是对比例算法的补充<br>这次的例子换成<code>在手指上面立筷子</code>吧  </p>\n<p>立筷子还不简单,你轻易的让筷子保持了竖直<br>正当我们放松的时候，一阵阴风袭来，把筷子稍稍吹歪了  </p>\n<ul>\n<li>只用比例算法？<br>筷子才歪这么一点，我都不需要怎么动哎<br>然后很快筷子就倒了</li>\n<li>加上积分算法?<br>本来筷子是保持平衡的，也就是<br>$$output&#x3D;P+I&#x3D;0$$<br>$$\\because P&#x3D;K_p·error&#x3D;0$$<br>$$\\therefore I_{t&#x3D;0}&#x3D;0$$<br>此时积分算法能起到的效果和比例算法没有什么差别了</li>\n</ul>\n<p>看来我们需要新的方法<br>立筷子之所以容易失败，是因为筷子只要有一点偏差，如果不迅速的加以修正，筷子就会快速的倒下<br>如果在$$P$$和$$I$$的基础上，再增加一项$$D$$，使得<br>$$ D \\propto 筷子高度的瞬时变化率 $$<br>问题就可以迎刃而解<br>注意到<code>微分</code>是衡量<code>瞬时变化率</code>的很好的数学工具，于是我们可以写出:<br>$$ D \\propto \\tfrac{d}{dt} error $$<br>即<br>$$ D &#x3D; k_d·\\tfrac{d}{dt} error $$<br>其中$$k_d$$为我们引入的<code>微分系数</code></p>\n<h4 id=\"离散化-1\"><a href=\"#离散化-1\" class=\"headerlink\" title=\"离散化\"></a>离散化</h4><p>同样的，由于$$\\lim_{dt \\to 0^{+}}$$在现实中无法实现，微分算法的计算同样需要离散化<br>$$ D &#x3D; k_d·\\tfrac{ \\Delta error }{ \\Delta t } $$<br>用c++实现:  </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">D <span class=\"token operator\">=</span> kd<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">-</span>error_last<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>time_now<span class=\"token operator\">-</span>time_last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nerror_last <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\ntime_last <span class=\"token operator\">=</span> time_now<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"综合使用\"><a href=\"#综合使用\" class=\"headerlink\" title=\"综合使用\"></a>综合使用</h2><p>使用$$P$$、$$I$$、$$D$$三种算法，足以满足大多数输出的控制了<br>总输出值的理想计算式:<br>$$ output &#x3D; P + I + D $$<br>如果全部带入:<br>$$ output &#x3D; k_p·error + k_i·\\int_{0}^{T}error·dt + k_d·\\tfrac{d}{dt}error $$<br>离散化后可以用C++实现<br>$$ output &#x3D; k_p·error + k_i·\\sum_{t&#x3D;0}^{T}error·\\Delta t + k_d·\\tfrac{ \\Delta error }{ \\Delta t }$$</p>\n<h2 id=\"调试参数\"><a href=\"#调试参数\" class=\"headerlink\" title=\"调试参数\"></a>调试参数</h2><p>实践中，真正折磨人的不是PID算法的理解，而是PID细节的实现和参数的调节<br>对于$$k_p$$ $$k_i$$ $$k_d$$三个参数，获得的办法只有:  </p>\n<ul>\n<li>不断实验</li>\n<li><del>玄学</del> 直觉</li>\n</ul>\n<p><del>祝你好运</del></p>\n<h1 id=\"手动程序\"><a href=\"#手动程序\" class=\"headerlink\" title=\"手动程序\"></a>手动程序</h1><ol>\n<li>与操作手对接</li>\n<li>底盘方案<ul>\n<li>左前进右旋转</li>\n<li>万向底盘</li>\n<li>无头模式</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"自动程序\"><a href=\"#自动程序\" class=\"headerlink\" title=\"自动程序\"></a>自动程序</h1><ol>\n<li>自动赛规则</li>\n<li>前进控制</li>\n<li>转弯控制</li>\n<li>完成自动赛任务</li>\n<li>多备案 + 耐心</li>\n</ol>\n<h1 id=\"规则类怪谈\"><a href=\"#规则类怪谈\" class=\"headerlink\" title=\"规则类怪谈\"></a>规则类怪谈</h1><ol>\n<li>码风要求</li>\n<li>注释规范化</li>\n<li>请参与github的更新</li>\n</ol>\n"},{"title":"Hello World","use":"katex","_content":"本博客使用[Hexo](https://hexo.io/)搭建  \n向Hexo反馈问题[troubleshooting](https://hexo.io/docs/troubleshooting.html)或者提问[GitHub](https://github.com/hexojs/hexo/issues).\n模板使用[cosy](https://mozzie.cn/posts/59577/)\n\n天气服务:[和风天气](https://dev.qweather.com/docs/start/)\n\n---\n把本地的博客文件推送到远程端:\n```bash\ngit push \"https://gitlab.com/chose_b_log/b_log.git\"\n```\n\n---\n## 吐槽板\n##### 2024-2-2\ncosy所支持的$$katex$$有一个奇怪的问题:  \n众所周知,在$$katex$$中,行间公式应该用`$$...$$`打出，而行内公式应该用`$...$`打出  \n然而在这里如果你试图用`$...$`表示行间公式就会这样:  \n> LOOK: $e^{i \\pi}=-1$\n\n好吧，如果换成`$$...$$`，也就是和行间公式一样  \n问题就解决了 :(  \n> LOOK: $$e^{i \\pi}=-1$$\n\n很怪吧？  \n我也没办法，将就着用好了 :(((((((((  \n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: \n  - README\nuse: katex\n---\n本博客使用[Hexo](https://hexo.io/)搭建  \n向Hexo反馈问题[troubleshooting](https://hexo.io/docs/troubleshooting.html)或者提问[GitHub](https://github.com/hexojs/hexo/issues).\n模板使用[cosy](https://mozzie.cn/posts/59577/)\n\n天气服务:[和风天气](https://dev.qweather.com/docs/start/)\n\n---\n把本地的博客文件推送到远程端:\n```bash\ngit push \"https://gitlab.com/chose_b_log/b_log.git\"\n```\n\n---\n## 吐槽板\n##### 2024-2-2\ncosy所支持的$$katex$$有一个奇怪的问题:  \n众所周知,在$$katex$$中,行间公式应该用`$$...$$`打出，而行内公式应该用`$...$`打出  \n然而在这里如果你试图用`$...$`表示行间公式就会这样:  \n> LOOK: $e^{i \\pi}=-1$\n\n好吧，如果换成`$$...$$`，也就是和行间公式一样  \n问题就解决了 :(  \n> LOOK: $$e^{i \\pi}=-1$$\n\n很怪吧？  \n我也没办法，将就着用好了 :(((((((((  \n\n","slug":"hello-world","published":1,"date":"2024-02-02T04:12:11.346Z","updated":"2024-02-02T12:41:58.080Z","_id":"cls44ji2j00036owkc8aq5fx0","comments":1,"layout":"post","photos":[],"content":"<p>本博客使用<a href=\"https://hexo.io/\">Hexo</a>搭建<br>向Hexo反馈问题<a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a>或者提问<a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>模板使用<a href=\"https://mozzie.cn/posts/59577/\">cosy</a></p>\n<p>天气服务:<a href=\"https://dev.qweather.com/docs/start/\">和风天气</a></p>\n<hr>\n<p>把本地的博客文件推送到远程端:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push <span class=\"token string\">\"https://gitlab.com/chose_b_log/b_log.git\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"吐槽板\"><a href=\"#吐槽板\" class=\"headerlink\" title=\"吐槽板\"></a>吐槽板</h2><h5 id=\"2024-2-2\"><a href=\"#2024-2-2\" class=\"headerlink\" title=\"2024-2-2\"></a>2024-2-2</h5><p>cosy所支持的$$katex$$有一个奇怪的问题:<br>众所周知,在$$katex$$中,行间公式应该用<code>$$...$$</code>打出，而行内公式应该用<code>$...$</code>打出<br>然而在这里如果你试图用<code>$...$</code>表示行间公式就会这样:  </p>\n<blockquote>\n<p>LOOK: $e^{i \\pi}&#x3D;-1$</p>\n</blockquote>\n<p>好吧，如果换成<code>$$...$$</code>，也就是和行间公式一样<br>问题就解决了 :(  </p>\n<blockquote>\n<p>LOOK: $$e^{i \\pi}&#x3D;-1$$</p>\n</blockquote>\n<p>很怪吧？<br>我也没办法，将就着用好了 :(((((((((  </p>\n","excerpt":"","more":"<p>本博客使用<a href=\"https://hexo.io/\">Hexo</a>搭建<br>向Hexo反馈问题<a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a>或者提问<a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>模板使用<a href=\"https://mozzie.cn/posts/59577/\">cosy</a></p>\n<p>天气服务:<a href=\"https://dev.qweather.com/docs/start/\">和风天气</a></p>\n<hr>\n<p>把本地的博客文件推送到远程端:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push <span class=\"token string\">\"https://gitlab.com/chose_b_log/b_log.git\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"吐槽板\"><a href=\"#吐槽板\" class=\"headerlink\" title=\"吐槽板\"></a>吐槽板</h2><h5 id=\"2024-2-2\"><a href=\"#2024-2-2\" class=\"headerlink\" title=\"2024-2-2\"></a>2024-2-2</h5><p>cosy所支持的$$katex$$有一个奇怪的问题:<br>众所周知,在$$katex$$中,行间公式应该用<code>$$...$$</code>打出，而行内公式应该用<code>$...$</code>打出<br>然而在这里如果你试图用<code>$...$</code>表示行间公式就会这样:  </p>\n<blockquote>\n<p>LOOK: $e^{i \\pi}&#x3D;-1$</p>\n</blockquote>\n<p>好吧，如果换成<code>$$...$$</code>，也就是和行间公式一样<br>问题就解决了 :(  </p>\n<blockquote>\n<p>LOOK: $$e^{i \\pi}&#x3D;-1$$</p>\n</blockquote>\n<p>很怪吧？<br>我也没办法，将就着用好了 :(((((((((  </p>\n"},{"title":"路桥第一马戏团出道录","date":"2023-12-23T08:25:01.000Z","_content":"\n## 请选择你的英雄\n\n* Dragon : 我只是想要监控教室而已\n\n* 原神哥 : 平时我只是在办公室van原神，被叫到时才来修电脑\n\n* 众同学 :\n\n  - Chose_B : 成功的从台下看客变成台上一员力\n  - Len_zh : %%%%%%%%%%%%%%%\n  - codeboy : （强者的沉默）\n  - ERA_yes : 一般路过，...，~~然后顺便修好了电脑~~\n  - 梅林 : 最强火力\n  - 田所先生 : 痛失转接头\n  - zc : （喝茶）\n  - figure : 你干嘛~哈哈哎呦~~\n  - 斑马 ： 我是最内哥的电教员(((\n  - 〇_Δ : (远远观望)\n\n* 驯龙高手 : 有没有此人？如有！\n\n* > 旁白 : 一场大戏，正要上演\n\n---\n\n取材自 2023.12.11 - 2023.12.18 的真实事件\n\n---\n\n## Scene 1\n\n### Day 1 早晨\n\nDragon : “最近我们班的希沃出了点问题啊。根据原神哥的判断，肯定是有人故意破坏了希沃的系统。”  \n(众同学窃窃私语，交流情况，但一无所获)  \nDragon : “我觉得，做这种事情的同学，基本上可以锁定在我们班选技术的同学。”   \n（一片哄闹）  \nDragon : “希望做这种事情的同学，可以自觉的承认啊。我周六要是翻监控查出来是你做的，我肯定要严肃处理你的。从处分起步，最高要你退学”  \n（静）  \n\n### Day 1 中午\n\n-------斑马---Dragon-------  \nDragon  _使用了_    __副有罪，当相坐__  \n斑马    _使用了_    __啊？__  ， 免疫了精神攻击，残血，退回教室  \n\n-------Chose_B---Dragon-------  \nDragon _使用了_ __质问__  \nChose_B _使用了_ __问心无愧__ ， 免疫伤害   \nDragon _使用了_ __强制推测__   \nChose_B 因 __迷惑__ 而 无牌可出，受到精神攻击，半血，退回教室  \n\n-------Len_zh---Dragon-------  \nDragon _使用了_ __质问__   \nLen_zh _使用了_ __原神，启动！__   \nDragon 受到了 __迷惑__ ，把Len_zh赶回了教室  \n\n-------〇_Δ---Dragon-------\nDragon _使用了_ __质问__  \n〇_Δ _使用了_ __问心无愧__ ， 免疫伤害  \nDragon _使用了_ __强制推测__   \n〇_Δ _使用了_ __假设不成立__   \nDragon 受到 __迷惑__ ，把〇_Δ赶回了教室  \n\n-------ZC---Dragon-------  \n(电话连接中)  \nDragon _使用了_ __质问__  \nZC _使用了_ __问心无愧__ ， 免疫伤害  \nDragon _使用了_ __刨根问底__  \nZC _使用了_  __不解__ ，连接断开！ \n\n> Dragon 调查无果，怒气值++\n\n## Scene 2\n\n### Day2 傍晚\n\n---17:00---  \n原神哥窜入教室，企图“修复”一体机  \n然而，在他解开了冰点还原，删掉了原有的系统之后  \n发现他根本不会用留下的 `linux` 的 `cmd`  \n拍照之后，原神哥落荒而逃~~~  \n\n> 修不来电脑可以不修\n\n---17:30---  \n(Chose_B、Len_zh、codeboy 等人进入教室)  \n众人(看着全屏的控制台) : “啊？？？”  \n\n> 此时的一体机： 开机即报错，按照提示enter后将进入选择界面  \n> 有操作空间的只是`cmd`选项，进入之后有`linux`的`cmd`可供使用  \n\n(10 mins later)  \n原来，一体机的系统和不同的电脑是有较大差别的：  \n\n* `seewo`的顶层系统是安卓，其电脑的功能仅仅通过接插在整机右侧的PC模块实现    \n  这也解释了为什么可选的cmd是`linux`的而不是`windows`的  \n* 尽管PC的功能暂时无法恢复，但是可以切换至安卓的界面，~~甚至可以勉强上网~~  \n* ~~你甚至可以在PC的报错屏幕上面点开画笔，在黑色的背景上面涂鸦~~  \n\n正当大伙研究有无修复可能的时候，Dragon进入教室  \n“还玩一体机，一体机都被你们玩坏了还玩？”  \n“我们只是看一下我们能不能修”  \n“技术人员已经和我说过了，这个电脑连系统都坏了，大概要2天才可以修好”  \n“2天！？”   \n“对啊。然后到现在都没有人承认自己弄了电脑。再这样下去，我要是查到了是谁干的事情，我不管是谁，我肯定要给他一个不可撤销的处分的”  \n“都不是我们干的怎么会有人承认？承认就有鬼了”  \n“承认就有鬼了？真的是......”  \n\n> Dragon 唯一说对了的事情就是修好电脑确实用了2天。尽管不是原神哥自己收拾的烂摊子\n\n## Scene 3\n\n#### Day 3-4\n\n> 一体机被原神哥破坏了，同学们不得不下楼上课。  \n> 这2天，STIer们也没有放弃抢救`seewo`的希望\n\n### Day 3 下午\n\nLen_zh向田所先生借来了键盘，尝试使用cmd。  \n\n* 可以通过指令访问到的硬盘空间是D盘 ，以发现的盘符文件`homo.ico`为证\n\n没有根本性的进展\n\n### Day 4 上午\n\nChose_B 想到既然PC的功能是由一个可以拆卸的PC模块实现的，那为什么不把楼下的PC模块换来呢？  \n然而，两个模块的型号不同，彼此无法适配  \ncodeboy 于是又开始尝试使用cmd\n\n* 你甚至可以运行 `python 3` \n\n没有什么根本性的进展\n\n### Day 4 中午\n\n田所先生的键盘的转接头还连在seewo断头台上  \n于是田所痛失一个转接头\n\n> STIer们的尝试不会白费\n\n---\n\n## Scene 4\n\n### Day 4 下午\n\nChose_B在寻找ERA_yes的路上碰到了ERA_yes,于是拉着ERA_yes来到了教室  \nERA_yes插上了他的硬盘，尝试着进入`bios`  \n快速的点击`F7`,`bios`界面成功出现，而这也宣告了STIer们的成功  \n\n> 现在原神哥真正的成为了一个Joker\n\n-----17:40-----\nERA_yes安装了`windows 10`之后，赶回了教室\n留下来的STIer继续着修复一体机的伟业\n\n* (梅林 or Len_zh) 设置了系统用户`Joker_Master_Wu`  \n* 梅林 安装了 核显驱动。 现在新系统的界面布局变得合理了\n* Chose_B 用了一整节晚自修的时间，安装了以下软件:\n  - 钉钉\n  - GPT-4W\n  - Deep Freeze\n  - 7z\n  - WPS\n  - 爱奇艺\n  - 微信\n  - QQ\n  - Watt toolkit\n  - Steam 以及 Wall paper engine\n  - DDraceNetwork\n  - Visual Studio Code 以及 相关的插件\n  - python 3\n  - edge 插件 (ADguard、AIX)\n  - Photoshop 2023\n  - clash\n  - 百度网盘\n  - 对拖堂特种 （一个定时关机器）\n  - 希沃白板\n  - 希沃视频展台\n  - winrar\n  - 网易云音乐\n  - QQmusic\n  - Random Sort II\n  - 配置系统环境变量: MingW64\n  - Geogebra\n  - 无人作难而希沃崩，不如STI，为一班笑，何也.txt  \n    内容: 仁义不施而攻守之势异也！别来修电脑了，原神放着我们来玩!\n* codeboy 安装了 \n  - Office ( powerpoint & word & excel )\n  - CP editor\n  - etc.\n* figure 安装了 upupoo\n* Len_zh为.txt创建了桌面快捷方式并改成了希沃管家的图标\n* etc.\n\n> Chose_B 并不知道，他留下的clash和嘲讽原神哥的文件，将为日后埋下祸患\n\n## Scene 5\n\n### Day 5 中午\n\n同学们目击了原神哥准备齐全(带来各种工具，比如螺丝刀，还带了一个人帮忙)  \n然而原神哥发现电脑已经修好，准备全部都没有必要了。来帮忙的人就选择了离开  \n然后原神哥发现 : \n\n* 希沃管家打开是嘲讽他的文件\n\n  > 没有Len_zh，他也看不到文件\n\n  > 然而原神哥却更加坚定了电脑是被同学破坏导致的信念。  \n  > 甚至觉得这个重新下载的 windows 10 同样有问题\n\n* 无法下载真正的希沃管家\n\n  > 因为 Chose_B 开启了 Deep Freeze , 没有解开这个冰点还原他怎么可能可以下载软\n  > 件\n\n  >原神哥却还是觉得是 windows 10 的问题\n\n* 怎么还有 `clash`\n\n  > Chose_B 根本就没想到 clash 会有啥问题，因此大胆放心的把快捷方式放在了桌面\n\n原神哥 再次 _拍照留念_ 后 ，逃离现场\n\n### Day 8 中午\n\n大伙饭后回到教室，发现 :  \n\n* 电脑系统又没了\n* 熟悉的报错 ： ~~欢迎回来~~  \n\n> Joker 急了就破坏电脑是吧  \n> ~~什么虾头东西~~\n\n痛苦的大伙还是觉得要收拾一下`Joker`留下的烂摊子  \n还好codeboy的u盘里面还有 windows 11  \n\n就在codeboy开始修复电脑的时候，Chose_B被Dragon叫了出去 ......\n\n---\n\n## Scene 6\n\n### Day 8 中午\n\n----------Chose_B-----Dragon----------  \nDragon _使用了_ __调查__ , 要求Chose_B寻找ERA_yes  \nChose_B _使用了_ __辩护__ , 解释ERA_yes无罪,效果甚微  \nDragon 拿出 _图片:嘲讽txt_ , 质询Chose_B何人所为  \nChose_B _使用了_ __装傻__ , 暂时有效  \nDragon _使用了_ __索敌__ , Chose_B只有找到ERA_yes才可继续对话  \nChose_B 无法回避 , 前往寻找ERA_yes  \n\n(15 minutes later)  \n-------Chose_B & ERA_yes ----- Dragon -------  \nDragon 对 ERA_yes _使用了_ __询问__ , 要求ERA_yes解释周四下午之事  \nERA_yes _使用了_ __问心无愧__  \nDragon 拿出 _图片:嘲讽txt_ , 质询ERA_yes何人所为  \nERA_yes _使用了_ __无懈可击__ , 否认了为自己所为  \nDragon 拿出 _图片:嘲讽txt_ , 质询Chose_B何人所为  \nChose_B _获得效果_ __汗流浃背__  \nDragon _获得效果_ __我猜对了__ , 造成$25$点精神伤害  \nChose_B 对自己 _使用了_ __这不该骂？__ , 受到伤害减少$\\dfrac{1}{3}$  \n\n连一刻也没有为ERA_yes即将离开而感到~~悲伤~~,立刻抵达战场的是**原神哥**!!!  \n\n-------------Chose_B & ERA_yes ----- Dragon & 原神哥 -------------  \n原神哥 对 ERA_yes _使用了_ __质询__ , 要求ERA_yes回答是如何重新安装系统的  \nERA_yes _使用了_ __无懈可击__ , `F7就可以进入bios界面`  \n原神哥 _获得状态_ __迷惑__ , 受到来自自己的精神伤害$10$点  \n原神哥 拿出 _图片:嘲讽txt_ , 质询Chose_B何人所为  \nChose_B _获得效果_ __汗流浃背__  \n原神哥 _使用了_ __装傻__ , 询问Chose_B _图片:嘲讽txt_ 的文字什么意思  \nChose_B _陷入状态_ __思考__  \n原神哥 _使用了_ __攻击__ , `你编啊，你接着编啊`  \nChose_B __怒气值++__ , `我们只是觉得你说要修电脑，结果给我们电脑破坏了，非常可笑而已`  \n原神哥 _获得效果_ __无言以对__ , 面色更加难看了  \n\n原神哥 _使用了_ __质询__ , 询问 Chose_B 是否下载了 `翻墙软件`  \nChose_B _获得效果_ __疑惑__  \n(10 seconds later)  \nChose_B _获得效果_ __恍然大悟__ 但是还是 __迷惑__  \n\n> 原神哥此处指 `clash for windows` 。  \n> 确实是利用 `VPN` 来翻墙的软件没错  \n> ~~clash怎么你了~~  \n\n> ~~原神哥甚至认识这个，他真的，我哭死~~  \n> ~~看来原神哥的日常生活不只是 genshin impact 啊~~\n\nDragon 对 Chose_B 的 __疑心++__  \n\n原神哥 对 技选生 们 发表**暴论**\n\n* 这个windows 10系统还是有问题的，希沃管家还是下不下来\n\n  > Deep Freeze 开着你能下载就有鬼了\n\n* 驯龙高手一定是存在的\n\n  > 急了就开地图炮是吧\n\nDragon 发表 __审判预告__ , `我等会去问问段长这事怎么处理`\n\n### Day 6 下午  \n\n------------ Chose_B ----- Dragon -------------  \nDragon 转达了 __处分决定__  \n\n* 不是 Chose_B 一个人被警告处分 就是 Chose_B、Len_zh、figure 一起被警告处分  \n\n  > 因为 Chose_B 下了 clash 还嘲讽了 原神哥  \n  > Len_zh 和 figure 平时玩一体机最多 。当然 Chose_B 也有参与过  \n  > 处分的表面理由就是 Chose_B 平时有玩 一体机  \n\nChose_B 受到精神伤害$15$点  \nDragon 说明了 __处分限制__\n\n* 不会将处分结果告知Chose_B的父母  \n* 处分结果可以被撤销\n* 处分结果不会被记入Chose_B的档案中\n* 不会影响本学期的评优\n\n> 警告处分被这样大削，可以说和通报批评无异了  \n> 这也可以体现:这里的管理体制比较混乱，处罚制度和处分结果存在明显错位\n\nDragon 说明了 __处分原因__\n\n```\n由于原神哥的误判\n一开始保修时是说一体机主板损坏\n这就牵出了大量与此有关，需要对一体机损坏负责的领导们\n然而\n主板根本就没坏，同学们还把一体机修好了\n恼怒的领导们就要求 Dragon 至少处分一个学生\n```\n\n> 好一个政治游戏!  \n\n## 后记  \n\n一体机的风波随着 Chose_B 的 警告处分 而告一段落了  \n老师们还是和以前一样上课，没有什么变化  \n不知是有意还是无意的，原神哥最后并没有给一班的一体机重新上冰点还原  \nDragon 还是喜欢用一体机的监控来时不时监视教室里的情况  \nLen_zh 和 figure 还是照玩不误  \nFlorance 找到了[随意解开冰点还原的软件](https://www.bilibili.com/video/BV1aH4y1S7Ab/?vd_source=88e5e88e44dcf35edbab57107763c335\n)  \n田所先生的转接头到现在也没有人赔他一个  \ncodeboy找到了可以向路中的ftp中放入文件的方法  \n\n喧嚣过后，什么也没有留下。  \n\n","source":"_posts/路桥第一马戏团出道录.md","raw":"---\ntitle: 路桥第一马戏团出道录\ndate: 2023-12-23 16:25:01\ncategories: 杂谈\n---\n\n## 请选择你的英雄\n\n* Dragon : 我只是想要监控教室而已\n\n* 原神哥 : 平时我只是在办公室van原神，被叫到时才来修电脑\n\n* 众同学 :\n\n  - Chose_B : 成功的从台下看客变成台上一员力\n  - Len_zh : %%%%%%%%%%%%%%%\n  - codeboy : （强者的沉默）\n  - ERA_yes : 一般路过，...，~~然后顺便修好了电脑~~\n  - 梅林 : 最强火力\n  - 田所先生 : 痛失转接头\n  - zc : （喝茶）\n  - figure : 你干嘛~哈哈哎呦~~\n  - 斑马 ： 我是最内哥的电教员(((\n  - 〇_Δ : (远远观望)\n\n* 驯龙高手 : 有没有此人？如有！\n\n* > 旁白 : 一场大戏，正要上演\n\n---\n\n取材自 2023.12.11 - 2023.12.18 的真实事件\n\n---\n\n## Scene 1\n\n### Day 1 早晨\n\nDragon : “最近我们班的希沃出了点问题啊。根据原神哥的判断，肯定是有人故意破坏了希沃的系统。”  \n(众同学窃窃私语，交流情况，但一无所获)  \nDragon : “我觉得，做这种事情的同学，基本上可以锁定在我们班选技术的同学。”   \n（一片哄闹）  \nDragon : “希望做这种事情的同学，可以自觉的承认啊。我周六要是翻监控查出来是你做的，我肯定要严肃处理你的。从处分起步，最高要你退学”  \n（静）  \n\n### Day 1 中午\n\n-------斑马---Dragon-------  \nDragon  _使用了_    __副有罪，当相坐__  \n斑马    _使用了_    __啊？__  ， 免疫了精神攻击，残血，退回教室  \n\n-------Chose_B---Dragon-------  \nDragon _使用了_ __质问__  \nChose_B _使用了_ __问心无愧__ ， 免疫伤害   \nDragon _使用了_ __强制推测__   \nChose_B 因 __迷惑__ 而 无牌可出，受到精神攻击，半血，退回教室  \n\n-------Len_zh---Dragon-------  \nDragon _使用了_ __质问__   \nLen_zh _使用了_ __原神，启动！__   \nDragon 受到了 __迷惑__ ，把Len_zh赶回了教室  \n\n-------〇_Δ---Dragon-------\nDragon _使用了_ __质问__  \n〇_Δ _使用了_ __问心无愧__ ， 免疫伤害  \nDragon _使用了_ __强制推测__   \n〇_Δ _使用了_ __假设不成立__   \nDragon 受到 __迷惑__ ，把〇_Δ赶回了教室  \n\n-------ZC---Dragon-------  \n(电话连接中)  \nDragon _使用了_ __质问__  \nZC _使用了_ __问心无愧__ ， 免疫伤害  \nDragon _使用了_ __刨根问底__  \nZC _使用了_  __不解__ ，连接断开！ \n\n> Dragon 调查无果，怒气值++\n\n## Scene 2\n\n### Day2 傍晚\n\n---17:00---  \n原神哥窜入教室，企图“修复”一体机  \n然而，在他解开了冰点还原，删掉了原有的系统之后  \n发现他根本不会用留下的 `linux` 的 `cmd`  \n拍照之后，原神哥落荒而逃~~~  \n\n> 修不来电脑可以不修\n\n---17:30---  \n(Chose_B、Len_zh、codeboy 等人进入教室)  \n众人(看着全屏的控制台) : “啊？？？”  \n\n> 此时的一体机： 开机即报错，按照提示enter后将进入选择界面  \n> 有操作空间的只是`cmd`选项，进入之后有`linux`的`cmd`可供使用  \n\n(10 mins later)  \n原来，一体机的系统和不同的电脑是有较大差别的：  \n\n* `seewo`的顶层系统是安卓，其电脑的功能仅仅通过接插在整机右侧的PC模块实现    \n  这也解释了为什么可选的cmd是`linux`的而不是`windows`的  \n* 尽管PC的功能暂时无法恢复，但是可以切换至安卓的界面，~~甚至可以勉强上网~~  \n* ~~你甚至可以在PC的报错屏幕上面点开画笔，在黑色的背景上面涂鸦~~  \n\n正当大伙研究有无修复可能的时候，Dragon进入教室  \n“还玩一体机，一体机都被你们玩坏了还玩？”  \n“我们只是看一下我们能不能修”  \n“技术人员已经和我说过了，这个电脑连系统都坏了，大概要2天才可以修好”  \n“2天！？”   \n“对啊。然后到现在都没有人承认自己弄了电脑。再这样下去，我要是查到了是谁干的事情，我不管是谁，我肯定要给他一个不可撤销的处分的”  \n“都不是我们干的怎么会有人承认？承认就有鬼了”  \n“承认就有鬼了？真的是......”  \n\n> Dragon 唯一说对了的事情就是修好电脑确实用了2天。尽管不是原神哥自己收拾的烂摊子\n\n## Scene 3\n\n#### Day 3-4\n\n> 一体机被原神哥破坏了，同学们不得不下楼上课。  \n> 这2天，STIer们也没有放弃抢救`seewo`的希望\n\n### Day 3 下午\n\nLen_zh向田所先生借来了键盘，尝试使用cmd。  \n\n* 可以通过指令访问到的硬盘空间是D盘 ，以发现的盘符文件`homo.ico`为证\n\n没有根本性的进展\n\n### Day 4 上午\n\nChose_B 想到既然PC的功能是由一个可以拆卸的PC模块实现的，那为什么不把楼下的PC模块换来呢？  \n然而，两个模块的型号不同，彼此无法适配  \ncodeboy 于是又开始尝试使用cmd\n\n* 你甚至可以运行 `python 3` \n\n没有什么根本性的进展\n\n### Day 4 中午\n\n田所先生的键盘的转接头还连在seewo断头台上  \n于是田所痛失一个转接头\n\n> STIer们的尝试不会白费\n\n---\n\n## Scene 4\n\n### Day 4 下午\n\nChose_B在寻找ERA_yes的路上碰到了ERA_yes,于是拉着ERA_yes来到了教室  \nERA_yes插上了他的硬盘，尝试着进入`bios`  \n快速的点击`F7`,`bios`界面成功出现，而这也宣告了STIer们的成功  \n\n> 现在原神哥真正的成为了一个Joker\n\n-----17:40-----\nERA_yes安装了`windows 10`之后，赶回了教室\n留下来的STIer继续着修复一体机的伟业\n\n* (梅林 or Len_zh) 设置了系统用户`Joker_Master_Wu`  \n* 梅林 安装了 核显驱动。 现在新系统的界面布局变得合理了\n* Chose_B 用了一整节晚自修的时间，安装了以下软件:\n  - 钉钉\n  - GPT-4W\n  - Deep Freeze\n  - 7z\n  - WPS\n  - 爱奇艺\n  - 微信\n  - QQ\n  - Watt toolkit\n  - Steam 以及 Wall paper engine\n  - DDraceNetwork\n  - Visual Studio Code 以及 相关的插件\n  - python 3\n  - edge 插件 (ADguard、AIX)\n  - Photoshop 2023\n  - clash\n  - 百度网盘\n  - 对拖堂特种 （一个定时关机器）\n  - 希沃白板\n  - 希沃视频展台\n  - winrar\n  - 网易云音乐\n  - QQmusic\n  - Random Sort II\n  - 配置系统环境变量: MingW64\n  - Geogebra\n  - 无人作难而希沃崩，不如STI，为一班笑，何也.txt  \n    内容: 仁义不施而攻守之势异也！别来修电脑了，原神放着我们来玩!\n* codeboy 安装了 \n  - Office ( powerpoint & word & excel )\n  - CP editor\n  - etc.\n* figure 安装了 upupoo\n* Len_zh为.txt创建了桌面快捷方式并改成了希沃管家的图标\n* etc.\n\n> Chose_B 并不知道，他留下的clash和嘲讽原神哥的文件，将为日后埋下祸患\n\n## Scene 5\n\n### Day 5 中午\n\n同学们目击了原神哥准备齐全(带来各种工具，比如螺丝刀，还带了一个人帮忙)  \n然而原神哥发现电脑已经修好，准备全部都没有必要了。来帮忙的人就选择了离开  \n然后原神哥发现 : \n\n* 希沃管家打开是嘲讽他的文件\n\n  > 没有Len_zh，他也看不到文件\n\n  > 然而原神哥却更加坚定了电脑是被同学破坏导致的信念。  \n  > 甚至觉得这个重新下载的 windows 10 同样有问题\n\n* 无法下载真正的希沃管家\n\n  > 因为 Chose_B 开启了 Deep Freeze , 没有解开这个冰点还原他怎么可能可以下载软\n  > 件\n\n  >原神哥却还是觉得是 windows 10 的问题\n\n* 怎么还有 `clash`\n\n  > Chose_B 根本就没想到 clash 会有啥问题，因此大胆放心的把快捷方式放在了桌面\n\n原神哥 再次 _拍照留念_ 后 ，逃离现场\n\n### Day 8 中午\n\n大伙饭后回到教室，发现 :  \n\n* 电脑系统又没了\n* 熟悉的报错 ： ~~欢迎回来~~  \n\n> Joker 急了就破坏电脑是吧  \n> ~~什么虾头东西~~\n\n痛苦的大伙还是觉得要收拾一下`Joker`留下的烂摊子  \n还好codeboy的u盘里面还有 windows 11  \n\n就在codeboy开始修复电脑的时候，Chose_B被Dragon叫了出去 ......\n\n---\n\n## Scene 6\n\n### Day 8 中午\n\n----------Chose_B-----Dragon----------  \nDragon _使用了_ __调查__ , 要求Chose_B寻找ERA_yes  \nChose_B _使用了_ __辩护__ , 解释ERA_yes无罪,效果甚微  \nDragon 拿出 _图片:嘲讽txt_ , 质询Chose_B何人所为  \nChose_B _使用了_ __装傻__ , 暂时有效  \nDragon _使用了_ __索敌__ , Chose_B只有找到ERA_yes才可继续对话  \nChose_B 无法回避 , 前往寻找ERA_yes  \n\n(15 minutes later)  \n-------Chose_B & ERA_yes ----- Dragon -------  \nDragon 对 ERA_yes _使用了_ __询问__ , 要求ERA_yes解释周四下午之事  \nERA_yes _使用了_ __问心无愧__  \nDragon 拿出 _图片:嘲讽txt_ , 质询ERA_yes何人所为  \nERA_yes _使用了_ __无懈可击__ , 否认了为自己所为  \nDragon 拿出 _图片:嘲讽txt_ , 质询Chose_B何人所为  \nChose_B _获得效果_ __汗流浃背__  \nDragon _获得效果_ __我猜对了__ , 造成$25$点精神伤害  \nChose_B 对自己 _使用了_ __这不该骂？__ , 受到伤害减少$\\dfrac{1}{3}$  \n\n连一刻也没有为ERA_yes即将离开而感到~~悲伤~~,立刻抵达战场的是**原神哥**!!!  \n\n-------------Chose_B & ERA_yes ----- Dragon & 原神哥 -------------  \n原神哥 对 ERA_yes _使用了_ __质询__ , 要求ERA_yes回答是如何重新安装系统的  \nERA_yes _使用了_ __无懈可击__ , `F7就可以进入bios界面`  \n原神哥 _获得状态_ __迷惑__ , 受到来自自己的精神伤害$10$点  \n原神哥 拿出 _图片:嘲讽txt_ , 质询Chose_B何人所为  \nChose_B _获得效果_ __汗流浃背__  \n原神哥 _使用了_ __装傻__ , 询问Chose_B _图片:嘲讽txt_ 的文字什么意思  \nChose_B _陷入状态_ __思考__  \n原神哥 _使用了_ __攻击__ , `你编啊，你接着编啊`  \nChose_B __怒气值++__ , `我们只是觉得你说要修电脑，结果给我们电脑破坏了，非常可笑而已`  \n原神哥 _获得效果_ __无言以对__ , 面色更加难看了  \n\n原神哥 _使用了_ __质询__ , 询问 Chose_B 是否下载了 `翻墙软件`  \nChose_B _获得效果_ __疑惑__  \n(10 seconds later)  \nChose_B _获得效果_ __恍然大悟__ 但是还是 __迷惑__  \n\n> 原神哥此处指 `clash for windows` 。  \n> 确实是利用 `VPN` 来翻墙的软件没错  \n> ~~clash怎么你了~~  \n\n> ~~原神哥甚至认识这个，他真的，我哭死~~  \n> ~~看来原神哥的日常生活不只是 genshin impact 啊~~\n\nDragon 对 Chose_B 的 __疑心++__  \n\n原神哥 对 技选生 们 发表**暴论**\n\n* 这个windows 10系统还是有问题的，希沃管家还是下不下来\n\n  > Deep Freeze 开着你能下载就有鬼了\n\n* 驯龙高手一定是存在的\n\n  > 急了就开地图炮是吧\n\nDragon 发表 __审判预告__ , `我等会去问问段长这事怎么处理`\n\n### Day 6 下午  \n\n------------ Chose_B ----- Dragon -------------  \nDragon 转达了 __处分决定__  \n\n* 不是 Chose_B 一个人被警告处分 就是 Chose_B、Len_zh、figure 一起被警告处分  \n\n  > 因为 Chose_B 下了 clash 还嘲讽了 原神哥  \n  > Len_zh 和 figure 平时玩一体机最多 。当然 Chose_B 也有参与过  \n  > 处分的表面理由就是 Chose_B 平时有玩 一体机  \n\nChose_B 受到精神伤害$15$点  \nDragon 说明了 __处分限制__\n\n* 不会将处分结果告知Chose_B的父母  \n* 处分结果可以被撤销\n* 处分结果不会被记入Chose_B的档案中\n* 不会影响本学期的评优\n\n> 警告处分被这样大削，可以说和通报批评无异了  \n> 这也可以体现:这里的管理体制比较混乱，处罚制度和处分结果存在明显错位\n\nDragon 说明了 __处分原因__\n\n```\n由于原神哥的误判\n一开始保修时是说一体机主板损坏\n这就牵出了大量与此有关，需要对一体机损坏负责的领导们\n然而\n主板根本就没坏，同学们还把一体机修好了\n恼怒的领导们就要求 Dragon 至少处分一个学生\n```\n\n> 好一个政治游戏!  \n\n## 后记  \n\n一体机的风波随着 Chose_B 的 警告处分 而告一段落了  \n老师们还是和以前一样上课，没有什么变化  \n不知是有意还是无意的，原神哥最后并没有给一班的一体机重新上冰点还原  \nDragon 还是喜欢用一体机的监控来时不时监视教室里的情况  \nLen_zh 和 figure 还是照玩不误  \nFlorance 找到了[随意解开冰点还原的软件](https://www.bilibili.com/video/BV1aH4y1S7Ab/?vd_source=88e5e88e44dcf35edbab57107763c335\n)  \n田所先生的转接头到现在也没有人赔他一个  \ncodeboy找到了可以向路中的ftp中放入文件的方法  \n\n喧嚣过后，什么也没有留下。  \n\n","slug":"路桥第一马戏团出道录","published":1,"updated":"2024-02-02T10:05:08.650Z","_id":"cls44ji2m00056owk8dv0apat","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"请选择你的英雄\"><a href=\"#请选择你的英雄\" class=\"headerlink\" title=\"请选择你的英雄\"></a>请选择你的英雄</h2><ul>\n<li><p>Dragon : 我只是想要监控教室而已</p>\n</li>\n<li><p>原神哥 : 平时我只是在办公室van原神，被叫到时才来修电脑</p>\n</li>\n<li><p>众同学 :</p>\n<ul>\n<li>Chose_B : 成功的从台下看客变成台上一员力</li>\n<li>Len_zh : %%%%%%%%%%%%%%%</li>\n<li>codeboy : （强者的沉默）</li>\n<li>ERA_yes : 一般路过，…，<del>然后顺便修好了电脑</del></li>\n<li>梅林 : 最强火力</li>\n<li>田所先生 : 痛失转接头</li>\n<li>zc : （喝茶）</li>\n<li>figure : 你干嘛~哈哈哎呦~~</li>\n<li>斑马 ： 我是最内哥的电教员(((</li>\n<li>〇_Δ : (远远观望)</li>\n</ul>\n</li>\n<li><p>驯龙高手 : 有没有此人？如有！</p>\n</li>\n<li><blockquote>\n<p>旁白 : 一场大戏，正要上演</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<p>取材自 2023.12.11 - 2023.12.18 的真实事件</p>\n<hr>\n<h2 id=\"Scene-1\"><a href=\"#Scene-1\" class=\"headerlink\" title=\"Scene 1\"></a>Scene 1</h2><h3 id=\"Day-1-早晨\"><a href=\"#Day-1-早晨\" class=\"headerlink\" title=\"Day 1 早晨\"></a>Day 1 早晨</h3><p>Dragon : “最近我们班的希沃出了点问题啊。根据原神哥的判断，肯定是有人故意破坏了希沃的系统。”<br>(众同学窃窃私语，交流情况，但一无所获)<br>Dragon : “我觉得，做这种事情的同学，基本上可以锁定在我们班选技术的同学。”<br>（一片哄闹）<br>Dragon : “希望做这种事情的同学，可以自觉的承认啊。我周六要是翻监控查出来是你做的，我肯定要严肃处理你的。从处分起步，最高要你退学”<br>（静）  </p>\n<h3 id=\"Day-1-中午\"><a href=\"#Day-1-中午\" class=\"headerlink\" title=\"Day 1 中午\"></a>Day 1 中午</h3><p>——-斑马—Dragon——-<br>Dragon  <em>使用了</em>    <strong>副有罪，当相坐</strong><br>斑马    <em>使用了</em>    <strong>啊？</strong>  ， 免疫了精神攻击，残血，退回教室  </p>\n<p>——-Chose_B—Dragon——-<br>Dragon <em>使用了</em> <strong>质问</strong><br>Chose_B <em>使用了</em> <strong>问心无愧</strong> ， 免疫伤害<br>Dragon <em>使用了</em> <strong>强制推测</strong><br>Chose_B 因 <strong>迷惑</strong> 而 无牌可出，受到精神攻击，半血，退回教室  </p>\n<p>——-Len_zh—Dragon——-<br>Dragon <em>使用了</em> <strong>质问</strong><br>Len_zh <em>使用了</em> <strong>原神，启动！</strong><br>Dragon 受到了 <strong>迷惑</strong> ，把Len_zh赶回了教室  </p>\n<p>——-〇_Δ—Dragon——-<br>Dragon <em>使用了</em> <strong>质问</strong><br>〇_Δ <em>使用了</em> <strong>问心无愧</strong> ， 免疫伤害<br>Dragon <em>使用了</em> <strong>强制推测</strong><br>〇_Δ <em>使用了</em> <strong>假设不成立</strong><br>Dragon 受到 <strong>迷惑</strong> ，把〇_Δ赶回了教室  </p>\n<p>——-ZC—Dragon——-<br>(电话连接中)<br>Dragon <em>使用了</em> <strong>质问</strong><br>ZC <em>使用了</em> <strong>问心无愧</strong> ， 免疫伤害<br>Dragon <em>使用了</em> <strong>刨根问底</strong><br>ZC <em>使用了</em>  <strong>不解</strong> ，连接断开！ </p>\n<blockquote>\n<p>Dragon 调查无果，怒气值++</p>\n</blockquote>\n<h2 id=\"Scene-2\"><a href=\"#Scene-2\" class=\"headerlink\" title=\"Scene 2\"></a>Scene 2</h2><h3 id=\"Day2-傍晚\"><a href=\"#Day2-傍晚\" class=\"headerlink\" title=\"Day2 傍晚\"></a>Day2 傍晚</h3><p>—17:00—<br>原神哥窜入教室，企图“修复”一体机<br>然而，在他解开了冰点还原，删掉了原有的系统之后<br>发现他根本不会用留下的 <code>linux</code> 的 <code>cmd</code><br>拍照之后，原神哥落荒而逃~~~  </p>\n<blockquote>\n<p>修不来电脑可以不修</p>\n</blockquote>\n<p>—17:30—<br>(Chose_B、Len_zh、codeboy 等人进入教室)<br>众人(看着全屏的控制台) : “啊？？？”  </p>\n<blockquote>\n<p>此时的一体机： 开机即报错，按照提示enter后将进入选择界面<br>有操作空间的只是<code>cmd</code>选项，进入之后有<code>linux</code>的<code>cmd</code>可供使用  </p>\n</blockquote>\n<p>(10 mins later)<br>原来，一体机的系统和不同的电脑是有较大差别的：  </p>\n<ul>\n<li><code>seewo</code>的顶层系统是安卓，其电脑的功能仅仅通过接插在整机右侧的PC模块实现<br>这也解释了为什么可选的cmd是<code>linux</code>的而不是<code>windows</code>的  </li>\n<li>尽管PC的功能暂时无法恢复，但是可以切换至安卓的界面，<del>甚至可以勉强上网</del>  </li>\n<li><del>你甚至可以在PC的报错屏幕上面点开画笔，在黑色的背景上面涂鸦</del></li>\n</ul>\n<p>正当大伙研究有无修复可能的时候，Dragon进入教室<br>“还玩一体机，一体机都被你们玩坏了还玩？”<br>“我们只是看一下我们能不能修”<br>“技术人员已经和我说过了，这个电脑连系统都坏了，大概要2天才可以修好”<br>“2天！？”<br>“对啊。然后到现在都没有人承认自己弄了电脑。再这样下去，我要是查到了是谁干的事情，我不管是谁，我肯定要给他一个不可撤销的处分的”<br>“都不是我们干的怎么会有人承认？承认就有鬼了”<br>“承认就有鬼了？真的是……”  </p>\n<blockquote>\n<p>Dragon 唯一说对了的事情就是修好电脑确实用了2天。尽管不是原神哥自己收拾的烂摊子</p>\n</blockquote>\n<h2 id=\"Scene-3\"><a href=\"#Scene-3\" class=\"headerlink\" title=\"Scene 3\"></a>Scene 3</h2><h4 id=\"Day-3-4\"><a href=\"#Day-3-4\" class=\"headerlink\" title=\"Day 3-4\"></a>Day 3-4</h4><blockquote>\n<p>一体机被原神哥破坏了，同学们不得不下楼上课。<br>这2天，STIer们也没有放弃抢救<code>seewo</code>的希望</p>\n</blockquote>\n<h3 id=\"Day-3-下午\"><a href=\"#Day-3-下午\" class=\"headerlink\" title=\"Day 3 下午\"></a>Day 3 下午</h3><p>Len_zh向田所先生借来了键盘，尝试使用cmd。  </p>\n<ul>\n<li>可以通过指令访问到的硬盘空间是D盘 ，以发现的盘符文件<code>homo.ico</code>为证</li>\n</ul>\n<p>没有根本性的进展</p>\n<h3 id=\"Day-4-上午\"><a href=\"#Day-4-上午\" class=\"headerlink\" title=\"Day 4 上午\"></a>Day 4 上午</h3><p>Chose_B 想到既然PC的功能是由一个可以拆卸的PC模块实现的，那为什么不把楼下的PC模块换来呢？<br>然而，两个模块的型号不同，彼此无法适配<br>codeboy 于是又开始尝试使用cmd</p>\n<ul>\n<li>你甚至可以运行 <code>python 3</code></li>\n</ul>\n<p>没有什么根本性的进展</p>\n<h3 id=\"Day-4-中午\"><a href=\"#Day-4-中午\" class=\"headerlink\" title=\"Day 4 中午\"></a>Day 4 中午</h3><p>田所先生的键盘的转接头还连在seewo断头台上<br>于是田所痛失一个转接头</p>\n<blockquote>\n<p>STIer们的尝试不会白费</p>\n</blockquote>\n<hr>\n<h2 id=\"Scene-4\"><a href=\"#Scene-4\" class=\"headerlink\" title=\"Scene 4\"></a>Scene 4</h2><h3 id=\"Day-4-下午\"><a href=\"#Day-4-下午\" class=\"headerlink\" title=\"Day 4 下午\"></a>Day 4 下午</h3><p>Chose_B在寻找ERA_yes的路上碰到了ERA_yes,于是拉着ERA_yes来到了教室<br>ERA_yes插上了他的硬盘，尝试着进入<code>bios</code><br>快速的点击<code>F7</code>,<code>bios</code>界面成功出现，而这也宣告了STIer们的成功  </p>\n<blockquote>\n<p>现在原神哥真正的成为了一个Joker</p>\n</blockquote>\n<p>—–17:40—–<br>ERA_yes安装了<code>windows 10</code>之后，赶回了教室<br>留下来的STIer继续着修复一体机的伟业</p>\n<ul>\n<li>(梅林 or Len_zh) 设置了系统用户<code>Joker_Master_Wu</code>  </li>\n<li>梅林 安装了 核显驱动。 现在新系统的界面布局变得合理了</li>\n<li>Chose_B 用了一整节晚自修的时间，安装了以下软件:<ul>\n<li>钉钉</li>\n<li>GPT-4W</li>\n<li>Deep Freeze</li>\n<li>7z</li>\n<li>WPS</li>\n<li>爱奇艺</li>\n<li>微信</li>\n<li>QQ</li>\n<li>Watt toolkit</li>\n<li>Steam 以及 Wall paper engine</li>\n<li>DDraceNetwork</li>\n<li>Visual Studio Code 以及 相关的插件</li>\n<li>python 3</li>\n<li>edge 插件 (ADguard、AIX)</li>\n<li>Photoshop 2023</li>\n<li>clash</li>\n<li>百度网盘</li>\n<li>对拖堂特种 （一个定时关机器）</li>\n<li>希沃白板</li>\n<li>希沃视频展台</li>\n<li>winrar</li>\n<li>网易云音乐</li>\n<li>QQmusic</li>\n<li>Random Sort II</li>\n<li>配置系统环境变量: MingW64</li>\n<li>Geogebra</li>\n<li>无人作难而希沃崩，不如STI，为一班笑，何也.txt<br>内容: 仁义不施而攻守之势异也！别来修电脑了，原神放着我们来玩!</li>\n</ul>\n</li>\n<li>codeboy 安装了 <ul>\n<li>Office ( powerpoint &amp; word &amp; excel )</li>\n<li>CP editor</li>\n<li>etc.</li>\n</ul>\n</li>\n<li>figure 安装了 upupoo</li>\n<li>Len_zh为.txt创建了桌面快捷方式并改成了希沃管家的图标</li>\n<li>etc.</li>\n</ul>\n<blockquote>\n<p>Chose_B 并不知道，他留下的clash和嘲讽原神哥的文件，将为日后埋下祸患</p>\n</blockquote>\n<h2 id=\"Scene-5\"><a href=\"#Scene-5\" class=\"headerlink\" title=\"Scene 5\"></a>Scene 5</h2><h3 id=\"Day-5-中午\"><a href=\"#Day-5-中午\" class=\"headerlink\" title=\"Day 5 中午\"></a>Day 5 中午</h3><p>同学们目击了原神哥准备齐全(带来各种工具，比如螺丝刀，还带了一个人帮忙)<br>然而原神哥发现电脑已经修好，准备全部都没有必要了。来帮忙的人就选择了离开<br>然后原神哥发现 : </p>\n<ul>\n<li><p>希沃管家打开是嘲讽他的文件</p>\n<blockquote>\n<p>没有Len_zh，他也看不到文件</p>\n</blockquote>\n<blockquote>\n<p>然而原神哥却更加坚定了电脑是被同学破坏导致的信念。<br>甚至觉得这个重新下载的 windows 10 同样有问题</p>\n</blockquote>\n</li>\n<li><p>无法下载真正的希沃管家</p>\n<blockquote>\n<p>因为 Chose_B 开启了 Deep Freeze , 没有解开这个冰点还原他怎么可能可以下载软<br>件</p>\n</blockquote>\n<blockquote>\n<p>原神哥却还是觉得是 windows 10 的问题</p>\n</blockquote>\n</li>\n<li><p>怎么还有 <code>clash</code></p>\n<blockquote>\n<p>Chose_B 根本就没想到 clash 会有啥问题，因此大胆放心的把快捷方式放在了桌面</p>\n</blockquote>\n</li>\n</ul>\n<p>原神哥 再次 <em>拍照留念</em> 后 ，逃离现场</p>\n<h3 id=\"Day-8-中午\"><a href=\"#Day-8-中午\" class=\"headerlink\" title=\"Day 8 中午\"></a>Day 8 中午</h3><p>大伙饭后回到教室，发现 :  </p>\n<ul>\n<li>电脑系统又没了</li>\n<li>熟悉的报错 ： <del>欢迎回来</del></li>\n</ul>\n<blockquote>\n<p>Joker 急了就破坏电脑是吧<br><del>什么虾头东西</del></p>\n</blockquote>\n<p>痛苦的大伙还是觉得要收拾一下<code>Joker</code>留下的烂摊子<br>还好codeboy的u盘里面还有 windows 11  </p>\n<p>就在codeboy开始修复电脑的时候，Chose_B被Dragon叫了出去 ……</p>\n<hr>\n<h2 id=\"Scene-6\"><a href=\"#Scene-6\" class=\"headerlink\" title=\"Scene 6\"></a>Scene 6</h2><h3 id=\"Day-8-中午-1\"><a href=\"#Day-8-中午-1\" class=\"headerlink\" title=\"Day 8 中午\"></a>Day 8 中午</h3><p>———-Chose_B—–Dragon———-<br>Dragon <em>使用了</em> <strong>调查</strong> , 要求Chose_B寻找ERA_yes<br>Chose_B <em>使用了</em> <strong>辩护</strong> , 解释ERA_yes无罪,效果甚微<br>Dragon 拿出 <em>图片:嘲讽txt</em> , 质询Chose_B何人所为<br>Chose_B <em>使用了</em> <strong>装傻</strong> , 暂时有效<br>Dragon <em>使用了</em> <strong>索敌</strong> , Chose_B只有找到ERA_yes才可继续对话<br>Chose_B 无法回避 , 前往寻找ERA_yes  </p>\n<p>(15 minutes later)<br>——-Chose_B &amp; ERA_yes —– Dragon ——-<br>Dragon 对 ERA_yes <em>使用了</em> <strong>询问</strong> , 要求ERA_yes解释周四下午之事<br>ERA_yes <em>使用了</em> <strong>问心无愧</strong><br>Dragon 拿出 <em>图片:嘲讽txt</em> , 质询ERA_yes何人所为<br>ERA_yes <em>使用了</em> <strong>无懈可击</strong> , 否认了为自己所为<br>Dragon 拿出 <em>图片:嘲讽txt</em> , 质询Chose_B何人所为<br>Chose_B <em>获得效果</em> <strong>汗流浃背</strong><br>Dragon <em>获得效果</em> <strong>我猜对了</strong> , 造成$25$点精神伤害<br>Chose_B 对自己 <em>使用了</em> <strong>这不该骂？</strong> , 受到伤害减少$\\dfrac{1}{3}$  </p>\n<p>连一刻也没有为ERA_yes即将离开而感到<del>悲伤</del>,立刻抵达战场的是<strong>原神哥</strong>!!!  </p>\n<p>————-Chose_B &amp; ERA_yes —– Dragon &amp; 原神哥 ————-<br>原神哥 对 ERA_yes <em>使用了</em> <strong>质询</strong> , 要求ERA_yes回答是如何重新安装系统的<br>ERA_yes <em>使用了</em> <strong>无懈可击</strong> , <code>F7就可以进入bios界面</code><br>原神哥 <em>获得状态</em> <strong>迷惑</strong> , 受到来自自己的精神伤害$10$点<br>原神哥 拿出 <em>图片:嘲讽txt</em> , 质询Chose_B何人所为<br>Chose_B <em>获得效果</em> <strong>汗流浃背</strong><br>原神哥 <em>使用了</em> <strong>装傻</strong> , 询问Chose_B <em>图片:嘲讽txt</em> 的文字什么意思<br>Chose_B <em>陷入状态</em> <strong>思考</strong><br>原神哥 <em>使用了</em> <strong>攻击</strong> , <code>你编啊，你接着编啊</code><br>Chose_B <strong>怒气值++</strong> , <code>我们只是觉得你说要修电脑，结果给我们电脑破坏了，非常可笑而已</code><br>原神哥 <em>获得效果</em> <strong>无言以对</strong> , 面色更加难看了  </p>\n<p>原神哥 <em>使用了</em> <strong>质询</strong> , 询问 Chose_B 是否下载了 <code>翻墙软件</code><br>Chose_B <em>获得效果</em> <strong>疑惑</strong><br>(10 seconds later)<br>Chose_B <em>获得效果</em> <strong>恍然大悟</strong> 但是还是 <strong>迷惑</strong>  </p>\n<blockquote>\n<p>原神哥此处指 <code>clash for windows</code> 。<br>确实是利用 <code>VPN</code> 来翻墙的软件没错<br><del>clash怎么你了</del>  </p>\n</blockquote>\n<blockquote>\n<p><del>原神哥甚至认识这个，他真的，我哭死</del><br><del>看来原神哥的日常生活不只是 genshin impact 啊</del></p>\n</blockquote>\n<p>Dragon 对 Chose_B 的 <strong>疑心++</strong>  </p>\n<p>原神哥 对 技选生 们 发表<strong>暴论</strong></p>\n<ul>\n<li><p>这个windows 10系统还是有问题的，希沃管家还是下不下来</p>\n<blockquote>\n<p>Deep Freeze 开着你能下载就有鬼了</p>\n</blockquote>\n</li>\n<li><p>驯龙高手一定是存在的</p>\n<blockquote>\n<p>急了就开地图炮是吧</p>\n</blockquote>\n</li>\n</ul>\n<p>Dragon 发表 <strong>审判预告</strong> , <code>我等会去问问段长这事怎么处理</code></p>\n<h3 id=\"Day-6-下午\"><a href=\"#Day-6-下午\" class=\"headerlink\" title=\"Day 6 下午\"></a>Day 6 下午</h3><p>———— Chose_B —– Dragon ————-<br>Dragon 转达了 <strong>处分决定</strong>  </p>\n<ul>\n<li><p>不是 Chose_B 一个人被警告处分 就是 Chose_B、Len_zh、figure 一起被警告处分  </p>\n<blockquote>\n<p>因为 Chose_B 下了 clash 还嘲讽了 原神哥<br>Len_zh 和 figure 平时玩一体机最多 。当然 Chose_B 也有参与过<br>处分的表面理由就是 Chose_B 平时有玩 一体机</p>\n</blockquote>\n</li>\n</ul>\n<p>Chose_B 受到精神伤害$15$点<br>Dragon 说明了 <strong>处分限制</strong></p>\n<ul>\n<li>不会将处分结果告知Chose_B的父母  </li>\n<li>处分结果可以被撤销</li>\n<li>处分结果不会被记入Chose_B的档案中</li>\n<li>不会影响本学期的评优</li>\n</ul>\n<blockquote>\n<p>警告处分被这样大削，可以说和通报批评无异了<br>这也可以体现:这里的管理体制比较混乱，处罚制度和处分结果存在明显错位</p>\n</blockquote>\n<p>Dragon 说明了 <strong>处分原因</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">由于原神哥的误判\n一开始保修时是说一体机主板损坏\n这就牵出了大量与此有关，需要对一体机损坏负责的领导们\n然而\n主板根本就没坏，同学们还把一体机修好了\n恼怒的领导们就要求 Dragon 至少处分一个学生<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>好一个政治游戏!  </p>\n</blockquote>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>一体机的风波随着 Chose_B 的 警告处分 而告一段落了<br>老师们还是和以前一样上课，没有什么变化<br>不知是有意还是无意的，原神哥最后并没有给一班的一体机重新上冰点还原<br>Dragon 还是喜欢用一体机的监控来时不时监视教室里的情况<br>Len_zh 和 figure 还是照玩不误<br>Florance 找到了<a href=\"https://www.bilibili.com/video/BV1aH4y1S7Ab/?vd_source=88e5e88e44dcf35edbab57107763c335\">随意解开冰点还原的软件</a><br>田所先生的转接头到现在也没有人赔他一个<br>codeboy找到了可以向路中的ftp中放入文件的方法  </p>\n<p>喧嚣过后，什么也没有留下。  </p>\n","excerpt":"","more":"<h2 id=\"请选择你的英雄\"><a href=\"#请选择你的英雄\" class=\"headerlink\" title=\"请选择你的英雄\"></a>请选择你的英雄</h2><ul>\n<li><p>Dragon : 我只是想要监控教室而已</p>\n</li>\n<li><p>原神哥 : 平时我只是在办公室van原神，被叫到时才来修电脑</p>\n</li>\n<li><p>众同学 :</p>\n<ul>\n<li>Chose_B : 成功的从台下看客变成台上一员力</li>\n<li>Len_zh : %%%%%%%%%%%%%%%</li>\n<li>codeboy : （强者的沉默）</li>\n<li>ERA_yes : 一般路过，…，<del>然后顺便修好了电脑</del></li>\n<li>梅林 : 最强火力</li>\n<li>田所先生 : 痛失转接头</li>\n<li>zc : （喝茶）</li>\n<li>figure : 你干嘛~哈哈哎呦~~</li>\n<li>斑马 ： 我是最内哥的电教员(((</li>\n<li>〇_Δ : (远远观望)</li>\n</ul>\n</li>\n<li><p>驯龙高手 : 有没有此人？如有！</p>\n</li>\n<li><blockquote>\n<p>旁白 : 一场大戏，正要上演</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<p>取材自 2023.12.11 - 2023.12.18 的真实事件</p>\n<hr>\n<h2 id=\"Scene-1\"><a href=\"#Scene-1\" class=\"headerlink\" title=\"Scene 1\"></a>Scene 1</h2><h3 id=\"Day-1-早晨\"><a href=\"#Day-1-早晨\" class=\"headerlink\" title=\"Day 1 早晨\"></a>Day 1 早晨</h3><p>Dragon : “最近我们班的希沃出了点问题啊。根据原神哥的判断，肯定是有人故意破坏了希沃的系统。”<br>(众同学窃窃私语，交流情况，但一无所获)<br>Dragon : “我觉得，做这种事情的同学，基本上可以锁定在我们班选技术的同学。”<br>（一片哄闹）<br>Dragon : “希望做这种事情的同学，可以自觉的承认啊。我周六要是翻监控查出来是你做的，我肯定要严肃处理你的。从处分起步，最高要你退学”<br>（静）  </p>\n<h3 id=\"Day-1-中午\"><a href=\"#Day-1-中午\" class=\"headerlink\" title=\"Day 1 中午\"></a>Day 1 中午</h3><p>——-斑马—Dragon——-<br>Dragon  <em>使用了</em>    <strong>副有罪，当相坐</strong><br>斑马    <em>使用了</em>    <strong>啊？</strong>  ， 免疫了精神攻击，残血，退回教室  </p>\n<p>——-Chose_B—Dragon——-<br>Dragon <em>使用了</em> <strong>质问</strong><br>Chose_B <em>使用了</em> <strong>问心无愧</strong> ， 免疫伤害<br>Dragon <em>使用了</em> <strong>强制推测</strong><br>Chose_B 因 <strong>迷惑</strong> 而 无牌可出，受到精神攻击，半血，退回教室  </p>\n<p>——-Len_zh—Dragon——-<br>Dragon <em>使用了</em> <strong>质问</strong><br>Len_zh <em>使用了</em> <strong>原神，启动！</strong><br>Dragon 受到了 <strong>迷惑</strong> ，把Len_zh赶回了教室  </p>\n<p>——-〇_Δ—Dragon——-<br>Dragon <em>使用了</em> <strong>质问</strong><br>〇_Δ <em>使用了</em> <strong>问心无愧</strong> ， 免疫伤害<br>Dragon <em>使用了</em> <strong>强制推测</strong><br>〇_Δ <em>使用了</em> <strong>假设不成立</strong><br>Dragon 受到 <strong>迷惑</strong> ，把〇_Δ赶回了教室  </p>\n<p>——-ZC—Dragon——-<br>(电话连接中)<br>Dragon <em>使用了</em> <strong>质问</strong><br>ZC <em>使用了</em> <strong>问心无愧</strong> ， 免疫伤害<br>Dragon <em>使用了</em> <strong>刨根问底</strong><br>ZC <em>使用了</em>  <strong>不解</strong> ，连接断开！ </p>\n<blockquote>\n<p>Dragon 调查无果，怒气值++</p>\n</blockquote>\n<h2 id=\"Scene-2\"><a href=\"#Scene-2\" class=\"headerlink\" title=\"Scene 2\"></a>Scene 2</h2><h3 id=\"Day2-傍晚\"><a href=\"#Day2-傍晚\" class=\"headerlink\" title=\"Day2 傍晚\"></a>Day2 傍晚</h3><p>—17:00—<br>原神哥窜入教室，企图“修复”一体机<br>然而，在他解开了冰点还原，删掉了原有的系统之后<br>发现他根本不会用留下的 <code>linux</code> 的 <code>cmd</code><br>拍照之后，原神哥落荒而逃~~~  </p>\n<blockquote>\n<p>修不来电脑可以不修</p>\n</blockquote>\n<p>—17:30—<br>(Chose_B、Len_zh、codeboy 等人进入教室)<br>众人(看着全屏的控制台) : “啊？？？”  </p>\n<blockquote>\n<p>此时的一体机： 开机即报错，按照提示enter后将进入选择界面<br>有操作空间的只是<code>cmd</code>选项，进入之后有<code>linux</code>的<code>cmd</code>可供使用  </p>\n</blockquote>\n<p>(10 mins later)<br>原来，一体机的系统和不同的电脑是有较大差别的：  </p>\n<ul>\n<li><code>seewo</code>的顶层系统是安卓，其电脑的功能仅仅通过接插在整机右侧的PC模块实现<br>这也解释了为什么可选的cmd是<code>linux</code>的而不是<code>windows</code>的  </li>\n<li>尽管PC的功能暂时无法恢复，但是可以切换至安卓的界面，<del>甚至可以勉强上网</del>  </li>\n<li><del>你甚至可以在PC的报错屏幕上面点开画笔，在黑色的背景上面涂鸦</del></li>\n</ul>\n<p>正当大伙研究有无修复可能的时候，Dragon进入教室<br>“还玩一体机，一体机都被你们玩坏了还玩？”<br>“我们只是看一下我们能不能修”<br>“技术人员已经和我说过了，这个电脑连系统都坏了，大概要2天才可以修好”<br>“2天！？”<br>“对啊。然后到现在都没有人承认自己弄了电脑。再这样下去，我要是查到了是谁干的事情，我不管是谁，我肯定要给他一个不可撤销的处分的”<br>“都不是我们干的怎么会有人承认？承认就有鬼了”<br>“承认就有鬼了？真的是……”  </p>\n<blockquote>\n<p>Dragon 唯一说对了的事情就是修好电脑确实用了2天。尽管不是原神哥自己收拾的烂摊子</p>\n</blockquote>\n<h2 id=\"Scene-3\"><a href=\"#Scene-3\" class=\"headerlink\" title=\"Scene 3\"></a>Scene 3</h2><h4 id=\"Day-3-4\"><a href=\"#Day-3-4\" class=\"headerlink\" title=\"Day 3-4\"></a>Day 3-4</h4><blockquote>\n<p>一体机被原神哥破坏了，同学们不得不下楼上课。<br>这2天，STIer们也没有放弃抢救<code>seewo</code>的希望</p>\n</blockquote>\n<h3 id=\"Day-3-下午\"><a href=\"#Day-3-下午\" class=\"headerlink\" title=\"Day 3 下午\"></a>Day 3 下午</h3><p>Len_zh向田所先生借来了键盘，尝试使用cmd。  </p>\n<ul>\n<li>可以通过指令访问到的硬盘空间是D盘 ，以发现的盘符文件<code>homo.ico</code>为证</li>\n</ul>\n<p>没有根本性的进展</p>\n<h3 id=\"Day-4-上午\"><a href=\"#Day-4-上午\" class=\"headerlink\" title=\"Day 4 上午\"></a>Day 4 上午</h3><p>Chose_B 想到既然PC的功能是由一个可以拆卸的PC模块实现的，那为什么不把楼下的PC模块换来呢？<br>然而，两个模块的型号不同，彼此无法适配<br>codeboy 于是又开始尝试使用cmd</p>\n<ul>\n<li>你甚至可以运行 <code>python 3</code></li>\n</ul>\n<p>没有什么根本性的进展</p>\n<h3 id=\"Day-4-中午\"><a href=\"#Day-4-中午\" class=\"headerlink\" title=\"Day 4 中午\"></a>Day 4 中午</h3><p>田所先生的键盘的转接头还连在seewo断头台上<br>于是田所痛失一个转接头</p>\n<blockquote>\n<p>STIer们的尝试不会白费</p>\n</blockquote>\n<hr>\n<h2 id=\"Scene-4\"><a href=\"#Scene-4\" class=\"headerlink\" title=\"Scene 4\"></a>Scene 4</h2><h3 id=\"Day-4-下午\"><a href=\"#Day-4-下午\" class=\"headerlink\" title=\"Day 4 下午\"></a>Day 4 下午</h3><p>Chose_B在寻找ERA_yes的路上碰到了ERA_yes,于是拉着ERA_yes来到了教室<br>ERA_yes插上了他的硬盘，尝试着进入<code>bios</code><br>快速的点击<code>F7</code>,<code>bios</code>界面成功出现，而这也宣告了STIer们的成功  </p>\n<blockquote>\n<p>现在原神哥真正的成为了一个Joker</p>\n</blockquote>\n<p>—–17:40—–<br>ERA_yes安装了<code>windows 10</code>之后，赶回了教室<br>留下来的STIer继续着修复一体机的伟业</p>\n<ul>\n<li>(梅林 or Len_zh) 设置了系统用户<code>Joker_Master_Wu</code>  </li>\n<li>梅林 安装了 核显驱动。 现在新系统的界面布局变得合理了</li>\n<li>Chose_B 用了一整节晚自修的时间，安装了以下软件:<ul>\n<li>钉钉</li>\n<li>GPT-4W</li>\n<li>Deep Freeze</li>\n<li>7z</li>\n<li>WPS</li>\n<li>爱奇艺</li>\n<li>微信</li>\n<li>QQ</li>\n<li>Watt toolkit</li>\n<li>Steam 以及 Wall paper engine</li>\n<li>DDraceNetwork</li>\n<li>Visual Studio Code 以及 相关的插件</li>\n<li>python 3</li>\n<li>edge 插件 (ADguard、AIX)</li>\n<li>Photoshop 2023</li>\n<li>clash</li>\n<li>百度网盘</li>\n<li>对拖堂特种 （一个定时关机器）</li>\n<li>希沃白板</li>\n<li>希沃视频展台</li>\n<li>winrar</li>\n<li>网易云音乐</li>\n<li>QQmusic</li>\n<li>Random Sort II</li>\n<li>配置系统环境变量: MingW64</li>\n<li>Geogebra</li>\n<li>无人作难而希沃崩，不如STI，为一班笑，何也.txt<br>内容: 仁义不施而攻守之势异也！别来修电脑了，原神放着我们来玩!</li>\n</ul>\n</li>\n<li>codeboy 安装了 <ul>\n<li>Office ( powerpoint &amp; word &amp; excel )</li>\n<li>CP editor</li>\n<li>etc.</li>\n</ul>\n</li>\n<li>figure 安装了 upupoo</li>\n<li>Len_zh为.txt创建了桌面快捷方式并改成了希沃管家的图标</li>\n<li>etc.</li>\n</ul>\n<blockquote>\n<p>Chose_B 并不知道，他留下的clash和嘲讽原神哥的文件，将为日后埋下祸患</p>\n</blockquote>\n<h2 id=\"Scene-5\"><a href=\"#Scene-5\" class=\"headerlink\" title=\"Scene 5\"></a>Scene 5</h2><h3 id=\"Day-5-中午\"><a href=\"#Day-5-中午\" class=\"headerlink\" title=\"Day 5 中午\"></a>Day 5 中午</h3><p>同学们目击了原神哥准备齐全(带来各种工具，比如螺丝刀，还带了一个人帮忙)<br>然而原神哥发现电脑已经修好，准备全部都没有必要了。来帮忙的人就选择了离开<br>然后原神哥发现 : </p>\n<ul>\n<li><p>希沃管家打开是嘲讽他的文件</p>\n<blockquote>\n<p>没有Len_zh，他也看不到文件</p>\n</blockquote>\n<blockquote>\n<p>然而原神哥却更加坚定了电脑是被同学破坏导致的信念。<br>甚至觉得这个重新下载的 windows 10 同样有问题</p>\n</blockquote>\n</li>\n<li><p>无法下载真正的希沃管家</p>\n<blockquote>\n<p>因为 Chose_B 开启了 Deep Freeze , 没有解开这个冰点还原他怎么可能可以下载软<br>件</p>\n</blockquote>\n<blockquote>\n<p>原神哥却还是觉得是 windows 10 的问题</p>\n</blockquote>\n</li>\n<li><p>怎么还有 <code>clash</code></p>\n<blockquote>\n<p>Chose_B 根本就没想到 clash 会有啥问题，因此大胆放心的把快捷方式放在了桌面</p>\n</blockquote>\n</li>\n</ul>\n<p>原神哥 再次 <em>拍照留念</em> 后 ，逃离现场</p>\n<h3 id=\"Day-8-中午\"><a href=\"#Day-8-中午\" class=\"headerlink\" title=\"Day 8 中午\"></a>Day 8 中午</h3><p>大伙饭后回到教室，发现 :  </p>\n<ul>\n<li>电脑系统又没了</li>\n<li>熟悉的报错 ： <del>欢迎回来</del></li>\n</ul>\n<blockquote>\n<p>Joker 急了就破坏电脑是吧<br><del>什么虾头东西</del></p>\n</blockquote>\n<p>痛苦的大伙还是觉得要收拾一下<code>Joker</code>留下的烂摊子<br>还好codeboy的u盘里面还有 windows 11  </p>\n<p>就在codeboy开始修复电脑的时候，Chose_B被Dragon叫了出去 ……</p>\n<hr>\n<h2 id=\"Scene-6\"><a href=\"#Scene-6\" class=\"headerlink\" title=\"Scene 6\"></a>Scene 6</h2><h3 id=\"Day-8-中午-1\"><a href=\"#Day-8-中午-1\" class=\"headerlink\" title=\"Day 8 中午\"></a>Day 8 中午</h3><p>———-Chose_B—–Dragon———-<br>Dragon <em>使用了</em> <strong>调查</strong> , 要求Chose_B寻找ERA_yes<br>Chose_B <em>使用了</em> <strong>辩护</strong> , 解释ERA_yes无罪,效果甚微<br>Dragon 拿出 <em>图片:嘲讽txt</em> , 质询Chose_B何人所为<br>Chose_B <em>使用了</em> <strong>装傻</strong> , 暂时有效<br>Dragon <em>使用了</em> <strong>索敌</strong> , Chose_B只有找到ERA_yes才可继续对话<br>Chose_B 无法回避 , 前往寻找ERA_yes  </p>\n<p>(15 minutes later)<br>——-Chose_B &amp; ERA_yes —– Dragon ——-<br>Dragon 对 ERA_yes <em>使用了</em> <strong>询问</strong> , 要求ERA_yes解释周四下午之事<br>ERA_yes <em>使用了</em> <strong>问心无愧</strong><br>Dragon 拿出 <em>图片:嘲讽txt</em> , 质询ERA_yes何人所为<br>ERA_yes <em>使用了</em> <strong>无懈可击</strong> , 否认了为自己所为<br>Dragon 拿出 <em>图片:嘲讽txt</em> , 质询Chose_B何人所为<br>Chose_B <em>获得效果</em> <strong>汗流浃背</strong><br>Dragon <em>获得效果</em> <strong>我猜对了</strong> , 造成$25$点精神伤害<br>Chose_B 对自己 <em>使用了</em> <strong>这不该骂？</strong> , 受到伤害减少$\\dfrac{1}{3}$  </p>\n<p>连一刻也没有为ERA_yes即将离开而感到<del>悲伤</del>,立刻抵达战场的是<strong>原神哥</strong>!!!  </p>\n<p>————-Chose_B &amp; ERA_yes —– Dragon &amp; 原神哥 ————-<br>原神哥 对 ERA_yes <em>使用了</em> <strong>质询</strong> , 要求ERA_yes回答是如何重新安装系统的<br>ERA_yes <em>使用了</em> <strong>无懈可击</strong> , <code>F7就可以进入bios界面</code><br>原神哥 <em>获得状态</em> <strong>迷惑</strong> , 受到来自自己的精神伤害$10$点<br>原神哥 拿出 <em>图片:嘲讽txt</em> , 质询Chose_B何人所为<br>Chose_B <em>获得效果</em> <strong>汗流浃背</strong><br>原神哥 <em>使用了</em> <strong>装傻</strong> , 询问Chose_B <em>图片:嘲讽txt</em> 的文字什么意思<br>Chose_B <em>陷入状态</em> <strong>思考</strong><br>原神哥 <em>使用了</em> <strong>攻击</strong> , <code>你编啊，你接着编啊</code><br>Chose_B <strong>怒气值++</strong> , <code>我们只是觉得你说要修电脑，结果给我们电脑破坏了，非常可笑而已</code><br>原神哥 <em>获得效果</em> <strong>无言以对</strong> , 面色更加难看了  </p>\n<p>原神哥 <em>使用了</em> <strong>质询</strong> , 询问 Chose_B 是否下载了 <code>翻墙软件</code><br>Chose_B <em>获得效果</em> <strong>疑惑</strong><br>(10 seconds later)<br>Chose_B <em>获得效果</em> <strong>恍然大悟</strong> 但是还是 <strong>迷惑</strong>  </p>\n<blockquote>\n<p>原神哥此处指 <code>clash for windows</code> 。<br>确实是利用 <code>VPN</code> 来翻墙的软件没错<br><del>clash怎么你了</del>  </p>\n</blockquote>\n<blockquote>\n<p><del>原神哥甚至认识这个，他真的，我哭死</del><br><del>看来原神哥的日常生活不只是 genshin impact 啊</del></p>\n</blockquote>\n<p>Dragon 对 Chose_B 的 <strong>疑心++</strong>  </p>\n<p>原神哥 对 技选生 们 发表<strong>暴论</strong></p>\n<ul>\n<li><p>这个windows 10系统还是有问题的，希沃管家还是下不下来</p>\n<blockquote>\n<p>Deep Freeze 开着你能下载就有鬼了</p>\n</blockquote>\n</li>\n<li><p>驯龙高手一定是存在的</p>\n<blockquote>\n<p>急了就开地图炮是吧</p>\n</blockquote>\n</li>\n</ul>\n<p>Dragon 发表 <strong>审判预告</strong> , <code>我等会去问问段长这事怎么处理</code></p>\n<h3 id=\"Day-6-下午\"><a href=\"#Day-6-下午\" class=\"headerlink\" title=\"Day 6 下午\"></a>Day 6 下午</h3><p>———— Chose_B —– Dragon ————-<br>Dragon 转达了 <strong>处分决定</strong>  </p>\n<ul>\n<li><p>不是 Chose_B 一个人被警告处分 就是 Chose_B、Len_zh、figure 一起被警告处分  </p>\n<blockquote>\n<p>因为 Chose_B 下了 clash 还嘲讽了 原神哥<br>Len_zh 和 figure 平时玩一体机最多 。当然 Chose_B 也有参与过<br>处分的表面理由就是 Chose_B 平时有玩 一体机</p>\n</blockquote>\n</li>\n</ul>\n<p>Chose_B 受到精神伤害$15$点<br>Dragon 说明了 <strong>处分限制</strong></p>\n<ul>\n<li>不会将处分结果告知Chose_B的父母  </li>\n<li>处分结果可以被撤销</li>\n<li>处分结果不会被记入Chose_B的档案中</li>\n<li>不会影响本学期的评优</li>\n</ul>\n<blockquote>\n<p>警告处分被这样大削，可以说和通报批评无异了<br>这也可以体现:这里的管理体制比较混乱，处罚制度和处分结果存在明显错位</p>\n</blockquote>\n<p>Dragon 说明了 <strong>处分原因</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">由于原神哥的误判\n一开始保修时是说一体机主板损坏\n这就牵出了大量与此有关，需要对一体机损坏负责的领导们\n然而\n主板根本就没坏，同学们还把一体机修好了\n恼怒的领导们就要求 Dragon 至少处分一个学生<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>好一个政治游戏!  </p>\n</blockquote>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>一体机的风波随着 Chose_B 的 警告处分 而告一段落了<br>老师们还是和以前一样上课，没有什么变化<br>不知是有意还是无意的，原神哥最后并没有给一班的一体机重新上冰点还原<br>Dragon 还是喜欢用一体机的监控来时不时监视教室里的情况<br>Len_zh 和 figure 还是照玩不误<br>Florance 找到了<a href=\"https://www.bilibili.com/video/BV1aH4y1S7Ab/?vd_source=88e5e88e44dcf35edbab57107763c335\">随意解开冰点还原的软件</a><br>田所先生的转接头到现在也没有人赔他一个<br>codeboy找到了可以向路中的ftp中放入文件的方法  </p>\n<p>喧嚣过后，什么也没有留下。  </p>\n"},{"title":"各路资源","date":"2024-02-02T10:15:02.000Z","_content":"\n# 看番\n[樱花 I](http://www.yinghuavideo.com/)  \n[樱花 II](http://www.dm99.me/)  \n[TinaAcg](https://www.tinaacg.net/)  \n[zzzFun](http://www.zzzfun.one/vod_type_id_1_page_5.html)  \n\n# 找图\n[pixiv](https://www.pixiv.net)\n[vilipix](https://www.vilipix.com/)\n\n# AE 插件\n[LookAE](https://www.lookae.com/)\n\n# IDM 绿化\n[IDM](https://www.52pojie.cn/thread-1238671-1-1.html)\n\n# R18 (?)\n[绅士](https://hm01.lol)","source":"_posts/各路资源.md","raw":"---\ntitle: 各路资源\ndate: 2024-02-02 18:15:02\ntags: 资源\ncategories: 收藏\n---\n\n# 看番\n[樱花 I](http://www.yinghuavideo.com/)  \n[樱花 II](http://www.dm99.me/)  \n[TinaAcg](https://www.tinaacg.net/)  \n[zzzFun](http://www.zzzfun.one/vod_type_id_1_page_5.html)  \n\n# 找图\n[pixiv](https://www.pixiv.net)\n[vilipix](https://www.vilipix.com/)\n\n# AE 插件\n[LookAE](https://www.lookae.com/)\n\n# IDM 绿化\n[IDM](https://www.52pojie.cn/thread-1238671-1-1.html)\n\n# R18 (?)\n[绅士](https://hm01.lol)","slug":"各路资源","published":1,"updated":"2024-02-03T12:55:30.222Z","_id":"cls4ikult00007kwkgxqef9xn","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"看番\"><a href=\"#看番\" class=\"headerlink\" title=\"看番\"></a>看番</h1><p><a href=\"http://www.yinghuavideo.com/\">樱花 I</a><br><a href=\"http://www.dm99.me/\">樱花 II</a><br><a href=\"https://www.tinaacg.net/\">TinaAcg</a><br><a href=\"http://www.zzzfun.one/vod_type_id_1_page_5.html\">zzzFun</a>  </p>\n<h1 id=\"找图\"><a href=\"#找图\" class=\"headerlink\" title=\"找图\"></a>找图</h1><p><a href=\"https://www.pixiv.net/\">pixiv</a><br><a href=\"https://www.vilipix.com/\">vilipix</a></p>\n<h1 id=\"AE-插件\"><a href=\"#AE-插件\" class=\"headerlink\" title=\"AE 插件\"></a>AE 插件</h1><p><a href=\"https://www.lookae.com/\">LookAE</a></p>\n<h1 id=\"IDM-绿化\"><a href=\"#IDM-绿化\" class=\"headerlink\" title=\"IDM 绿化\"></a>IDM 绿化</h1><p><a href=\"https://www.52pojie.cn/thread-1238671-1-1.html\">IDM</a></p>\n<h1 id=\"R18\"><a href=\"#R18\" class=\"headerlink\" title=\"R18 (?)\"></a>R18 (?)</h1><p><a href=\"https://hm01.lol/\">绅士</a></p>\n","excerpt":"","more":"<h1 id=\"看番\"><a href=\"#看番\" class=\"headerlink\" title=\"看番\"></a>看番</h1><p><a href=\"http://www.yinghuavideo.com/\">樱花 I</a><br><a href=\"http://www.dm99.me/\">樱花 II</a><br><a href=\"https://www.tinaacg.net/\">TinaAcg</a><br><a href=\"http://www.zzzfun.one/vod_type_id_1_page_5.html\">zzzFun</a>  </p>\n<h1 id=\"找图\"><a href=\"#找图\" class=\"headerlink\" title=\"找图\"></a>找图</h1><p><a href=\"https://www.pixiv.net/\">pixiv</a><br><a href=\"https://www.vilipix.com/\">vilipix</a></p>\n<h1 id=\"AE-插件\"><a href=\"#AE-插件\" class=\"headerlink\" title=\"AE 插件\"></a>AE 插件</h1><p><a href=\"https://www.lookae.com/\">LookAE</a></p>\n<h1 id=\"IDM-绿化\"><a href=\"#IDM-绿化\" class=\"headerlink\" title=\"IDM 绿化\"></a>IDM 绿化</h1><p><a href=\"https://www.52pojie.cn/thread-1238671-1-1.html\">IDM</a></p>\n<h1 id=\"R18\"><a href=\"#R18\" class=\"headerlink\" title=\"R18 (?)\"></a>R18 (?)</h1><p><a href=\"https://hm01.lol/\">绅士</a></p>\n"},{"title":"小游戏","date":"2024-02-02T10:26:09.000Z","_content":"[将军棋](https://generals.io)\n[DigDig](https://digdig.io)\n","source":"_posts/小游戏.md","raw":"---\ntitle: 小游戏\ndate: 2024-02-02 18:26:09\ntags:\ncategories: \n  - 收藏\n---\n[将军棋](https://generals.io)\n[DigDig](https://digdig.io)\n","slug":"小游戏","published":1,"updated":"2024-02-02T10:40:15.880Z","comments":1,"layout":"post","photos":[],"_id":"cls4ikum400017kwkcq5hbkdn","content":"<p><a href=\"https://generals.io/\">将军棋</a><br><a href=\"https://digdig.io/\">DigDig</a></p>\n","excerpt":"","more":"<p><a href=\"https://generals.io/\">将军棋</a><br><a href=\"https://digdig.io/\">DigDig</a></p>\n"},{"title":"实用工具","date":"2024-02-02T10:07:55.000Z","_content":"# 数学\n[Desmos](https://www.desmos.com/calculator?lang=zh-CN)  \n[Geogebra](https://www.geogebra.org/calculator)\n\n# Code\n[Github](https://github.com)  \n[菜鸟教程](https://www.runoob.com)  \n[MingW64 镜像站](https://files.1f0.de/mingw/)  \n[Sunpics 免费图床](https://pics.sunbangyan.cn/)  \n[Netlify](https://app.netlify.com/)\n\n# TTS 语音生成\n[TTS](https://huggingface.co/spaces/Plachta/VITS-Umamusume-voice-synthesizer)  \n\n# 墙\n[Clash](https://shidongli148.xyz/user)\n\n# Other\n[ico](http://www.ico51.cn/)","source":"_posts/实用工具.md","raw":"---\ntitle: 实用工具\ndate: 2024-02-02 18:07:55\ntags: tools\ncategories: \n  - 收藏\n---\n# 数学\n[Desmos](https://www.desmos.com/calculator?lang=zh-CN)  \n[Geogebra](https://www.geogebra.org/calculator)\n\n# Code\n[Github](https://github.com)  \n[菜鸟教程](https://www.runoob.com)  \n[MingW64 镜像站](https://files.1f0.de/mingw/)  \n[Sunpics 免费图床](https://pics.sunbangyan.cn/)  \n[Netlify](https://app.netlify.com/)\n\n# TTS 语音生成\n[TTS](https://huggingface.co/spaces/Plachta/VITS-Umamusume-voice-synthesizer)  \n\n# 墙\n[Clash](https://shidongli148.xyz/user)\n\n# Other\n[ico](http://www.ico51.cn/)","slug":"实用工具","published":1,"updated":"2024-02-02T10:25:27.709Z","comments":1,"layout":"post","photos":[],"_id":"cls4ikumk00087kwkhj9rdeh4","content":"<h1 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h1><p><a href=\"https://www.desmos.com/calculator?lang=zh-CN\">Desmos</a><br><a href=\"https://www.geogebra.org/calculator\">Geogebra</a></p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><p><a href=\"https://github.com/\">Github</a><br><a href=\"https://www.runoob.com/\">菜鸟教程</a><br><a href=\"https://files.1f0.de/mingw/\">MingW64 镜像站</a><br><a href=\"https://pics.sunbangyan.cn/\">Sunpics 免费图床</a><br><a href=\"https://app.netlify.com/\">Netlify</a></p>\n<h1 id=\"TTS-语音生成\"><a href=\"#TTS-语音生成\" class=\"headerlink\" title=\"TTS 语音生成\"></a>TTS 语音生成</h1><p><a href=\"https://huggingface.co/spaces/Plachta/VITS-Umamusume-voice-synthesizer\">TTS</a>  </p>\n<h1 id=\"墙\"><a href=\"#墙\" class=\"headerlink\" title=\"墙\"></a>墙</h1><p><a href=\"https://shidongli148.xyz/user\">Clash</a></p>\n<h1 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h1><p><a href=\"http://www.ico51.cn/\">ico</a></p>\n","excerpt":"","more":"<h1 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h1><p><a href=\"https://www.desmos.com/calculator?lang=zh-CN\">Desmos</a><br><a href=\"https://www.geogebra.org/calculator\">Geogebra</a></p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><p><a href=\"https://github.com/\">Github</a><br><a href=\"https://www.runoob.com/\">菜鸟教程</a><br><a href=\"https://files.1f0.de/mingw/\">MingW64 镜像站</a><br><a href=\"https://pics.sunbangyan.cn/\">Sunpics 免费图床</a><br><a href=\"https://app.netlify.com/\">Netlify</a></p>\n<h1 id=\"TTS-语音生成\"><a href=\"#TTS-语音生成\" class=\"headerlink\" title=\"TTS 语音生成\"></a>TTS 语音生成</h1><p><a href=\"https://huggingface.co/spaces/Plachta/VITS-Umamusume-voice-synthesizer\">TTS</a>  </p>\n<h1 id=\"墙\"><a href=\"#墙\" class=\"headerlink\" title=\"墙\"></a>墙</h1><p><a href=\"https://shidongli148.xyz/user\">Clash</a></p>\n<h1 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h1><p><a href=\"http://www.ico51.cn/\">ico</a></p>\n"},{"title":"自动处理测试数据","date":"2023-11-10T16:00:00.000Z","_content":"# 自动处理测试数据\n`Chose___B`调试机器人PID的时候发现`vex`返回数据只能通过终端输出  \n这实在是太不便于分析数据了  \n写了一下程序来把数据转`excel`\n## python 版本\n```python\nimport pandas as pd\nwith open('data1.txt', 'r', encoding='utf-8') as f:\n    data0 = f.readlines()\n    title = data0[0].strip('\\n').split()\n    data0.pop(0)\n    for i in range(len(data0)):\n        data0[i] = list(map(int,data0[i].strip('\\n').split()))\n    df = pd.DataFrame(data0,columns=title)\n    print(df)\n    df.to_excel(\"data2.xlsx\",index=False)\n```\n\n不过`ChoseB`觉得这样还要打开`excel`才可以看图，实在麻烦  \n又魔改了一下，直接用`matplotlib.pyplot`画图\n\n```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nwith open('data.txt', 'r', encoding='utf-8') as f:\n    data0 = f.readlines()\n    title = data0[0].strip('\\n').split()\n    data0.pop(0)\n    for i in range(len(data0)):\n        data0[i] = list(map(float,data0[i].strip('\\n').split()))\n    df = pd.DataFrame(data0,columns=title)\n    #把原始数据转化为DataFrame\n    df = df.groupby( title[1] , as_index=False).agg(\"mean\")\n    #去除重复数据，让图像更平滑\n\n    plt.figure(figsize=(8,4))\n    plt.xlabel(title[0])\n    plt.ylabel(\"value\")\n    str_title = \"Image of \"\n    for i in title[1::]:\n        if len(str_title)!=9:\n            str_title += ','\n        str_title += i\n    str_title += \" with respect to \"\n    str_title += title[0]\n    plt.title(str_title)\n    for i in range(1,len(title)):\n        plt.plot( list(df[ title[0] ]) , list(df[ title[i] ]) , label= title[i])\n        pass\n    plt.legend()\n    plt.show()\n    #图像输出\n```\n\n_效果如下图_\n\n![](/img/VEX/2023_11_11_testing_data.jpg)\n\n__图表数据__\n\n```\ntime    x       speed\n1       0       100\n41      0.4     100\n70      9.2     100\n80      16      100\n90      25.6    100\n101     36.4    100\n110     44.4    100\n121     51.2    100\n130     58.4    100\n140     66      100\n150     74      100\n161     81.6    100\n170     90      100\n181     98      100\n190     107.2   100\n200     117.2   100\n210     127.6   100\n220     138.4   100\n230     149.2   100\n240     160     100\n250     170.8   100\n260     182     100\n271     193.2   100\n280     204.4   100\n290     215.6   100\n300     226.8   100\n310     238     100\n321     249.2   100\n330     260.8   100\n341     272.4   100\n351     284     100\n360     295.6   100\n370     307.2   100\n380     318.8   100\n391     324.8   100\n400     336.4   100\n411     348     100\n412     348     100\n420     359.6   100\n430     371.2   100\n440     382.8   100\n450     394.4   100\n460     406     100\n471     417.2   100\n481     428.8   100\n491     440.4   100\n500     451.6   100\n510     463.2   100\n520     474.8   100\n530     486.4   100\n540     498     100\n550     509.6   100\n560     521.2   100\n570     533.2   100\n581     544.4   100\n590     556     100\n600     567.6   100\n610     579.6   100\n620     590.8   100\n630     602.4   100\n640     614     100\n650     625.6   100\n660     637.2   100\n671     648.8   100\n681     660.4   100\n690     672     100\n701     683.6   100\n710     695.6   100\n721     707.2   100\n731     719.2   100\n740     730.8   100\n750     742.4   100\n760     754     100\n770     765.2   100\n780     776.4   100\n790     788     100\n800     799.6   100\n810     811.6   100\n820     822.8   100\n831     834     99.6\n841     845.2   92.88\n851     857.2   85.68\n861     868.4   78.96\n871     880     72\n882     891.6   65.04\n891     903.6   57.84\n901     915.2   50.88\n911     926.8   43.92\n921     938.4   36.96\n931     949.6   30.24\n941     961.2   23.28\n951     972.4   16.56\n961     983.6   9.84002\n971     994     3.6\n980     1003.6  3.6\n```","source":"_posts/自动处理测试数据.md","raw":"---\ntitle: 自动处理测试数据\ndate: 2023-11-11\ncategories: VEX\ntags: \n  - VEX\n---\n# 自动处理测试数据\n`Chose___B`调试机器人PID的时候发现`vex`返回数据只能通过终端输出  \n这实在是太不便于分析数据了  \n写了一下程序来把数据转`excel`\n## python 版本\n```python\nimport pandas as pd\nwith open('data1.txt', 'r', encoding='utf-8') as f:\n    data0 = f.readlines()\n    title = data0[0].strip('\\n').split()\n    data0.pop(0)\n    for i in range(len(data0)):\n        data0[i] = list(map(int,data0[i].strip('\\n').split()))\n    df = pd.DataFrame(data0,columns=title)\n    print(df)\n    df.to_excel(\"data2.xlsx\",index=False)\n```\n\n不过`ChoseB`觉得这样还要打开`excel`才可以看图，实在麻烦  \n又魔改了一下，直接用`matplotlib.pyplot`画图\n\n```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nwith open('data.txt', 'r', encoding='utf-8') as f:\n    data0 = f.readlines()\n    title = data0[0].strip('\\n').split()\n    data0.pop(0)\n    for i in range(len(data0)):\n        data0[i] = list(map(float,data0[i].strip('\\n').split()))\n    df = pd.DataFrame(data0,columns=title)\n    #把原始数据转化为DataFrame\n    df = df.groupby( title[1] , as_index=False).agg(\"mean\")\n    #去除重复数据，让图像更平滑\n\n    plt.figure(figsize=(8,4))\n    plt.xlabel(title[0])\n    plt.ylabel(\"value\")\n    str_title = \"Image of \"\n    for i in title[1::]:\n        if len(str_title)!=9:\n            str_title += ','\n        str_title += i\n    str_title += \" with respect to \"\n    str_title += title[0]\n    plt.title(str_title)\n    for i in range(1,len(title)):\n        plt.plot( list(df[ title[0] ]) , list(df[ title[i] ]) , label= title[i])\n        pass\n    plt.legend()\n    plt.show()\n    #图像输出\n```\n\n_效果如下图_\n\n![](/img/VEX/2023_11_11_testing_data.jpg)\n\n__图表数据__\n\n```\ntime    x       speed\n1       0       100\n41      0.4     100\n70      9.2     100\n80      16      100\n90      25.6    100\n101     36.4    100\n110     44.4    100\n121     51.2    100\n130     58.4    100\n140     66      100\n150     74      100\n161     81.6    100\n170     90      100\n181     98      100\n190     107.2   100\n200     117.2   100\n210     127.6   100\n220     138.4   100\n230     149.2   100\n240     160     100\n250     170.8   100\n260     182     100\n271     193.2   100\n280     204.4   100\n290     215.6   100\n300     226.8   100\n310     238     100\n321     249.2   100\n330     260.8   100\n341     272.4   100\n351     284     100\n360     295.6   100\n370     307.2   100\n380     318.8   100\n391     324.8   100\n400     336.4   100\n411     348     100\n412     348     100\n420     359.6   100\n430     371.2   100\n440     382.8   100\n450     394.4   100\n460     406     100\n471     417.2   100\n481     428.8   100\n491     440.4   100\n500     451.6   100\n510     463.2   100\n520     474.8   100\n530     486.4   100\n540     498     100\n550     509.6   100\n560     521.2   100\n570     533.2   100\n581     544.4   100\n590     556     100\n600     567.6   100\n610     579.6   100\n620     590.8   100\n630     602.4   100\n640     614     100\n650     625.6   100\n660     637.2   100\n671     648.8   100\n681     660.4   100\n690     672     100\n701     683.6   100\n710     695.6   100\n721     707.2   100\n731     719.2   100\n740     730.8   100\n750     742.4   100\n760     754     100\n770     765.2   100\n780     776.4   100\n790     788     100\n800     799.6   100\n810     811.6   100\n820     822.8   100\n831     834     99.6\n841     845.2   92.88\n851     857.2   85.68\n861     868.4   78.96\n871     880     72\n882     891.6   65.04\n891     903.6   57.84\n901     915.2   50.88\n911     926.8   43.92\n921     938.4   36.96\n931     949.6   30.24\n941     961.2   23.28\n951     972.4   16.56\n961     983.6   9.84002\n971     994     3.6\n980     1003.6  3.6\n```","slug":"自动处理测试数据","published":1,"updated":"2024-02-02T12:44:01.669Z","_id":"cls4lgm4r0000kkwk28plersj","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"自动处理测试数据\"><a href=\"#自动处理测试数据\" class=\"headerlink\" title=\"自动处理测试数据\"></a>自动处理测试数据</h1><p><code>Chose___B</code>调试机器人PID的时候发现<code>vex</code>返回数据只能通过终端输出<br>这实在是太不便于分析数据了<br>写了一下程序来把数据转<code>excel</code></p>\n<h2 id=\"python-版本\"><a href=\"#python-版本\" class=\"headerlink\" title=\"python 版本\"></a>python 版本</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data1.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    data0 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    title <span class=\"token operator\">=</span> data0<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    data0<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>data0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data0<span class=\"token punctuation\">,</span>columns<span class=\"token operator\">=</span>title<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n    df<span class=\"token punctuation\">.</span>to_excel<span class=\"token punctuation\">(</span><span class=\"token string\">\"data2.xlsx\"</span><span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不过<code>ChoseB</code>觉得这样还要打开<code>excel</code>才可以看图，实在麻烦<br>又魔改了一下，直接用<code>matplotlib.pyplot</code>画图</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    data0 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    title <span class=\"token operator\">=</span> data0<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    data0<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span>data0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data0<span class=\"token punctuation\">,</span>columns<span class=\"token operator\">=</span>title<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#把原始数据转化为DataFrame</span>\n    df <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> as_index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token string\">\"mean\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#去除重复数据，让图像更平滑</span>\n\n    plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n    str_title <span class=\"token operator\">=</span> <span class=\"token string\">\"Image of \"</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>str_title<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">9</span><span class=\"token punctuation\">:</span>\n            str_title <span class=\"token operator\">+=</span> <span class=\"token string\">','</span>\n        str_title <span class=\"token operator\">+=</span> i\n    str_title <span class=\"token operator\">+=</span> <span class=\"token string\">\" with respect to \"</span>\n    str_title <span class=\"token operator\">+=</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span>str_title<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span> title<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span> title<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">pass</span>\n    plt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#图像输出</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em>效果如下图</em></p>\n<p><img src=\"/img/VEX/2023_11_11_testing_data.jpg\"></p>\n<p><strong>图表数据</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">time    x       speed\n1       0       100\n41      0.4     100\n70      9.2     100\n80      16      100\n90      25.6    100\n101     36.4    100\n110     44.4    100\n121     51.2    100\n130     58.4    100\n140     66      100\n150     74      100\n161     81.6    100\n170     90      100\n181     98      100\n190     107.2   100\n200     117.2   100\n210     127.6   100\n220     138.4   100\n230     149.2   100\n240     160     100\n250     170.8   100\n260     182     100\n271     193.2   100\n280     204.4   100\n290     215.6   100\n300     226.8   100\n310     238     100\n321     249.2   100\n330     260.8   100\n341     272.4   100\n351     284     100\n360     295.6   100\n370     307.2   100\n380     318.8   100\n391     324.8   100\n400     336.4   100\n411     348     100\n412     348     100\n420     359.6   100\n430     371.2   100\n440     382.8   100\n450     394.4   100\n460     406     100\n471     417.2   100\n481     428.8   100\n491     440.4   100\n500     451.6   100\n510     463.2   100\n520     474.8   100\n530     486.4   100\n540     498     100\n550     509.6   100\n560     521.2   100\n570     533.2   100\n581     544.4   100\n590     556     100\n600     567.6   100\n610     579.6   100\n620     590.8   100\n630     602.4   100\n640     614     100\n650     625.6   100\n660     637.2   100\n671     648.8   100\n681     660.4   100\n690     672     100\n701     683.6   100\n710     695.6   100\n721     707.2   100\n731     719.2   100\n740     730.8   100\n750     742.4   100\n760     754     100\n770     765.2   100\n780     776.4   100\n790     788     100\n800     799.6   100\n810     811.6   100\n820     822.8   100\n831     834     99.6\n841     845.2   92.88\n851     857.2   85.68\n861     868.4   78.96\n871     880     72\n882     891.6   65.04\n891     903.6   57.84\n901     915.2   50.88\n911     926.8   43.92\n921     938.4   36.96\n931     949.6   30.24\n941     961.2   23.28\n951     972.4   16.56\n961     983.6   9.84002\n971     994     3.6\n980     1003.6  3.6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","excerpt":"","more":"<h1 id=\"自动处理测试数据\"><a href=\"#自动处理测试数据\" class=\"headerlink\" title=\"自动处理测试数据\"></a>自动处理测试数据</h1><p><code>Chose___B</code>调试机器人PID的时候发现<code>vex</code>返回数据只能通过终端输出<br>这实在是太不便于分析数据了<br>写了一下程序来把数据转<code>excel</code></p>\n<h2 id=\"python-版本\"><a href=\"#python-版本\" class=\"headerlink\" title=\"python 版本\"></a>python 版本</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data1.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    data0 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    title <span class=\"token operator\">=</span> data0<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    data0<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>data0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data0<span class=\"token punctuation\">,</span>columns<span class=\"token operator\">=</span>title<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n    df<span class=\"token punctuation\">.</span>to_excel<span class=\"token punctuation\">(</span><span class=\"token string\">\"data2.xlsx\"</span><span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不过<code>ChoseB</code>觉得这样还要打开<code>excel</code>才可以看图，实在麻烦<br>又魔改了一下，直接用<code>matplotlib.pyplot</code>画图</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    data0 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    title <span class=\"token operator\">=</span> data0<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    data0<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span>data0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data0<span class=\"token punctuation\">,</span>columns<span class=\"token operator\">=</span>title<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#把原始数据转化为DataFrame</span>\n    df <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> as_index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token string\">\"mean\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#去除重复数据，让图像更平滑</span>\n\n    plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n    str_title <span class=\"token operator\">=</span> <span class=\"token string\">\"Image of \"</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>str_title<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">9</span><span class=\"token punctuation\">:</span>\n            str_title <span class=\"token operator\">+=</span> <span class=\"token string\">','</span>\n        str_title <span class=\"token operator\">+=</span> i\n    str_title <span class=\"token operator\">+=</span> <span class=\"token string\">\" with respect to \"</span>\n    str_title <span class=\"token operator\">+=</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span>str_title<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span> title<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span> title<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">pass</span>\n    plt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#图像输出</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em>效果如下图</em></p>\n<p><img src=\"/img/VEX/2023_11_11_testing_data.jpg\"></p>\n<p><strong>图表数据</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">time    x       speed\n1       0       100\n41      0.4     100\n70      9.2     100\n80      16      100\n90      25.6    100\n101     36.4    100\n110     44.4    100\n121     51.2    100\n130     58.4    100\n140     66      100\n150     74      100\n161     81.6    100\n170     90      100\n181     98      100\n190     107.2   100\n200     117.2   100\n210     127.6   100\n220     138.4   100\n230     149.2   100\n240     160     100\n250     170.8   100\n260     182     100\n271     193.2   100\n280     204.4   100\n290     215.6   100\n300     226.8   100\n310     238     100\n321     249.2   100\n330     260.8   100\n341     272.4   100\n351     284     100\n360     295.6   100\n370     307.2   100\n380     318.8   100\n391     324.8   100\n400     336.4   100\n411     348     100\n412     348     100\n420     359.6   100\n430     371.2   100\n440     382.8   100\n450     394.4   100\n460     406     100\n471     417.2   100\n481     428.8   100\n491     440.4   100\n500     451.6   100\n510     463.2   100\n520     474.8   100\n530     486.4   100\n540     498     100\n550     509.6   100\n560     521.2   100\n570     533.2   100\n581     544.4   100\n590     556     100\n600     567.6   100\n610     579.6   100\n620     590.8   100\n630     602.4   100\n640     614     100\n650     625.6   100\n660     637.2   100\n671     648.8   100\n681     660.4   100\n690     672     100\n701     683.6   100\n710     695.6   100\n721     707.2   100\n731     719.2   100\n740     730.8   100\n750     742.4   100\n760     754     100\n770     765.2   100\n780     776.4   100\n790     788     100\n800     799.6   100\n810     811.6   100\n820     822.8   100\n831     834     99.6\n841     845.2   92.88\n851     857.2   85.68\n861     868.4   78.96\n871     880     72\n882     891.6   65.04\n891     903.6   57.84\n901     915.2   50.88\n911     926.8   43.92\n921     938.4   36.96\n931     949.6   30.24\n941     961.2   23.28\n951     972.4   16.56\n961     983.6   9.84002\n971     994     3.6\n980     1003.6  3.6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cls44ji2g00016owk6uzwd0r8","category_id":"cls4hbofr0000okwkgcd875lz","_id":"cls4hbofu0002okwkd2wr8i0l"},{"post_id":"cls44ji2m00056owk8dv0apat","category_id":"cls4hbofu0001okwk6yl5d6dy","_id":"cls4hbofu0004okwk4et89gfs"},{"post_id":"cls44ji2j00036owkc8aq5fx0","category_id":"cls4hbofu0003okwkae2k0uhu","_id":"cls4hbofv0005okwk5bxo3ohx"},{"post_id":"cls4ikult00007kwkgxqef9xn","category_id":"cls4ikum700027kwkhoqn7eur","_id":"cls4ikumd00067kwkh34vbb1d"},{"post_id":"cls4ikum400017kwkcq5hbkdn","category_id":"cls4ikum700027kwkhoqn7eur","_id":"cls4ikumd00077kwkbrxs0akx"},{"post_id":"cls4ikumk00087kwkhj9rdeh4","category_id":"cls4ikum700027kwkhoqn7eur","_id":"cls4ikuml000a7kwk937ya138"},{"post_id":"cls4lgm4r0000kkwk28plersj","category_id":"cls4hbofr0000okwkgcd875lz","_id":"cls4lgm4v0002kkwk5ddzb9jc"}],"PostTag":[{"post_id":"cls4ikult00007kwkgxqef9xn","tag_id":"cls4ikum900037kwkeamz4eio","_id":"cls4ikumc00057kwk2r8hcchq"},{"post_id":"cls4ikumk00087kwkhj9rdeh4","tag_id":"cls4ikumk00097kwka6pbgi7j","_id":"cls4ikuml000b7kwkc9ja77id"},{"post_id":"cls4lgm4r0000kkwk28plersj","tag_id":"cls4lgm4u0001kkwk48ez9v8j","_id":"cls4lgm4w0003kkwk8d7e8v5f"}],"Tag":[{"name":"杂谈","_id":"cls44ji2t00076owk313nftwd"},{"name":"资源","_id":"cls4ikum900037kwkeamz4eio"},{"name":"tools","_id":"cls4ikumk00097kwka6pbgi7j"},{"name":"VEX","_id":"cls4lgm4u0001kkwk48ez9v8j"}]}}