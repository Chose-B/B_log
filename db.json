{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/02b34a09.css","path":"css/02b34a09.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/21599f71.css","path":"css/21599f71.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/3a4a90d1.css","path":"css/3a4a90d1.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/32fa10f2.css","path":"css/32fa10f2.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/3c11e750.css","path":"css/3c11e750.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/34fee1b9.css","path":"css/34fee1b9.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/480d1cae.css","path":"css/480d1cae.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/61875ce9.css","path":"css/61875ce9.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/4fe30414.css","path":"css/4fe30414.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/7d333f9e.css","path":"css/7d333f9e.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/90d5ae48.css","path":"css/90d5ae48.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/9bb9a539.css","path":"css/9bb9a539.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/db04a759.css","path":"css/db04a759.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/b4c95347.css","path":"css/b4c95347.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/css/f3729dde.css","path":"css/f3729dde.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/font/linear.woff2","path":"font/linear.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/font/motto.woff","path":"font/motto.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-arrow-left.svg","path":"img/icon-arrow-left.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-book.svg","path":"img/icon-book.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-click.svg","path":"img/icon-click.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-flash.svg","path":"img/icon-flash.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-date.svg","path":"img/icon-date.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-layout.svg","path":"img/icon-layout.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-link.svg","path":"img/icon-link.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-moon.svg","path":"img/icon-moon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-sun.svg","path":"img/icon-sun.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon1.svg","path":"img/icon1.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon3.svg","path":"img/icon3.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/icon2.svg","path":"img/icon2.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/monster.png","path":"img/monster.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/31d6cfe0.js","path":"js/31d6cfe0.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/3cf4fd98.js","path":"js/3cf4fd98.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/4f127d19.js","path":"js/4f127d19.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/4f127d19.js.LICENSE.txt","path":"js/4f127d19.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/62d6af47.js","path":"js/62d6af47.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/5bf38c1b.js","path":"js/5bf38c1b.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/62d6af47.js.LICENSE.txt","path":"js/62d6af47.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/82a967e8.js","path":"js/82a967e8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/a7402528.js","path":"js/a7402528.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/82a967e8.js.LICENSE.txt","path":"js/82a967e8.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/b72255a3.js","path":"js/b72255a3.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/b72255a3.js.LICENSE.txt","path":"js/b72255a3.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/d50bb744.js","path":"js/d50bb744.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/da8f6845.js","path":"js/da8f6845.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/d50bb744.js.LICENSE.txt","path":"js/d50bb744.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/e0a67917.js","path":"js/e0a67917.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/js/f0821b81.js","path":"js/f0821b81.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/100.png","path":"img/qweather-color-icon/100.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/101.png","path":"img/qweather-color-icon/101.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/102.png","path":"img/qweather-color-icon/102.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/104.png","path":"img/qweather-color-icon/104.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/103.png","path":"img/qweather-color-icon/103.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/150.png","path":"img/qweather-color-icon/150.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/151.png","path":"img/qweather-color-icon/151.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/152.png","path":"img/qweather-color-icon/152.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/300.png","path":"img/qweather-color-icon/300.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/153.png","path":"img/qweather-color-icon/153.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/301.png","path":"img/qweather-color-icon/301.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/302.png","path":"img/qweather-color-icon/302.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/303.png","path":"img/qweather-color-icon/303.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/304.png","path":"img/qweather-color-icon/304.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/305.png","path":"img/qweather-color-icon/305.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/306.png","path":"img/qweather-color-icon/306.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/307.png","path":"img/qweather-color-icon/307.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/308.png","path":"img/qweather-color-icon/308.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/309.png","path":"img/qweather-color-icon/309.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/310.png","path":"img/qweather-color-icon/310.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/311.png","path":"img/qweather-color-icon/311.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/312.png","path":"img/qweather-color-icon/312.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/313.png","path":"img/qweather-color-icon/313.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/314.png","path":"img/qweather-color-icon/314.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/315.png","path":"img/qweather-color-icon/315.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/316.png","path":"img/qweather-color-icon/316.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/317.png","path":"img/qweather-color-icon/317.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/318.png","path":"img/qweather-color-icon/318.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/350.png","path":"img/qweather-color-icon/350.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/351.png","path":"img/qweather-color-icon/351.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/399.png","path":"img/qweather-color-icon/399.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/400.png","path":"img/qweather-color-icon/400.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/401.png","path":"img/qweather-color-icon/401.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/402.png","path":"img/qweather-color-icon/402.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/403.png","path":"img/qweather-color-icon/403.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/404.png","path":"img/qweather-color-icon/404.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/406.png","path":"img/qweather-color-icon/406.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/407.png","path":"img/qweather-color-icon/407.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/408.png","path":"img/qweather-color-icon/408.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/410.png","path":"img/qweather-color-icon/410.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/409.png","path":"img/qweather-color-icon/409.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/456.png","path":"img/qweather-color-icon/456.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/457.png","path":"img/qweather-color-icon/457.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/499.png","path":"img/qweather-color-icon/499.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/500.png","path":"img/qweather-color-icon/500.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/502.png","path":"img/qweather-color-icon/502.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/503.png","path":"img/qweather-color-icon/503.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/501.png","path":"img/qweather-color-icon/501.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/504.png","path":"img/qweather-color-icon/504.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/507.png","path":"img/qweather-color-icon/507.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/508.png","path":"img/qweather-color-icon/508.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/509.png","path":"img/qweather-color-icon/509.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/510.png","path":"img/qweather-color-icon/510.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/511.png","path":"img/qweather-color-icon/511.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/512.png","path":"img/qweather-color-icon/512.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/513.png","path":"img/qweather-color-icon/513.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/514.png","path":"img/qweather-color-icon/514.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/515.png","path":"img/qweather-color-icon/515.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/901.png","path":"img/qweather-color-icon/901.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/900.png","path":"img/qweather-color-icon/900.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/999.png","path":"img/qweather-color-icon/999.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/lib/prism/one-dark.css","path":"lib/prism/one-dark.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-cosy/source/lib/prism/one-light.css","path":"lib/prism/one-light.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"37e73468f04610a68b07f1f27c847185c411d652","modified":1706515811155},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1705655663187},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1705655663196},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1705655663196},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1705655663196},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1705655661632},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1705655663188},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1705655663198},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1705655663198},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1705655663198},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1705655663199},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1705655663202},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1705655663201},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1705655663202},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1705655663203},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1705655663204},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1705655663203},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1705655663205},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1705655663205},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1705655663206},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1705655663206},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1705655663206},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1705655663207},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1705655663207},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1705655663208},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1705655663208},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1705655663209},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1705655663200},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1705655663208},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1705655663210},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1705655663209},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1705655663211},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1705655663211},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1705655663207},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1705655661641},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1705655663207},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1705655663209},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1705655661651},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1705655661653},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1705655663053},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1705655661652},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1705655663210},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1705655661643},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1705655661641},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1705655661643},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1705655661648},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1705655661653},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1705655661649},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1705655661655},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1705655661640},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1705655661646},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1705655661645},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1705655661652},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1705655661642},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1705655661647},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1705655661650},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1705655663189},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1705655661653},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1705655661647},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1705655661648},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1705655661639},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1705655663190},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1705655661638},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1705655663185},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1705655663195},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1705655661645},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1705655661643},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1705655661643},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1705655661632},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1705655661655},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1705655663192},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1705655663192},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1705655661653},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1705655663192},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1705655661651},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1705655663194},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1705655663194},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1705655663191},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1705655663193},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1705655663194},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1705655663195},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1705655663194},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1705655663194},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1705655663193},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1705655663184},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1705655663108},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1705655663050},{"_id":"public/uncategorized/hello-world/index.html","hash":"27a4a958827627162a39e8dc77fa72cd1bddc588","modified":1706613112795},{"_id":"public/archives/2024/index.html","hash":"f5fe81b0ab15cb42d7ded4437703ab973d276642","modified":1706617875675},{"_id":"public/archives/index.html","hash":"f5fe81b0ab15cb42d7ded4437703ab973d276642","modified":1706617875675},{"_id":"public/archives/2024/01/index.html","hash":"f5fe81b0ab15cb42d7ded4437703ab973d276642","modified":1706617875675},{"_id":"public/index.html","hash":"029edd845f2eb99c59ca0e7b220d9c326be3e98b","modified":1706613112795},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1705725780262},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1705725780262},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1705725780262},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1705725780262},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1705725780262},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1705725780262},{"_id":"source/_posts/test-post.md","hash":"34d1829fd3704a13ff5331bbbaf5ad3f04a6d1bc","modified":1706510307424},{"_id":"node_modules/hexo-theme-cosy/languages/ar.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758550},{"_id":"node_modules/hexo-theme-cosy/languages/de.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758552},{"_id":"node_modules/hexo-theme-cosy/languages/fr.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758555},{"_id":"node_modules/hexo-theme-cosy/languages/es.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758554},{"_id":"node_modules/hexo-theme-cosy/languages/ja.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758555},{"_id":"node_modules/hexo-theme-cosy/languages/ko.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758556},{"_id":"node_modules/hexo-theme-cosy/languages/ru.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758559},{"_id":"node_modules/hexo-theme-cosy/languages/zh-TW.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513758561},{"_id":"node_modules/hexo-theme-cosy/source/js/31d6cfe0.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706513756443},{"_id":"node_modules/hexo-theme-cosy/README.md","hash":"912cafd130c1e4f78fef763611e3f869717fafc9","modified":1706513757122},{"_id":"node_modules/hexo-theme-cosy/_config.yml","hash":"d28c7e6cf5eef23ee927b6095b5c1e919a3a5226","modified":1706516168970},{"_id":"node_modules/hexo-theme-cosy/package.json","hash":"1804505a45546c287e7dad414684202d2121c886","modified":1706513757122},{"_id":"node_modules/hexo-theme-cosy/languages/en.yml","hash":"8bd1846d121c167e714453163b19ada554135a03","modified":1706513758554},{"_id":"node_modules/hexo-theme-cosy/languages/zh-CN.yml","hash":"37fcee9a660db798ad6884e7300013571fbc30b9","modified":1706513758560},{"_id":"node_modules/hexo-theme-cosy/layout/archive.ejs","hash":"8f5038e2b8d0a6b17ac3561f5365fe84cfd74d94","modified":1706513756436},{"_id":"node_modules/hexo-theme-cosy/layout/airplane.ejs","hash":"28521fce0f5dbd1fd62c612ae68b78ba254faef3","modified":1706513756436},{"_id":"node_modules/hexo-theme-cosy/layout/category-nav.ejs","hash":"84031ca848df2bf10d94fb26f495abeefd23de97","modified":1706513756437},{"_id":"node_modules/hexo-theme-cosy/layout/category.ejs","hash":"35cc300cdf34954c542eaa72dc079764da3435db","modified":1706513756438},{"_id":"node_modules/hexo-theme-cosy/layout/breadcrumb.ejs","hash":"882b9e80f15da716afdc4490ba7f02d2d2447714","modified":1706513756436},{"_id":"node_modules/hexo-theme-cosy/layout/cosy-preference.ejs","hash":"dd57fb0cda2385ef1a895a64e3f4aee874bc0cac","modified":1706513756438},{"_id":"node_modules/hexo-theme-cosy/layout/cosy-resume.ejs","hash":"f3b3516eb22436823b9b9586c742020c50c0eed5","modified":1706513756439},{"_id":"node_modules/hexo-theme-cosy/layout/cosy-roadmap.ejs","hash":"7074a771f61c959e9e5926326dedd5f7b5eec2cf","modified":1706513756440},{"_id":"node_modules/hexo-theme-cosy/layout/layout.ejs","hash":"564f678e9ed92bf088a6a717108693d2bef7bf99","modified":1706513756441},{"_id":"node_modules/hexo-theme-cosy/layout/post.ejs","hash":"aa41f68f2db0d103e85a304146d4173445485ce2","modified":1706513756441},{"_id":"node_modules/hexo-theme-cosy/layout/profile.ejs","hash":"2637484261699e82a30201d1aa33739f28392840","modified":1706513756441},{"_id":"node_modules/hexo-theme-cosy/layout/search.ejs","hash":"feaffd99f16524fa3b84023aea79231c5e8107f1","modified":1706513756442},{"_id":"node_modules/hexo-theme-cosy/layout/tag.ejs","hash":"2213e6ac4c34f547f4022df9729facec1c536b08","modified":1706513756442},{"_id":"node_modules/hexo-theme-cosy/layout/weather.ejs","hash":"ecd33595ce723ce789f8fdd70f620764ee53bfdc","modified":1706513756442},{"_id":"node_modules/hexo-theme-cosy/layout/welcome.ejs","hash":"e4ed80d9b9a0f5181f111b26b2015f818d796ba1","modified":1706513756442},{"_id":"node_modules/hexo-theme-cosy/layout/index.ejs","hash":"06eead2f8f7d3f10cbafbf1895dc4b891c2e6641","modified":1706513756440},{"_id":"node_modules/hexo-theme-cosy/scripts/blog_language.js","hash":"2a1c3b931587eea26a31e4bad12bfb1a207e8b3f","modified":1706513756953},{"_id":"node_modules/hexo-theme-cosy/scripts/generate_category.js","hash":"e6df9e134c08f2215d296ec4ea647aa66286241f","modified":1706513757116},{"_id":"node_modules/hexo-theme-cosy/scripts/generate_excerpt.js","hash":"8e6994550d1f449c2867f602de4c9aabc8cdd334","modified":1706513757117},{"_id":"node_modules/hexo-theme-cosy/scripts/generate_i18n.js","hash":"20f9ac11b1954b1087cc79183bd8c690ea227d36","modified":1706513757117},{"_id":"node_modules/hexo-theme-cosy/scripts/post_status_icon.js","hash":"ce862d1c0cad6881f190f0d9c545517d69f2d1cf","modified":1706513757121},{"_id":"node_modules/hexo-theme-cosy/scripts/generate_nav.js","hash":"7ad2ffc0294c093849084d53ddf99faca050b69a","modified":1706513757118},{"_id":"node_modules/hexo-theme-cosy/scripts/sort_posts.js","hash":"8a65e04a7eae438604cbd64e2cd6d8e1608e7bdb","modified":1706513757121},{"_id":"node_modules/hexo-theme-cosy/scripts/road-to-json.js","hash":"0e43cab0301798beb4c0c98bc97b3737e8290c14","modified":1706513757121},{"_id":"node_modules/hexo-theme-cosy/scripts/mermaid_tag.js","hash":"514160bada4391ff3421f089e9eb92076b5f7e5c","modified":1706513757119},{"_id":"node_modules/hexo-theme-cosy/source/css/21599f71.css","hash":"36fdf9b2129fb6581862bf32b2b51042a21a64af","modified":1706513756422},{"_id":"node_modules/hexo-theme-cosy/source/css/02b34a09.css","hash":"fe35812963ecc7c8fbe5c13c5b3907cfb8c0e008","modified":1706513756420},{"_id":"node_modules/hexo-theme-cosy/source/css/3a4a90d1.css","hash":"4ffc2c5e9f1afd4fa74d7d9b785e0697cd7fb770","modified":1706513756425},{"_id":"node_modules/hexo-theme-cosy/source/css/32fa10f2.css","hash":"081c28411eecfe8759d3f57aa5e6b6dad6c57ee4","modified":1706513756422},{"_id":"node_modules/hexo-theme-cosy/source/css/3c11e750.css","hash":"9ff34f018bd3bc42c237e2ab5eb5cb5f5955b45a","modified":1706513756427},{"_id":"node_modules/hexo-theme-cosy/source/css/34fee1b9.css","hash":"6fc59e6ba8d671c9daaa13e6743a0e52aaa372bc","modified":1706513756424},{"_id":"node_modules/hexo-theme-cosy/source/css/480d1cae.css","hash":"1337c1253d51ff8e13f9a482eab8981fb8ea33c4","modified":1706513756427},{"_id":"node_modules/hexo-theme-cosy/source/css/61875ce9.css","hash":"95ac67388cb7ab8a054170ea5d58ae531673ba9f","modified":1706513756428},{"_id":"node_modules/hexo-theme-cosy/source/css/4fe30414.css","hash":"e8c133e3638517208ae2c8caf3368ca55f89cdf6","modified":1706513756427},{"_id":"node_modules/hexo-theme-cosy/source/css/7d333f9e.css","hash":"fc1056a824db0a849772ac1317fdfad6942b5b32","modified":1706513756428},{"_id":"node_modules/hexo-theme-cosy/source/css/9bb9a539.css","hash":"2f6975bb3744ed17bd00f5ec45459cd17a7ee995","modified":1706513756431},{"_id":"node_modules/hexo-theme-cosy/source/css/90d5ae48.css","hash":"e17db94cf68a8d6da67a162dde1cb22421eda634","modified":1706513756430},{"_id":"node_modules/hexo-theme-cosy/source/css/db04a759.css","hash":"28b40c018f86b9cec1b30500e50dba7b789a3694","modified":1706513756432},{"_id":"node_modules/hexo-theme-cosy/source/css/b4c95347.css","hash":"f22950938d45ab9209826a784baa356ff995c434","modified":1706513756432},{"_id":"node_modules/hexo-theme-cosy/source/css/f3729dde.css","hash":"2a7faa0c3816e3b653fb4540fa63504a26b2051f","modified":1706513756432},{"_id":"node_modules/hexo-theme-cosy/source/font/linear.woff2","hash":"57cac19ad34a50d5a4da5e471e08174c950ce5fb","modified":1706513758546},{"_id":"node_modules/hexo-theme-cosy/source/font/motto.woff","hash":"755620f3bad3ebdf683c074043104d4c11f8d23e","modified":1706513758544},{"_id":"node_modules/hexo-theme-cosy/source/img/favicon.svg","hash":"6e88f8a231bb0a7ae4cc4598f85b6d346a286095","modified":1706513758534},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-arrow-left.svg","hash":"a36362d2555e8b836fcec1f7eeeae4588a871bdd","modified":1706513758535},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-book.svg","hash":"d5e4064468dde477bf9a630c3fababec41316708","modified":1706513758535},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-click.svg","hash":"b10df8b886a8b2d44293b26f42b440c9aedb66a7","modified":1706513758536},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-flash.svg","hash":"dd8e93ef538c0d707c6a34e45f761e648e0178fa","modified":1706513758538},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-date.svg","hash":"b391e34adafed83ef52d836fd6f81618494c4c6b","modified":1706513758537},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-layout.svg","hash":"108ef43073a5b92552dc00744a9f11db8e5ac0a2","modified":1706513758538},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-sun.svg","hash":"57a0ce52ecce7188eaac5e06eab54609a8e572c8","modified":1706513758539},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-link.svg","hash":"436b5ee7ef2d28766e86ac1e65a567d1e786c1b3","modified":1706513758539},{"_id":"node_modules/hexo-theme-cosy/source/img/icon-moon.svg","hash":"032be7ed3d2320f22069e2efb2fb7f60592d6212","modified":1706513758539},{"_id":"node_modules/hexo-theme-cosy/source/img/icon1.svg","hash":"f15fbcecbaa00db99aeaca9807922514f6452d02","modified":1706513758540},{"_id":"node_modules/hexo-theme-cosy/source/img/icon3.svg","hash":"a1a9dcee7703ec48f2d92b0d533b62fef16097fc","modified":1706513758540},{"_id":"node_modules/hexo-theme-cosy/source/img/icon2.svg","hash":"cc598540651110d977afd26dc0a1f01bbc95bf21","modified":1706513758540},{"_id":"node_modules/hexo-theme-cosy/source/img/monster.png","hash":"ce3acb0b24675ed95b1d1ec75a3459cb127759a6","modified":1706513758229},{"_id":"node_modules/hexo-theme-cosy/source/js/3cf4fd98.js","hash":"0d51155f6dc08d1d8c693d210c1407b2e26b5685","modified":1706513756443},{"_id":"node_modules/hexo-theme-cosy/source/js/4f127d19.js","hash":"6de1a413d02979b20926ab756c9c984b17c5809d","modified":1706513756598},{"_id":"node_modules/hexo-theme-cosy/source/js/4f127d19.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706513758540},{"_id":"node_modules/hexo-theme-cosy/source/js/62d6af47.js","hash":"47a439c684732100a6c64c50433796d3a54ada08","modified":1706513756940},{"_id":"node_modules/hexo-theme-cosy/source/js/5bf38c1b.js","hash":"e37e9ba275ab0d2ae27057f101a5c0c8e52c5104","modified":1706513756600},{"_id":"node_modules/hexo-theme-cosy/source/js/62d6af47.js.LICENSE.txt","hash":"a8820a0de0a074d43cb1f7db8eee78c8dbfd4d87","modified":1706513758540},{"_id":"node_modules/hexo-theme-cosy/source/js/a7402528.js","hash":"e97c03568c8517d7366892158c86213d949a7856","modified":1706513756950},{"_id":"node_modules/hexo-theme-cosy/source/js/82a967e8.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706513758542},{"_id":"node_modules/hexo-theme-cosy/source/js/b72255a3.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706513758542},{"_id":"node_modules/hexo-theme-cosy/source/js/d50bb744.js","hash":"8e74a77f70a57cbe9845e97a9e304daaee58a1f0","modified":1706513757110},{"_id":"node_modules/hexo-theme-cosy/source/js/da8f6845.js","hash":"999c5bb86a8d220b065da973c32699402b4f3d8c","modified":1706513757113},{"_id":"node_modules/hexo-theme-cosy/source/js/d50bb744.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706513758543},{"_id":"node_modules/hexo-theme-cosy/source/js/e0a67917.js","hash":"2e30e8aa1bdd93d1005a36e4543d5761a719a707","modified":1706513757113},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/100.png","hash":"ad42001979a0dbb8807c128b871dc28161b8c191","modified":1706513757124},{"_id":"node_modules/hexo-theme-cosy/source/js/f0821b81.js","hash":"9049df02eb79a5574bfb0a79127f0b8828e15b95","modified":1706513757116},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/101.png","hash":"890888efd8db7a3f29427e476ce3433f4a564321","modified":1706513757125},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/102.png","hash":"74d7cfa4f23850a456c16d0e0956264e920f7a85","modified":1706513757125},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/104.png","hash":"36add97ed90d57e691e6e15d3456898a42dccb16","modified":1706513757136},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/103.png","hash":"656d81bd50728c7ba62572e838db7c355d522e51","modified":1706513757125},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/150.png","hash":"572b4a6e56271b89208daa538f02416d50249347","modified":1706513757137},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/151.png","hash":"8041e428fc369be40f9e993f4f718ae99c7662fa","modified":1706513757138},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/152.png","hash":"3ec0a1ac063ae068cc9d728eef88a9a6d7859153","modified":1706513757139},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/300.png","hash":"bd67445ff764f3f1d4eeb81625372585bb537b07","modified":1706513757140},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/153.png","hash":"3eb50d325ec84e1248585d347471b1093a83909c","modified":1706513757139},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/301.png","hash":"cc616d4c7ae6abbe0338f418fe35acce93c46164","modified":1706513757145},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/302.png","hash":"371fa4d79b6a93573fde068f179829ed97c8f4f8","modified":1706513757322},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/303.png","hash":"453442f93e62ac98884aae173530f26272d97ad6","modified":1706513757324},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/304.png","hash":"3669eb04ee87dca604f70f7404c0ecb303d17af4","modified":1706513757482},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/305.png","hash":"618e18bf06b5d12d64269b30d6f044fc356d24b0","modified":1706513757489},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/306.png","hash":"69b55e71e8da4e0fe223ff76b9a68f98e4134b3d","modified":1706513757490},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/307.png","hash":"02a08e002d21a10e0854b1036556fb81b0308be3","modified":1706513757494},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/308.png","hash":"ace460a40174aa90dde6c2ef71663f30cec24193","modified":1706513757502},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/309.png","hash":"c5140be49b8936e5d30380f14f7dce49a7be7cb5","modified":1706513757505},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/310.png","hash":"9315203066fa97a7d10f2a6fb0fd3ce5b7805126","modified":1706513757682},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/311.png","hash":"ab5c5059f354da2f9525b30ee81312fbfa4749bf","modified":1706513757683},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/312.png","hash":"c672d7373fce89803b5e8d06420e158f11ea346f","modified":1706513757685},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/313.png","hash":"afa70386816623e847c09f51032212d2520d1740","modified":1706513757687},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/314.png","hash":"110f9fe81f80b8f372b7472fbcfd9c0071b33151","modified":1706513757687},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/315.png","hash":"2100a23ee6d584227715164263c43875e8d8946c","modified":1706513757996},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/316.png","hash":"4de1ac0254507c5509fc4d04e208fd81d2af7b34","modified":1706513757997},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/317.png","hash":"7e60725abd3b91b9ba388ad9b9f642690c39ff9e","modified":1706513757998},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/318.png","hash":"7a042920165671cdbfef6c58596a80f9a1f6f016","modified":1706513757998},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/350.png","hash":"f29c1aa55c4afd3df17aef7885a35b0bd177d771","modified":1706513758002},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/351.png","hash":"3ab30470a65acb8fe879aa7adc9064284abd8407","modified":1706513758003},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/399.png","hash":"993ddcd386480d211ec9b2e56656d659bb6c453b","modified":1706513758004},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/400.png","hash":"79444a48a0e416e4cac1eb319496f495091f4c86","modified":1706513758005},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/401.png","hash":"279c8bc00b4e57db9b1095df64044ec80b37edb0","modified":1706513758006},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/402.png","hash":"033fc236885a2bf7007d97eb054b0c5885035be5","modified":1706513758007},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/404.png","hash":"112e73e641d1a30712993b5dca681a5e033831ee","modified":1706513758010},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/406.png","hash":"b9cd0421518e0a76041285e5bf0c1666a93428a5","modified":1706513758011},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/407.png","hash":"82223792a5e3e556148b4663f195ef22044c143a","modified":1706513758036},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/403.png","hash":"dfad1a525c4467c3e95e281befdf813e145620df","modified":1706513758009},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/408.png","hash":"02b34a66020c9f3e5173702d30e5a7b69139bade","modified":1706513758037},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/410.png","hash":"9170b32d6b7f644ce49116f3e35d35558bae6536","modified":1706513758038},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/409.png","hash":"aed269911d0249a700b4f3890c424f00f4a27e1e","modified":1706513758037},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/456.png","hash":"dd16b957cc544730afab8d2712821dd6c77f5167","modified":1706513758039},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/457.png","hash":"5dffe7e9139bfb697b046c427b9ef0ed6ffa95c7","modified":1706513758041},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/499.png","hash":"2b51631144a7c0f813b6425d4daa30c4d4e8bd38","modified":1706513758041},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/500.png","hash":"ddb4712d8f19bb8c197e600000dd2d51049f970d","modified":1706513758042},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/502.png","hash":"4146081a2635ff88fa14e38ed8d360d3b4fa74dd","modified":1706513758176},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/503.png","hash":"9415147c4bcebadd7f3089339064b8120c8d4089","modified":1706513758176},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/504.png","hash":"defba93520719f72b217583062ccc79abd5b445e","modified":1706513758206},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/501.png","hash":"ddb4712d8f19bb8c197e600000dd2d51049f970d","modified":1706513758042},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/507.png","hash":"426d5a73a482ac5721e7da2141e4fe704f50b608","modified":1706513758207},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/508.png","hash":"ae98a3217df26021ec2f667f099d27575c912bf4","modified":1706513758208},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/509.png","hash":"3bc779bfbcab94a79c91b26288e2e7b67412d15e","modified":1706513758219},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/510.png","hash":"524131e401d0b150dab2733af336f4649b8ade74","modified":1706513758221},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/511.png","hash":"e2efe07a29446ebecd313ccd8a2c7d57a670f203","modified":1706513758222},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/512.png","hash":"64e11f225c35caa6ef2612d613026c52cfd3557e","modified":1706513758223},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/513.png","hash":"ceff3dfd109a990c9595276ad6b56061bb662e5e","modified":1706513758224},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/514.png","hash":"fdf992021ff20e1ffe1b19f0b918aa35204f22e7","modified":1706513758225},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/515.png","hash":"fdf992021ff20e1ffe1b19f0b918aa35204f22e7","modified":1706513758225},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/901.png","hash":"f6b3f1cd64e9c325e9dc3ab42469baa5c5119c2d","modified":1706513758227},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/900.png","hash":"6eacf8df641c6096feb746c7544a825d3c65bf47","modified":1706513758227},{"_id":"node_modules/hexo-theme-cosy/source/lib/prism/one-dark.css","hash":"5967bad8dd34b1eb244956064ae7870f62e6cd75","modified":1706513756434},{"_id":"node_modules/hexo-theme-cosy/source/lib/prism/one-light.css","hash":"dd7660b35884866eee48f069e876f1c29661a150","modified":1706513756435},{"_id":"node_modules/hexo-theme-cosy/source/img/qweather-color-icon/999.png","hash":"74e4fa5bdd815d988b55525d4e7f6d40bf1080d4","modified":1706513758227},{"_id":"node_modules/hexo-theme-cosy/source/js/82a967e8.js","hash":"4f64c4ba7ad28f2f688f420a1a8e986eb358fa7b","modified":1706513756949},{"_id":"node_modules/hexo-theme-cosy/source/js/b72255a3.js","hash":"94ca9e409cf54ce10d8adcd9118b7459ecf417db","modified":1706513756952},{"_id":"source/_posts/路桥第一马戏团出道录.md","hash":"51551393c7512b7e1fcb03dad096ab9388abbd90","modified":1706598884909},{"_id":"source/resume/index.md","hash":"0d370ef8e9ef8bf7f882d7242e3bc860caf28a6d","modified":1706600336649},{"_id":"source/roadmap/index.md","hash":"3bef4216ac64d8f5412adc20862876ce966262c9","modified":1706599635468},{"_id":"public/resume/index.html","hash":"e1c7834b6131b06cf0fcd137451bc6c7472d076b","modified":1706600409332},{"_id":"public/uncategorized/路桥第一马戏团出道录/index.html","hash":"1d8e67346e81378def05d16315b156bb65df92f1","modified":1706613112795},{"_id":"public/roadmap/index.html","hash":"fe709a050413cc8c362ad5d1a15127cbb425c425","modified":1706600409332},{"_id":"public/tags/杂谈/index.html","hash":"d55c221edb961042aa65644df03775958100fa92","modified":1706613112795},{"_id":"public/archives/2023/index.html","hash":"f5fe81b0ab15cb42d7ded4437703ab973d276642","modified":1706617875675},{"_id":"public/archives/2023/12/index.html","hash":"f5fe81b0ab15cb42d7ded4437703ab973d276642","modified":1706617875675},{"_id":"public/font/linear.woff2","hash":"57cac19ad34a50d5a4da5e471e08174c950ce5fb","modified":1706600409332},{"_id":"public/img/icon-book.svg","hash":"d5e4064468dde477bf9a630c3fababec41316708","modified":1706600409332},{"_id":"public/img/icon-arrow-left.svg","hash":"a36362d2555e8b836fcec1f7eeeae4588a871bdd","modified":1706600409332},{"_id":"public/img/icon-click.svg","hash":"b10df8b886a8b2d44293b26f42b440c9aedb66a7","modified":1706600409332},{"_id":"public/font/motto.woff","hash":"755620f3bad3ebdf683c074043104d4c11f8d23e","modified":1706600409332},{"_id":"public/img/favicon.svg","hash":"6e88f8a231bb0a7ae4cc4598f85b6d346a286095","modified":1706600409332},{"_id":"public/img/icon-date.svg","hash":"b391e34adafed83ef52d836fd6f81618494c4c6b","modified":1706600409332},{"_id":"public/img/icon-flash.svg","hash":"dd8e93ef538c0d707c6a34e45f761e648e0178fa","modified":1706600409332},{"_id":"public/img/icon-layout.svg","hash":"108ef43073a5b92552dc00744a9f11db8e5ac0a2","modified":1706600409332},{"_id":"public/img/icon-link.svg","hash":"436b5ee7ef2d28766e86ac1e65a567d1e786c1b3","modified":1706600409332},{"_id":"public/img/icon1.svg","hash":"f15fbcecbaa00db99aeaca9807922514f6452d02","modified":1706600409332},{"_id":"public/img/icon-moon.svg","hash":"032be7ed3d2320f22069e2efb2fb7f60592d6212","modified":1706600409332},{"_id":"public/js/4f127d19.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706600409332},{"_id":"public/img/icon-sun.svg","hash":"57a0ce52ecce7188eaac5e06eab54609a8e572c8","modified":1706600409332},{"_id":"public/js/82a967e8.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706600409332},{"_id":"public/img/icon3.svg","hash":"a1a9dcee7703ec48f2d92b0d533b62fef16097fc","modified":1706600409332},{"_id":"public/js/b72255a3.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706600409332},{"_id":"public/js/d50bb744.js.LICENSE.txt","hash":"77d59f3fbe8514b6b966e343e76baf95d5231806","modified":1706600409332},{"_id":"public/img/qweather-color-icon/104.png","hash":"36add97ed90d57e691e6e15d3456898a42dccb16","modified":1706600409332},{"_id":"public/img/icon2.svg","hash":"cc598540651110d977afd26dc0a1f01bbc95bf21","modified":1706600409332},{"_id":"public/img/qweather-color-icon/100.png","hash":"ad42001979a0dbb8807c128b871dc28161b8c191","modified":1706600409332},{"_id":"public/img/qweather-color-icon/101.png","hash":"890888efd8db7a3f29427e476ce3433f4a564321","modified":1706600409332},{"_id":"public/img/monster.png","hash":"ce3acb0b24675ed95b1d1ec75a3459cb127759a6","modified":1706600409332},{"_id":"public/img/qweather-color-icon/103.png","hash":"656d81bd50728c7ba62572e838db7c355d522e51","modified":1706600409332},{"_id":"public/img/qweather-color-icon/102.png","hash":"74d7cfa4f23850a456c16d0e0956264e920f7a85","modified":1706600409332},{"_id":"public/img/qweather-color-icon/151.png","hash":"8041e428fc369be40f9e993f4f718ae99c7662fa","modified":1706600409332},{"_id":"public/img/qweather-color-icon/150.png","hash":"572b4a6e56271b89208daa538f02416d50249347","modified":1706600409332},{"_id":"public/img/qweather-color-icon/152.png","hash":"3ec0a1ac063ae068cc9d728eef88a9a6d7859153","modified":1706600409332},{"_id":"public/img/qweather-color-icon/153.png","hash":"3eb50d325ec84e1248585d347471b1093a83909c","modified":1706600409332},{"_id":"public/img/qweather-color-icon/300.png","hash":"bd67445ff764f3f1d4eeb81625372585bb537b07","modified":1706600409332},{"_id":"public/img/qweather-color-icon/302.png","hash":"371fa4d79b6a93573fde068f179829ed97c8f4f8","modified":1706600409332},{"_id":"public/img/qweather-color-icon/305.png","hash":"618e18bf06b5d12d64269b30d6f044fc356d24b0","modified":1706600409332},{"_id":"public/img/qweather-color-icon/303.png","hash":"453442f93e62ac98884aae173530f26272d97ad6","modified":1706600409332},{"_id":"public/img/qweather-color-icon/304.png","hash":"3669eb04ee87dca604f70f7404c0ecb303d17af4","modified":1706600409332},{"_id":"public/img/qweather-color-icon/301.png","hash":"cc616d4c7ae6abbe0338f418fe35acce93c46164","modified":1706600409332},{"_id":"public/img/qweather-color-icon/308.png","hash":"ace460a40174aa90dde6c2ef71663f30cec24193","modified":1706600409332},{"_id":"public/img/qweather-color-icon/307.png","hash":"02a08e002d21a10e0854b1036556fb81b0308be3","modified":1706600409332},{"_id":"public/img/qweather-color-icon/309.png","hash":"c5140be49b8936e5d30380f14f7dce49a7be7cb5","modified":1706600409332},{"_id":"public/img/qweather-color-icon/310.png","hash":"9315203066fa97a7d10f2a6fb0fd3ce5b7805126","modified":1706600409332},{"_id":"public/img/qweather-color-icon/306.png","hash":"69b55e71e8da4e0fe223ff76b9a68f98e4134b3d","modified":1706600409332},{"_id":"public/img/qweather-color-icon/312.png","hash":"c672d7373fce89803b5e8d06420e158f11ea346f","modified":1706600409332},{"_id":"public/img/qweather-color-icon/313.png","hash":"afa70386816623e847c09f51032212d2520d1740","modified":1706600409332},{"_id":"public/img/qweather-color-icon/314.png","hash":"110f9fe81f80b8f372b7472fbcfd9c0071b33151","modified":1706600409332},{"_id":"public/img/qweather-color-icon/315.png","hash":"2100a23ee6d584227715164263c43875e8d8946c","modified":1706600409332},{"_id":"public/img/qweather-color-icon/311.png","hash":"ab5c5059f354da2f9525b30ee81312fbfa4749bf","modified":1706600409332},{"_id":"public/img/qweather-color-icon/316.png","hash":"4de1ac0254507c5509fc4d04e208fd81d2af7b34","modified":1706600409332},{"_id":"public/img/qweather-color-icon/317.png","hash":"7e60725abd3b91b9ba388ad9b9f642690c39ff9e","modified":1706600409332},{"_id":"public/img/qweather-color-icon/318.png","hash":"7a042920165671cdbfef6c58596a80f9a1f6f016","modified":1706600409332},{"_id":"public/img/qweather-color-icon/351.png","hash":"3ab30470a65acb8fe879aa7adc9064284abd8407","modified":1706600409332},{"_id":"public/img/qweather-color-icon/350.png","hash":"f29c1aa55c4afd3df17aef7885a35b0bd177d771","modified":1706600409332},{"_id":"public/img/qweather-color-icon/399.png","hash":"993ddcd386480d211ec9b2e56656d659bb6c453b","modified":1706600409332},{"_id":"public/img/qweather-color-icon/402.png","hash":"033fc236885a2bf7007d97eb054b0c5885035be5","modified":1706600409332},{"_id":"public/img/qweather-color-icon/401.png","hash":"279c8bc00b4e57db9b1095df64044ec80b37edb0","modified":1706600409332},{"_id":"public/img/qweather-color-icon/400.png","hash":"79444a48a0e416e4cac1eb319496f495091f4c86","modified":1706600409332},{"_id":"public/img/qweather-color-icon/403.png","hash":"dfad1a525c4467c3e95e281befdf813e145620df","modified":1706600409332},{"_id":"public/js/62d6af47.js.LICENSE.txt","hash":"a8820a0de0a074d43cb1f7db8eee78c8dbfd4d87","modified":1706600409332},{"_id":"public/img/qweather-color-icon/404.png","hash":"112e73e641d1a30712993b5dca681a5e033831ee","modified":1706600409332},{"_id":"public/img/qweather-color-icon/406.png","hash":"b9cd0421518e0a76041285e5bf0c1666a93428a5","modified":1706600409332},{"_id":"public/img/qweather-color-icon/407.png","hash":"82223792a5e3e556148b4663f195ef22044c143a","modified":1706600409332},{"_id":"public/img/qweather-color-icon/410.png","hash":"9170b32d6b7f644ce49116f3e35d35558bae6536","modified":1706600409332},{"_id":"public/img/qweather-color-icon/456.png","hash":"dd16b957cc544730afab8d2712821dd6c77f5167","modified":1706600409332},{"_id":"public/img/qweather-color-icon/457.png","hash":"5dffe7e9139bfb697b046c427b9ef0ed6ffa95c7","modified":1706600409332},{"_id":"public/img/qweather-color-icon/409.png","hash":"aed269911d0249a700b4f3890c424f00f4a27e1e","modified":1706600409332},{"_id":"public/img/qweather-color-icon/500.png","hash":"ddb4712d8f19bb8c197e600000dd2d51049f970d","modified":1706600409332},{"_id":"public/img/qweather-color-icon/502.png","hash":"4146081a2635ff88fa14e38ed8d360d3b4fa74dd","modified":1706600409332},{"_id":"public/img/qweather-color-icon/504.png","hash":"defba93520719f72b217583062ccc79abd5b445e","modified":1706600409332},{"_id":"public/img/qweather-color-icon/503.png","hash":"9415147c4bcebadd7f3089339064b8120c8d4089","modified":1706600409332},{"_id":"public/img/qweather-color-icon/501.png","hash":"ddb4712d8f19bb8c197e600000dd2d51049f970d","modified":1706600409332},{"_id":"public/img/qweather-color-icon/507.png","hash":"426d5a73a482ac5721e7da2141e4fe704f50b608","modified":1706600409332},{"_id":"public/css/3a4a90d1.css","hash":"4ffc2c5e9f1afd4fa74d7d9b785e0697cd7fb770","modified":1706600409332},{"_id":"public/css/02b34a09.css","hash":"fe35812963ecc7c8fbe5c13c5b3907cfb8c0e008","modified":1706600409332},{"_id":"public/css/34fee1b9.css","hash":"6fc59e6ba8d671c9daaa13e6743a0e52aaa372bc","modified":1706600409332},{"_id":"public/css/3c11e750.css","hash":"9ff34f018bd3bc42c237e2ab5eb5cb5f5955b45a","modified":1706600409332},{"_id":"public/css/32fa10f2.css","hash":"081c28411eecfe8759d3f57aa5e6b6dad6c57ee4","modified":1706600409332},{"_id":"public/css/21599f71.css","hash":"36fdf9b2129fb6581862bf32b2b51042a21a64af","modified":1706600409332},{"_id":"public/css/4fe30414.css","hash":"e8c133e3638517208ae2c8caf3368ca55f89cdf6","modified":1706600409332},{"_id":"public/css/7d333f9e.css","hash":"fc1056a824db0a849772ac1317fdfad6942b5b32","modified":1706600409332},{"_id":"public/css/480d1cae.css","hash":"1337c1253d51ff8e13f9a482eab8981fb8ea33c4","modified":1706600409332},{"_id":"public/css/61875ce9.css","hash":"95ac67388cb7ab8a054170ea5d58ae531673ba9f","modified":1706600409332},{"_id":"public/css/db04a759.css","hash":"28b40c018f86b9cec1b30500e50dba7b789a3694","modified":1706600409332},{"_id":"public/css/f3729dde.css","hash":"2a7faa0c3816e3b653fb4540fa63504a26b2051f","modified":1706600409332},{"_id":"public/css/b4c95347.css","hash":"f22950938d45ab9209826a784baa356ff995c434","modified":1706600409332},{"_id":"public/css/90d5ae48.css","hash":"e17db94cf68a8d6da67a162dde1cb22421eda634","modified":1706600409332},{"_id":"public/css/9bb9a539.css","hash":"2f6975bb3744ed17bd00f5ec45459cd17a7ee995","modified":1706600409332},{"_id":"public/img/qweather-color-icon/508.png","hash":"ae98a3217df26021ec2f667f099d27575c912bf4","modified":1706600409332},{"_id":"public/img/qweather-color-icon/511.png","hash":"e2efe07a29446ebecd313ccd8a2c7d57a670f203","modified":1706600409332},{"_id":"public/img/qweather-color-icon/510.png","hash":"524131e401d0b150dab2733af336f4649b8ade74","modified":1706600409332},{"_id":"public/img/qweather-color-icon/509.png","hash":"3bc779bfbcab94a79c91b26288e2e7b67412d15e","modified":1706600409332},{"_id":"public/img/qweather-color-icon/499.png","hash":"2b51631144a7c0f813b6425d4daa30c4d4e8bd38","modified":1706600409332},{"_id":"public/img/qweather-color-icon/513.png","hash":"ceff3dfd109a990c9595276ad6b56061bb662e5e","modified":1706600409332},{"_id":"public/img/qweather-color-icon/512.png","hash":"64e11f225c35caa6ef2612d613026c52cfd3557e","modified":1706600409332},{"_id":"public/img/qweather-color-icon/515.png","hash":"fdf992021ff20e1ffe1b19f0b918aa35204f22e7","modified":1706600409332},{"_id":"public/img/qweather-color-icon/514.png","hash":"fdf992021ff20e1ffe1b19f0b918aa35204f22e7","modified":1706600409332},{"_id":"public/img/qweather-color-icon/901.png","hash":"f6b3f1cd64e9c325e9dc3ab42469baa5c5119c2d","modified":1706600409332},{"_id":"public/img/qweather-color-icon/900.png","hash":"6eacf8df641c6096feb746c7544a825d3c65bf47","modified":1706600409332},{"_id":"public/img/qweather-color-icon/408.png","hash":"02b34a66020c9f3e5173702d30e5a7b69139bade","modified":1706600409332},{"_id":"public/img/qweather-color-icon/999.png","hash":"74e4fa5bdd815d988b55525d4e7f6d40bf1080d4","modified":1706600409332},{"_id":"public/js/31d6cfe0.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706600409332},{"_id":"public/js/3cf4fd98.js","hash":"0d51155f6dc08d1d8c693d210c1407b2e26b5685","modified":1706600409332},{"_id":"public/js/62d6af47.js","hash":"47a439c684732100a6c64c50433796d3a54ada08","modified":1706600409332},{"_id":"public/js/a7402528.js","hash":"e97c03568c8517d7366892158c86213d949a7856","modified":1706600409332},{"_id":"public/js/82a967e8.js","hash":"4f64c4ba7ad28f2f688f420a1a8e986eb358fa7b","modified":1706600409332},{"_id":"public/js/5bf38c1b.js","hash":"e37e9ba275ab0d2ae27057f101a5c0c8e52c5104","modified":1706600409332},{"_id":"public/js/da8f6845.js","hash":"999c5bb86a8d220b065da973c32699402b4f3d8c","modified":1706600409332},{"_id":"public/js/f0821b81.js","hash":"9049df02eb79a5574bfb0a79127f0b8828e15b95","modified":1706600409332},{"_id":"public/js/4f127d19.js","hash":"6de1a413d02979b20926ab756c9c984b17c5809d","modified":1706600409332},{"_id":"public/js/e0a67917.js","hash":"2e30e8aa1bdd93d1005a36e4543d5761a719a707","modified":1706600409332},{"_id":"public/js/b72255a3.js","hash":"94ca9e409cf54ce10d8adcd9118b7459ecf417db","modified":1706600409332},{"_id":"public/js/d50bb744.js","hash":"8e74a77f70a57cbe9845e97a9e304daaee58a1f0","modified":1706600409332},{"_id":"public/lib/prism/one-dark.css","hash":"5967bad8dd34b1eb244956064ae7870f62e6cd75","modified":1706600409332},{"_id":"public/lib/prism/one-light.css","hash":"dd7660b35884866eee48f069e876f1c29661a150","modified":1706600409332},{"_id":"source/cosy-resume/index.md","hash":"afa74c5775b557e87222eacbabde04b47dbabbe0","modified":1706615509909},{"_id":"source/cosy-roadmap/index.md","hash":"3dbe91e4f2c2244ec4bba21f6531dc99d511f887","modified":1706615508683},{"_id":"public/cosy-roadmap/index.html","hash":"2f20a4cfabd918947ab264315623f71cd44e48aa","modified":1706615525432},{"_id":"public/cosy-resume/index.html","hash":"5e811f3116f31ea5a82e942c493628b9b1d3f2f8","modified":1706615525432},{"_id":"source/cosy-preference/index.md","hash":"70dd782bbc0fb4966fabf70670f988e82923cc07","modified":1706613063606},{"_id":"public/cosy-preference/index.html","hash":"ad010f471343544b626bb9afc04b543b73e915da","modified":1706613112795},{"_id":"source/likes/index.md","hash":"e7a3a8293bf042e66ecf27b07a4706aeda18289f","modified":1706615022958},{"_id":"public/likes/index.html","hash":"fbb8a89020b2dfd2fbbff1a80774226e4ad8cc91","modified":1706615525432},{"_id":"source/likes/实用工具/index.md","hash":"c96bb92eb9c05f298a2b967d8d7ff79964152e57","modified":1706614660891},{"_id":"public/likes/实用工具/index.html","hash":"bfa6a6c518b3c319c8319669f02c38b01fb90c6a","modified":1706614719068},{"_id":"source/likes/tools/index.md","hash":"c96bb92eb9c05f298a2b967d8d7ff79964152e57","modified":1706614934999},{"_id":"public/likes/tools/index.html","hash":"1f9be55fbbc5b5540e236558c2d9abb4d16cf143","modified":1706614946425},{"_id":"source/_posts/VEX机器人程序.md","hash":"bed7e347ec78100a1d80dd7e81dd76967fa80578","modified":1706617870651},{"_id":"public/uncategorized/vex机器人程序/index.html","hash":"cf61276f01b2a9e6983a18cc0af69ae99dc3d394","modified":1706617875675},{"_id":"public/tags/VEX/index.html","hash":"3667a0616d8df9f02176c582e4d8467cf1745ae6","modified":1706615855476}],"Category":[],"Data":[],"Page":[{"title":"时间线","layout":"cosy-roadmap","initYear":2024,"years":{"2024":[{"title":"Chose_B 搭建自己的博客","start":"01-29","end":"02-03"}]},"_content":"","source":"cosy-roadmap/index.md","raw":"---\ntitle: 时间线\nlayout: cosy-roadmap\ninitYear: 2024\nyears:\n  2024:\n    - title: Chose_B 搭建自己的博客\n      start: 01-29\n      end: 02-03\n---\n","date":"2024-01-30T11:51:48.683Z","updated":"2024-01-30T11:51:48.683Z","path":"cosy-roadmap/index.html","_id":"cls01wqog00007owkew2p2twn","comments":1,"content":"","excerpt":"","more":""},{"title":"个人简历","layout":"cosy-resume","avatar":"/img/avatar.png","name":"Chose_B","role":"Full Stack","email":"L666no6@163.com","phone":"+86 135-8607-2185","birth":"Jun 18, 2007","location":"Taizhou, China","social":[{"name":"github","link":"https://github.com/Chose-B","icon":"svg"}],"about":["是口才不行的INTP","Chose_B名字的来源是初中的谐音梗"],"skill":["浅会一点C++ 。不过不再参加OI之后水平就一直原地踏步了","偶尔会剪视频，不过技术还不够成熟"],"education":[{"school":"台州市路桥中学","time":"2022-2025"}],"_content":"","source":"cosy-resume/index.md","raw":"---\ntitle: 个人简历\nlayout: cosy-resume\navatar: /img/avatar.png\nname: Chose_B\nrole: Full Stack\nemail: L666no6@163.com\nphone: +86 135-8607-2185\nbirth: Jun 18, 2007\nlocation: Taizhou, China\nsocial:\n  - name: github\n    link: https://github.com/Chose-B\n    icon: svg\n\nabout:\n  - 是口才不行的INTP\n  - Chose_B名字的来源是初中的谐音梗\n\nskill:\n  - 浅会一点C++ 。不过不再参加OI之后水平就一直原地踏步了\n  - 偶尔会剪视频，不过技术还不够成熟\n\neducation:\n  - school: 台州市路桥中学\n    time: 2022-2025\n\n---","date":"2024-01-30T11:51:49.909Z","updated":"2024-01-30T11:51:49.909Z","path":"cosy-resume/index.html","_id":"cls0230tb00014cwk8iagdzgy","comments":1,"content":"","excerpt":"","more":""},{"title":"收藏夹","_content":"[实用工具栏](/source/likes/tools/)","source":"likes/index.md","raw":"---\ntitle: 收藏夹\n---\n[实用工具栏](/source/likes/tools/)","date":"2024-01-30T11:43:42.958Z","updated":"2024-01-30T11:43:42.958Z","path":"likes/index.html","_id":"cls0a78jz0000nkwk2ubybxvs","comments":1,"layout":"page","content":"<p><a href=\"/source/likes/tools/\">实用工具栏</a></p>\n","excerpt":"","more":"<p><a href=\"/source/likes/tools/\">实用工具栏</a></p>\n"},{"title":"实用工具","_content":"[Mingw64镜像站](https://files.1f0.de/mingw/)","source":"likes/tools/index.md","raw":"---\ntitle: 实用工具\n---\n[Mingw64镜像站](https://files.1f0.de/mingw/)","date":"2024-01-30T11:42:14.999Z","updated":"2024-01-30T11:42:14.999Z","path":"likes/tools/index.html","comments":1,"layout":"page","_id":"cls0ah4rg0000hkwk7w2scmp3","content":"<p><a href=\"https://files.1f0.de/mingw/\">Mingw64镜像站</a></p>\n","excerpt":"","more":"<p><a href=\"https://files.1f0.de/mingw/\">Mingw64镜像站</a></p>\n"}],"Post":[{"title":"Hello World","_content":"本博客使用[Hexo](https://hexo.io/)搭建  \n向Hexo反馈问题[troubleshooting](https://hexo.io/docs/troubleshooting.html)或者提问[GitHub](https://github.com/hexojs/hexo/issues).\n模板使用[cosy](https://mozzie.cn/posts/59577/)\n\n## 开始！\n\n### 在本地新建一篇文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n### 本地预览\n\n``` bash\n$ hexo server\n```\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n### 部署到远程站点\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n本博客使用[Hexo](https://hexo.io/)搭建  \n向Hexo反馈问题[troubleshooting](https://hexo.io/docs/troubleshooting.html)或者提问[GitHub](https://github.com/hexojs/hexo/issues).\n模板使用[cosy](https://mozzie.cn/posts/59577/)\n\n## 开始！\n\n### 在本地新建一篇文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n### 本地预览\n\n``` bash\n$ hexo server\n```\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n### 部署到远程站点\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-01-19T09:14:02.679Z","updated":"2024-01-29T08:10:11.155Z","_id":"clrll37o600002owkclsz4xk0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本博客使用<a href=\"https://hexo.io/\">Hexo</a>搭建<br>向Hexo反馈问题<a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a>或者提问<a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>模板使用<a href=\"https://mozzie.cn/posts/59577/\">cosy</a></p>\n<h2 id=\"开始！\"><a href=\"#开始！\" class=\"headerlink\" title=\"开始！\"></a>开始！</h2><h3 id=\"在本地新建一篇文章\"><a href=\"#在本地新建一篇文章\" class=\"headerlink\" title=\"在本地新建一篇文章\"></a>在本地新建一篇文章</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"本地预览\"><a href=\"#本地预览\" class=\"headerlink\" title=\"本地预览\"></a>本地预览</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"部署到远程站点\"><a href=\"#部署到远程站点\" class=\"headerlink\" title=\"部署到远程站点\"></a>部署到远程站点</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本博客使用<a href=\"https://hexo.io/\">Hexo</a>搭建<br>向Hexo反馈问题<a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a>或者提问<a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>模板使用<a href=\"https://mozzie.cn/posts/59577/\">cosy</a></p>\n<h2 id=\"开始！\"><a href=\"#开始！\" class=\"headerlink\" title=\"开始！\"></a>开始！</h2><h3 id=\"在本地新建一篇文章\"><a href=\"#在本地新建一篇文章\" class=\"headerlink\" title=\"在本地新建一篇文章\"></a>在本地新建一篇文章</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"本地预览\"><a href=\"#本地预览\" class=\"headerlink\" title=\"本地预览\"></a>本地预览</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"部署到远程站点\"><a href=\"#部署到远程站点\" class=\"headerlink\" title=\"部署到远程站点\"></a>部署到远程站点</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"路桥第一马戏团出道录","date":"2023-12-23T08:25:01.000Z","_content":"\n## 请选择你的英雄\n\n* Dragon : 我只是想要监控教室而已\n\n* 原神哥 : 平时我只是在办公室van原神，被叫到时才来修电脑\n\n* 众同学 :\n\n  - Chose_B : 成功的从台下看客变成台上一员力\n  - Len_zh : %%%%%%%%%%%%%%%\n  - codeboy : （强者的沉默）\n  - ERA_yes : 一般路过，...，~~然后顺便修好了电脑~~\n  - 梅林 : 最强火力\n  - 田所先生 : 痛失转接头\n  - zc : （喝茶）\n  - figure : 你干嘛~哈哈哎呦~~\n  - 斑马 ： 我是最内哥的电教员(((\n  - 〇_Δ : (远远观望)\n\n* 驯龙高手 : 有没有此人？如有！\n\n* > 旁白 : 一场大戏，正要上演\n\n---\n\n取材自 2023.12.11 - 2023.12.18 的真实事件\n\n---\n\n## Scene 1\n\n### Day 1 早晨\n\nDragon : “最近我们班的希沃出了点问题啊。根据原神哥的判断，肯定是有人故意破坏了希沃的系统。”  \n(众同学窃窃私语，交流情况，但一无所获)  \nDragon : “我觉得，做这种事情的同学，基本上可以锁定在我们班选技术的同学。”   \n（一片哄闹）  \nDragon : “希望做这种事情的同学，可以自觉的承认啊。我周六要是翻监控查出来是你做的，我肯定要严肃处理你的。从处分起步，最高要你退学”  \n（静）  \n\n### Day 1 中午\n\n-------斑马---Dragon-------  \nDragon  _使用了_    __副有罪，当相坐__  \n斑马    _使用了_    __啊？__  ， 免疫了精神攻击，残血，退回教室  \n\n-------Chose_B---Dragon-------  \nDragon _使用了_ __质问__  \nChose_B _使用了_ __问心无愧__ ， 免疫伤害   \nDragon _使用了_ __强制推测__   \nChose_B 因 __迷惑__ 而 无牌可出，受到精神攻击，半血，退回教室  \n\n-------Len_zh---Dragon-------  \nDragon _使用了_ __质问__   \nLen_zh _使用了_ __原神，启动！__   \nDragon 受到了 __迷惑__ ，把Len_zh赶回了教室  \n\n-------〇_Δ---Dragon-------\nDragon _使用了_ __质问__  \n〇_Δ _使用了_ __问心无愧__ ， 免疫伤害  \nDragon _使用了_ __强制推测__   \n〇_Δ _使用了_ __假设不成立__   \nDragon 受到 __迷惑__ ，把〇_Δ赶回了教室  \n\n-------ZC---Dragon-------  \n(电话连接中)  \nDragon _使用了_ __质问__  \nZC _使用了_ __问心无愧__ ， 免疫伤害  \nDragon _使用了_ __刨根问底__  \nZC _使用了_  __不解__ ，连接断开！ \n\n> Dragon 调查无果，怒气值++\n\n## Scene 2\n\n### Day2 傍晚\n\n---17:00---  \n原神哥窜入教室，企图“修复”一体机  \n然而，在他解开了冰点还原，删掉了原有的系统之后  \n发现他根本不会用留下的 `linux` 的 `cmd`  \n拍照之后，原神哥落荒而逃~~~  \n\n> 修不来电脑可以不修\n\n---17:30---  \n(Chose_B、Len_zh、codeboy 等人进入教室)  \n众人(看着全屏的控制台) : “啊？？？”  \n\n> 此时的一体机： 开机即报错，按照提示enter后将进入选择界面  \n> 有操作空间的只是`cmd`选项，进入之后有`linux`的`cmd`可供使用  \n\n(10 mins later)  \n原来，一体机的系统和不同的电脑是有较大差别的：  \n\n* `seewo`的顶层系统是安卓，其电脑的功能仅仅通过接插在整机右侧的PC模块实现    \n  这也解释了为什么可选的cmd是`linux`的而不是`windows`的  \n* 尽管PC的功能暂时无法恢复，但是可以切换至安卓的界面，~~甚至可以勉强上网~~  \n* ~~你甚至可以在PC的报错屏幕上面点开画笔，在黑色的背景上面涂鸦~~  \n\n正当大伙研究有无修复可能的时候，Dragon进入教室  \n“还玩一体机，一体机都被你们玩坏了还玩？”  \n“我们只是看一下我们能不能修”  \n“技术人员已经和我说过了，这个电脑连系统都坏了，大概要2天才可以修好”  \n“2天！？”   \n“对啊。然后到现在都没有人承认自己弄了电脑。再这样下去，我要是查到了是谁干的事情，我不管是谁，我肯定要给他一个不可撤销的处分的”  \n“都不是我们干的怎么会有人承认？承认就有鬼了”  \n“承认就有鬼了？真的是......”  \n\n> Dragon 唯一说对了的事情就是修好电脑确实用了2天。尽管不是原神哥自己收拾的烂摊子\n\n## Scene 3\n\n#### Day 3-4\n\n> 一体机被原神哥破坏了，同学们不得不下楼上课。  \n> 这2天，STIer们也没有放弃抢救`seewo`的希望\n\n### Day 3 下午\n\nLen_zh向田所先生借来了键盘，尝试使用cmd。  \n\n* 可以通过指令访问到的硬盘空间是D盘 ，以发现的盘符文件`homo.ico`为证\n\n没有根本性的进展\n\n### Day 4 上午\n\nChose_B 想到既然PC的功能是由一个可以拆卸的PC模块实现的，那为什么不把楼下的PC模块换来呢？  \n然而，两个模块的型号不同，彼此无法适配  \ncodeboy 于是又开始尝试使用cmd\n\n* 你甚至可以运行 `python 3` \n\n没有什么根本性的进展\n\n### Day 4 中午\n\n田所先生的键盘的转接头还连在seewo断头台上  \n于是田所痛失一个转接头\n\n> STIer们的尝试不会白费\n\n---\n\n## Scene 4\n\n### Day 4 下午\n\nChose_B在寻找ERA_yes的路上碰到了ERA_yes,于是拉着ERA_yes来到了教室  \nERA_yes插上了他的硬盘，尝试着进入`bios`  \n快速的点击`F7`,`bios`界面成功出现，而这也宣告了STIer们的成功  \n\n> 现在原神哥真正的成为了一个Joker\n\n-----17:40-----\nERA_yes安装了`windows 10`之后，赶回了教室\n留下来的STIer继续着修复一体机的伟业\n\n* (梅林 or Len_zh) 设置了系统用户`Joker_Master_Wu`  \n* 梅林 安装了 核显驱动。 现在新系统的界面布局变得合理了\n* Chose_B 用了一整节晚自修的时间，安装了以下软件:\n  - 钉钉\n  - GPT-4W\n  - Deep Freeze\n  - 7z\n  - WPS\n  - 爱奇艺\n  - 微信\n  - QQ\n  - Watt toolkit\n  - Steam 以及 Wall paper engine\n  - DDraceNetwork\n  - Visual Studio Code 以及 相关的插件\n  - python 3\n  - edge 插件 (ADguard、AIX)\n  - Photoshop 2023\n  - clash\n  - 百度网盘\n  - 对拖堂特种 （一个定时关机器）\n  - 希沃白板\n  - 希沃视频展台\n  - winrar\n  - 网易云音乐\n  - QQmusic\n  - Random Sort II\n  - 配置系统环境变量: MingW64\n  - Geogebra\n  - 无人作难而希沃崩，不如STI，为一班笑，何也.txt  \n    内容: 仁义不施而攻守之势异也！别来修电脑了，原神放着我们来玩!\n* codeboy 安装了 \n  - Office ( powerpoint & word & excel )\n  - CP editor\n  - etc.\n* figure 安装了 upupoo\n* Len_zh为.txt创建了桌面快捷方式并改成了希沃管家的图标\n* etc.\n\n> Chose_B 并不知道，他留下的clash和嘲讽原神哥的文件，将为日后埋下祸患\n\n## Scene 5\n\n### Day 5 中午\n\n同学们目击了原神哥准备齐全(带来各种工具，比如螺丝刀，还带了一个人帮忙)  \n然而原神哥发现电脑已经修好，准备全部都没有必要了。来帮忙的人就选择了离开  \n然后原神哥发现 : \n\n* 希沃管家打开是嘲讽他的文件\n\n  > 没有Len_zh，他也看不到文件\n\n  > 然而原神哥却更加坚定了电脑是被同学破坏导致的信念。  \n  > 甚至觉得这个重新下载的 windows 10 同样有问题\n\n* 无法下载真正的希沃管家\n\n  > 因为 Chose_B 开启了 Deep Freeze , 没有解开这个冰点还原他怎么可能可以下载软\n  > 件\n\n  >原神哥却还是觉得是 windows 10 的问题\n\n* 怎么还有 `clash`\n\n  > Chose_B 根本就没想到 clash 会有啥问题，因此大胆放心的把快捷方式放在了桌面\n\n原神哥 再次 _拍照留念_ 后 ，逃离现场\n\n### Day 8 中午\n\n大伙饭后回到教室，发现 :  \n\n* 电脑系统又没了\n* 熟悉的报错 ： ~~欢迎回来~~  \n\n> Joker 急了就破坏电脑是吧  \n> ~~什么虾头东西~~\n\n痛苦的大伙还是觉得要收拾一下`Joker`留下的烂摊子  \n还好codeboy的u盘里面还有 windows 11  \n\n就在codeboy开始修复电脑的时候，Chose_B被Dragon叫了出去 ......\n\n---\n\n## Scene 6\n\n### Day 8 中午\n\n----------Chose_B-----Dragon----------  \nDragon _使用了_ __调查__ , 要求Chose_B寻找ERA_yes  \nChose_B _使用了_ __辩护__ , 解释ERA_yes无罪,效果甚微  \nDragon 拿出 _图片:嘲讽txt_ , 质询Chose_B何人所为  \nChose_B _使用了_ __装傻__ , 暂时有效  \nDragon _使用了_ __索敌__ , Chose_B只有找到ERA_yes才可继续对话  \nChose_B 无法回避 , 前往寻找ERA_yes  \n\n(15 minutes later)  \n-------Chose_B & ERA_yes ----- Dragon -------  \nDragon 对 ERA_yes _使用了_ __询问__ , 要求ERA_yes解释周四下午之事  \nERA_yes _使用了_ __问心无愧__  \nDragon 拿出 _图片:嘲讽txt_ , 质询ERA_yes何人所为  \nERA_yes _使用了_ __无懈可击__ , 否认了为自己所为  \nDragon 拿出 _图片:嘲讽txt_ , 质询Chose_B何人所为  \nChose_B _获得效果_ __汗流浃背__  \nDragon _获得效果_ __我猜对了__ , 造成$25$点精神伤害  \nChose_B 对自己 _使用了_ __这不该骂？__ , 受到伤害减少$\\dfrac{1}{3}$  \n\n连一刻也没有为ERA_yes即将离开而感到~~悲伤~~,立刻抵达战场的是**原神哥**!!!  \n\n-------------Chose_B & ERA_yes ----- Dragon & 原神哥 -------------  \n原神哥 对 ERA_yes _使用了_ __质询__ , 要求ERA_yes回答是如何重新安装系统的  \nERA_yes _使用了_ __无懈可击__ , `F7就可以进入bios界面`  \n原神哥 _获得状态_ __迷惑__ , 受到来自自己的精神伤害$10$点  \n原神哥 拿出 _图片:嘲讽txt_ , 质询Chose_B何人所为  \nChose_B _获得效果_ __汗流浃背__  \n原神哥 _使用了_ __装傻__ , 询问Chose_B _图片:嘲讽txt_ 的文字什么意思  \nChose_B _陷入状态_ __思考__  \n原神哥 _使用了_ __攻击__ , `你编啊，你接着编啊`  \nChose_B __怒气值++__ , `我们只是觉得你说要修电脑，结果给我们电脑破坏了，非常可笑而已`  \n原神哥 _获得效果_ __无言以对__ , 面色更加难看了  \n\n原神哥 _使用了_ __质询__ , 询问 Chose_B 是否下载了 `翻墙软件`  \nChose_B _获得效果_ __疑惑__  \n(10 seconds later)  \nChose_B _获得效果_ __恍然大悟__ 但是还是 __迷惑__  \n\n> 原神哥此处指 `clash for windows` 。  \n> 确实是利用 `VPN` 来翻墙的软件没错  \n> ~~clash怎么你了~~  \n\n> ~~原神哥甚至认识这个，他真的，我哭死~~  \n> ~~看来原神哥的日常生活不只是 genshin impact 啊~~\n\nDragon 对 Chose_B 的 __疑心++__  \n\n原神哥 对 技选生 们 发表**暴论**\n\n* 这个windows 10系统还是有问题的，希沃管家还是下不下来\n\n  > Deep Freeze 开着你能下载就有鬼了\n\n* 驯龙高手一定是存在的\n\n  > 急了就开地图炮是吧\n\nDragon 发表 __审判预告__ , `我等会去问问段长这事怎么处理`\n\n### Day 6 下午  \n\n------------ Chose_B ----- Dragon -------------  \nDragon 转达了 __处分决定__  \n\n* 不是 Chose_B 一个人被警告处分 就是 Chose_B、Len_zh、figure 一起被警告处分  \n\n  > 因为 Chose_B 下了 clash 还嘲讽了 原神哥  \n  > Len_zh 和 figure 平时玩一体机最多 。当然 Chose_B 也有参与过  \n  > 处分的表面理由就是 Chose_B 平时有玩 一体机  \n\nChose_B 受到精神伤害$15$点  \nDragon 说明了 __处分限制__\n\n* 不会将处分结果告知Chose_B的父母  \n* 处分结果可以被撤销\n* 处分结果不会被记入Chose_B的档案中\n* 不会影响本学期的评优\n\n> 警告处分被这样大削，可以说和通报批评无异了  \n> 这也可以体现:这里的管理体制比较混乱，处罚制度和处分结果存在明显错位\n\nDragon 说明了 __处分原因__\n\n```\n由于原神哥的误判\n一开始保修时是说一体机主板损坏\n这就牵出了大量与此有关，需要对一体机损坏负责的领导们\n然而\n主板根本就没坏，同学们还把一体机修好了\n恼怒的领导们就要求 Dragon 至少处分一个学生\n```\n\n> 好一个政治游戏!  \n\n## 后记  \n\n一体机的风波随着 Chose_B 的 警告处分 而告一段落了  \n老师们还是和以前一样上课，没有什么变化  \n不知是有意还是无意的，原神哥最后并没有给一班的一体机重新上冰点还原  \nDragon 还是喜欢用一体机的监控来时不时监视教室里的情况  \nLen_zh 和 figure 还是照玩不误  \nFlorance 找到了[随意解开冰点还原的软件](https://www.bilibili.com/video/BV1aH4y1S7Ab/?vd_source=88e5e88e44dcf35edbab57107763c335\n)  \n田所先生的转接头到现在也没有人赔他一个  \ncodeboy找到了可以向路中的ftp中放入文件的方法  \n\n喧嚣过后，什么也没有留下。  \n\n","source":"_posts/路桥第一马戏团出道录.md","raw":"---\ntitle: 路桥第一马戏团出道录\ndate: 2023-12-23 16:25:01\ntags: 杂谈\n---\n\n## 请选择你的英雄\n\n* Dragon : 我只是想要监控教室而已\n\n* 原神哥 : 平时我只是在办公室van原神，被叫到时才来修电脑\n\n* 众同学 :\n\n  - Chose_B : 成功的从台下看客变成台上一员力\n  - Len_zh : %%%%%%%%%%%%%%%\n  - codeboy : （强者的沉默）\n  - ERA_yes : 一般路过，...，~~然后顺便修好了电脑~~\n  - 梅林 : 最强火力\n  - 田所先生 : 痛失转接头\n  - zc : （喝茶）\n  - figure : 你干嘛~哈哈哎呦~~\n  - 斑马 ： 我是最内哥的电教员(((\n  - 〇_Δ : (远远观望)\n\n* 驯龙高手 : 有没有此人？如有！\n\n* > 旁白 : 一场大戏，正要上演\n\n---\n\n取材自 2023.12.11 - 2023.12.18 的真实事件\n\n---\n\n## Scene 1\n\n### Day 1 早晨\n\nDragon : “最近我们班的希沃出了点问题啊。根据原神哥的判断，肯定是有人故意破坏了希沃的系统。”  \n(众同学窃窃私语，交流情况，但一无所获)  \nDragon : “我觉得，做这种事情的同学，基本上可以锁定在我们班选技术的同学。”   \n（一片哄闹）  \nDragon : “希望做这种事情的同学，可以自觉的承认啊。我周六要是翻监控查出来是你做的，我肯定要严肃处理你的。从处分起步，最高要你退学”  \n（静）  \n\n### Day 1 中午\n\n-------斑马---Dragon-------  \nDragon  _使用了_    __副有罪，当相坐__  \n斑马    _使用了_    __啊？__  ， 免疫了精神攻击，残血，退回教室  \n\n-------Chose_B---Dragon-------  \nDragon _使用了_ __质问__  \nChose_B _使用了_ __问心无愧__ ， 免疫伤害   \nDragon _使用了_ __强制推测__   \nChose_B 因 __迷惑__ 而 无牌可出，受到精神攻击，半血，退回教室  \n\n-------Len_zh---Dragon-------  \nDragon _使用了_ __质问__   \nLen_zh _使用了_ __原神，启动！__   \nDragon 受到了 __迷惑__ ，把Len_zh赶回了教室  \n\n-------〇_Δ---Dragon-------\nDragon _使用了_ __质问__  \n〇_Δ _使用了_ __问心无愧__ ， 免疫伤害  \nDragon _使用了_ __强制推测__   \n〇_Δ _使用了_ __假设不成立__   \nDragon 受到 __迷惑__ ，把〇_Δ赶回了教室  \n\n-------ZC---Dragon-------  \n(电话连接中)  \nDragon _使用了_ __质问__  \nZC _使用了_ __问心无愧__ ， 免疫伤害  \nDragon _使用了_ __刨根问底__  \nZC _使用了_  __不解__ ，连接断开！ \n\n> Dragon 调查无果，怒气值++\n\n## Scene 2\n\n### Day2 傍晚\n\n---17:00---  \n原神哥窜入教室，企图“修复”一体机  \n然而，在他解开了冰点还原，删掉了原有的系统之后  \n发现他根本不会用留下的 `linux` 的 `cmd`  \n拍照之后，原神哥落荒而逃~~~  \n\n> 修不来电脑可以不修\n\n---17:30---  \n(Chose_B、Len_zh、codeboy 等人进入教室)  \n众人(看着全屏的控制台) : “啊？？？”  \n\n> 此时的一体机： 开机即报错，按照提示enter后将进入选择界面  \n> 有操作空间的只是`cmd`选项，进入之后有`linux`的`cmd`可供使用  \n\n(10 mins later)  \n原来，一体机的系统和不同的电脑是有较大差别的：  \n\n* `seewo`的顶层系统是安卓，其电脑的功能仅仅通过接插在整机右侧的PC模块实现    \n  这也解释了为什么可选的cmd是`linux`的而不是`windows`的  \n* 尽管PC的功能暂时无法恢复，但是可以切换至安卓的界面，~~甚至可以勉强上网~~  \n* ~~你甚至可以在PC的报错屏幕上面点开画笔，在黑色的背景上面涂鸦~~  \n\n正当大伙研究有无修复可能的时候，Dragon进入教室  \n“还玩一体机，一体机都被你们玩坏了还玩？”  \n“我们只是看一下我们能不能修”  \n“技术人员已经和我说过了，这个电脑连系统都坏了，大概要2天才可以修好”  \n“2天！？”   \n“对啊。然后到现在都没有人承认自己弄了电脑。再这样下去，我要是查到了是谁干的事情，我不管是谁，我肯定要给他一个不可撤销的处分的”  \n“都不是我们干的怎么会有人承认？承认就有鬼了”  \n“承认就有鬼了？真的是......”  \n\n> Dragon 唯一说对了的事情就是修好电脑确实用了2天。尽管不是原神哥自己收拾的烂摊子\n\n## Scene 3\n\n#### Day 3-4\n\n> 一体机被原神哥破坏了，同学们不得不下楼上课。  \n> 这2天，STIer们也没有放弃抢救`seewo`的希望\n\n### Day 3 下午\n\nLen_zh向田所先生借来了键盘，尝试使用cmd。  \n\n* 可以通过指令访问到的硬盘空间是D盘 ，以发现的盘符文件`homo.ico`为证\n\n没有根本性的进展\n\n### Day 4 上午\n\nChose_B 想到既然PC的功能是由一个可以拆卸的PC模块实现的，那为什么不把楼下的PC模块换来呢？  \n然而，两个模块的型号不同，彼此无法适配  \ncodeboy 于是又开始尝试使用cmd\n\n* 你甚至可以运行 `python 3` \n\n没有什么根本性的进展\n\n### Day 4 中午\n\n田所先生的键盘的转接头还连在seewo断头台上  \n于是田所痛失一个转接头\n\n> STIer们的尝试不会白费\n\n---\n\n## Scene 4\n\n### Day 4 下午\n\nChose_B在寻找ERA_yes的路上碰到了ERA_yes,于是拉着ERA_yes来到了教室  \nERA_yes插上了他的硬盘，尝试着进入`bios`  \n快速的点击`F7`,`bios`界面成功出现，而这也宣告了STIer们的成功  \n\n> 现在原神哥真正的成为了一个Joker\n\n-----17:40-----\nERA_yes安装了`windows 10`之后，赶回了教室\n留下来的STIer继续着修复一体机的伟业\n\n* (梅林 or Len_zh) 设置了系统用户`Joker_Master_Wu`  \n* 梅林 安装了 核显驱动。 现在新系统的界面布局变得合理了\n* Chose_B 用了一整节晚自修的时间，安装了以下软件:\n  - 钉钉\n  - GPT-4W\n  - Deep Freeze\n  - 7z\n  - WPS\n  - 爱奇艺\n  - 微信\n  - QQ\n  - Watt toolkit\n  - Steam 以及 Wall paper engine\n  - DDraceNetwork\n  - Visual Studio Code 以及 相关的插件\n  - python 3\n  - edge 插件 (ADguard、AIX)\n  - Photoshop 2023\n  - clash\n  - 百度网盘\n  - 对拖堂特种 （一个定时关机器）\n  - 希沃白板\n  - 希沃视频展台\n  - winrar\n  - 网易云音乐\n  - QQmusic\n  - Random Sort II\n  - 配置系统环境变量: MingW64\n  - Geogebra\n  - 无人作难而希沃崩，不如STI，为一班笑，何也.txt  \n    内容: 仁义不施而攻守之势异也！别来修电脑了，原神放着我们来玩!\n* codeboy 安装了 \n  - Office ( powerpoint & word & excel )\n  - CP editor\n  - etc.\n* figure 安装了 upupoo\n* Len_zh为.txt创建了桌面快捷方式并改成了希沃管家的图标\n* etc.\n\n> Chose_B 并不知道，他留下的clash和嘲讽原神哥的文件，将为日后埋下祸患\n\n## Scene 5\n\n### Day 5 中午\n\n同学们目击了原神哥准备齐全(带来各种工具，比如螺丝刀，还带了一个人帮忙)  \n然而原神哥发现电脑已经修好，准备全部都没有必要了。来帮忙的人就选择了离开  \n然后原神哥发现 : \n\n* 希沃管家打开是嘲讽他的文件\n\n  > 没有Len_zh，他也看不到文件\n\n  > 然而原神哥却更加坚定了电脑是被同学破坏导致的信念。  \n  > 甚至觉得这个重新下载的 windows 10 同样有问题\n\n* 无法下载真正的希沃管家\n\n  > 因为 Chose_B 开启了 Deep Freeze , 没有解开这个冰点还原他怎么可能可以下载软\n  > 件\n\n  >原神哥却还是觉得是 windows 10 的问题\n\n* 怎么还有 `clash`\n\n  > Chose_B 根本就没想到 clash 会有啥问题，因此大胆放心的把快捷方式放在了桌面\n\n原神哥 再次 _拍照留念_ 后 ，逃离现场\n\n### Day 8 中午\n\n大伙饭后回到教室，发现 :  \n\n* 电脑系统又没了\n* 熟悉的报错 ： ~~欢迎回来~~  \n\n> Joker 急了就破坏电脑是吧  \n> ~~什么虾头东西~~\n\n痛苦的大伙还是觉得要收拾一下`Joker`留下的烂摊子  \n还好codeboy的u盘里面还有 windows 11  \n\n就在codeboy开始修复电脑的时候，Chose_B被Dragon叫了出去 ......\n\n---\n\n## Scene 6\n\n### Day 8 中午\n\n----------Chose_B-----Dragon----------  \nDragon _使用了_ __调查__ , 要求Chose_B寻找ERA_yes  \nChose_B _使用了_ __辩护__ , 解释ERA_yes无罪,效果甚微  \nDragon 拿出 _图片:嘲讽txt_ , 质询Chose_B何人所为  \nChose_B _使用了_ __装傻__ , 暂时有效  \nDragon _使用了_ __索敌__ , Chose_B只有找到ERA_yes才可继续对话  \nChose_B 无法回避 , 前往寻找ERA_yes  \n\n(15 minutes later)  \n-------Chose_B & ERA_yes ----- Dragon -------  \nDragon 对 ERA_yes _使用了_ __询问__ , 要求ERA_yes解释周四下午之事  \nERA_yes _使用了_ __问心无愧__  \nDragon 拿出 _图片:嘲讽txt_ , 质询ERA_yes何人所为  \nERA_yes _使用了_ __无懈可击__ , 否认了为自己所为  \nDragon 拿出 _图片:嘲讽txt_ , 质询Chose_B何人所为  \nChose_B _获得效果_ __汗流浃背__  \nDragon _获得效果_ __我猜对了__ , 造成$25$点精神伤害  \nChose_B 对自己 _使用了_ __这不该骂？__ , 受到伤害减少$\\dfrac{1}{3}$  \n\n连一刻也没有为ERA_yes即将离开而感到~~悲伤~~,立刻抵达战场的是**原神哥**!!!  \n\n-------------Chose_B & ERA_yes ----- Dragon & 原神哥 -------------  \n原神哥 对 ERA_yes _使用了_ __质询__ , 要求ERA_yes回答是如何重新安装系统的  \nERA_yes _使用了_ __无懈可击__ , `F7就可以进入bios界面`  \n原神哥 _获得状态_ __迷惑__ , 受到来自自己的精神伤害$10$点  \n原神哥 拿出 _图片:嘲讽txt_ , 质询Chose_B何人所为  \nChose_B _获得效果_ __汗流浃背__  \n原神哥 _使用了_ __装傻__ , 询问Chose_B _图片:嘲讽txt_ 的文字什么意思  \nChose_B _陷入状态_ __思考__  \n原神哥 _使用了_ __攻击__ , `你编啊，你接着编啊`  \nChose_B __怒气值++__ , `我们只是觉得你说要修电脑，结果给我们电脑破坏了，非常可笑而已`  \n原神哥 _获得效果_ __无言以对__ , 面色更加难看了  \n\n原神哥 _使用了_ __质询__ , 询问 Chose_B 是否下载了 `翻墙软件`  \nChose_B _获得效果_ __疑惑__  \n(10 seconds later)  \nChose_B _获得效果_ __恍然大悟__ 但是还是 __迷惑__  \n\n> 原神哥此处指 `clash for windows` 。  \n> 确实是利用 `VPN` 来翻墙的软件没错  \n> ~~clash怎么你了~~  \n\n> ~~原神哥甚至认识这个，他真的，我哭死~~  \n> ~~看来原神哥的日常生活不只是 genshin impact 啊~~\n\nDragon 对 Chose_B 的 __疑心++__  \n\n原神哥 对 技选生 们 发表**暴论**\n\n* 这个windows 10系统还是有问题的，希沃管家还是下不下来\n\n  > Deep Freeze 开着你能下载就有鬼了\n\n* 驯龙高手一定是存在的\n\n  > 急了就开地图炮是吧\n\nDragon 发表 __审判预告__ , `我等会去问问段长这事怎么处理`\n\n### Day 6 下午  \n\n------------ Chose_B ----- Dragon -------------  \nDragon 转达了 __处分决定__  \n\n* 不是 Chose_B 一个人被警告处分 就是 Chose_B、Len_zh、figure 一起被警告处分  \n\n  > 因为 Chose_B 下了 clash 还嘲讽了 原神哥  \n  > Len_zh 和 figure 平时玩一体机最多 。当然 Chose_B 也有参与过  \n  > 处分的表面理由就是 Chose_B 平时有玩 一体机  \n\nChose_B 受到精神伤害$15$点  \nDragon 说明了 __处分限制__\n\n* 不会将处分结果告知Chose_B的父母  \n* 处分结果可以被撤销\n* 处分结果不会被记入Chose_B的档案中\n* 不会影响本学期的评优\n\n> 警告处分被这样大削，可以说和通报批评无异了  \n> 这也可以体现:这里的管理体制比较混乱，处罚制度和处分结果存在明显错位\n\nDragon 说明了 __处分原因__\n\n```\n由于原神哥的误判\n一开始保修时是说一体机主板损坏\n这就牵出了大量与此有关，需要对一体机损坏负责的领导们\n然而\n主板根本就没坏，同学们还把一体机修好了\n恼怒的领导们就要求 Dragon 至少处分一个学生\n```\n\n> 好一个政治游戏!  \n\n## 后记  \n\n一体机的风波随着 Chose_B 的 警告处分 而告一段落了  \n老师们还是和以前一样上课，没有什么变化  \n不知是有意还是无意的，原神哥最后并没有给一班的一体机重新上冰点还原  \nDragon 还是喜欢用一体机的监控来时不时监视教室里的情况  \nLen_zh 和 figure 还是照玩不误  \nFlorance 找到了[随意解开冰点还原的软件](https://www.bilibili.com/video/BV1aH4y1S7Ab/?vd_source=88e5e88e44dcf35edbab57107763c335\n)  \n田所先生的转接头到现在也没有人赔他一个  \ncodeboy找到了可以向路中的ftp中放入文件的方法  \n\n喧嚣过后，什么也没有留下。  \n\n","slug":"路桥第一马戏团出道录","published":1,"updated":"2024-01-30T07:14:44.909Z","_id":"clryo33dc0000wswke5y3bx1k","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"请选择你的英雄\"><a href=\"#请选择你的英雄\" class=\"headerlink\" title=\"请选择你的英雄\"></a>请选择你的英雄</h2><ul>\n<li><p>Dragon : 我只是想要监控教室而已</p>\n</li>\n<li><p>原神哥 : 平时我只是在办公室van原神，被叫到时才来修电脑</p>\n</li>\n<li><p>众同学 :</p>\n<ul>\n<li>Chose_B : 成功的从台下看客变成台上一员力</li>\n<li>Len_zh : %%%%%%%%%%%%%%%</li>\n<li>codeboy : （强者的沉默）</li>\n<li>ERA_yes : 一般路过，…，<del>然后顺便修好了电脑</del></li>\n<li>梅林 : 最强火力</li>\n<li>田所先生 : 痛失转接头</li>\n<li>zc : （喝茶）</li>\n<li>figure : 你干嘛~哈哈哎呦~~</li>\n<li>斑马 ： 我是最内哥的电教员(((</li>\n<li>〇_Δ : (远远观望)</li>\n</ul>\n</li>\n<li><p>驯龙高手 : 有没有此人？如有！</p>\n</li>\n<li><blockquote>\n<p>旁白 : 一场大戏，正要上演</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<p>取材自 2023.12.11 - 2023.12.18 的真实事件</p>\n<hr>\n<h2 id=\"Scene-1\"><a href=\"#Scene-1\" class=\"headerlink\" title=\"Scene 1\"></a>Scene 1</h2><h3 id=\"Day-1-早晨\"><a href=\"#Day-1-早晨\" class=\"headerlink\" title=\"Day 1 早晨\"></a>Day 1 早晨</h3><p>Dragon : “最近我们班的希沃出了点问题啊。根据原神哥的判断，肯定是有人故意破坏了希沃的系统。”<br>(众同学窃窃私语，交流情况，但一无所获)<br>Dragon : “我觉得，做这种事情的同学，基本上可以锁定在我们班选技术的同学。”<br>（一片哄闹）<br>Dragon : “希望做这种事情的同学，可以自觉的承认啊。我周六要是翻监控查出来是你做的，我肯定要严肃处理你的。从处分起步，最高要你退学”<br>（静）  </p>\n<h3 id=\"Day-1-中午\"><a href=\"#Day-1-中午\" class=\"headerlink\" title=\"Day 1 中午\"></a>Day 1 中午</h3><p>——-斑马—Dragon——-<br>Dragon  <em>使用了</em>    <strong>副有罪，当相坐</strong><br>斑马    <em>使用了</em>    <strong>啊？</strong>  ， 免疫了精神攻击，残血，退回教室  </p>\n<p>——-Chose_B—Dragon——-<br>Dragon <em>使用了</em> <strong>质问</strong><br>Chose_B <em>使用了</em> <strong>问心无愧</strong> ， 免疫伤害<br>Dragon <em>使用了</em> <strong>强制推测</strong><br>Chose_B 因 <strong>迷惑</strong> 而 无牌可出，受到精神攻击，半血，退回教室  </p>\n<p>——-Len_zh—Dragon——-<br>Dragon <em>使用了</em> <strong>质问</strong><br>Len_zh <em>使用了</em> <strong>原神，启动！</strong><br>Dragon 受到了 <strong>迷惑</strong> ，把Len_zh赶回了教室  </p>\n<p>——-〇_Δ—Dragon——-<br>Dragon <em>使用了</em> <strong>质问</strong><br>〇_Δ <em>使用了</em> <strong>问心无愧</strong> ， 免疫伤害<br>Dragon <em>使用了</em> <strong>强制推测</strong><br>〇_Δ <em>使用了</em> <strong>假设不成立</strong><br>Dragon 受到 <strong>迷惑</strong> ，把〇_Δ赶回了教室  </p>\n<p>——-ZC—Dragon——-<br>(电话连接中)<br>Dragon <em>使用了</em> <strong>质问</strong><br>ZC <em>使用了</em> <strong>问心无愧</strong> ， 免疫伤害<br>Dragon <em>使用了</em> <strong>刨根问底</strong><br>ZC <em>使用了</em>  <strong>不解</strong> ，连接断开！ </p>\n<blockquote>\n<p>Dragon 调查无果，怒气值++</p>\n</blockquote>\n<h2 id=\"Scene-2\"><a href=\"#Scene-2\" class=\"headerlink\" title=\"Scene 2\"></a>Scene 2</h2><h3 id=\"Day2-傍晚\"><a href=\"#Day2-傍晚\" class=\"headerlink\" title=\"Day2 傍晚\"></a>Day2 傍晚</h3><p>—17:00—<br>原神哥窜入教室，企图“修复”一体机<br>然而，在他解开了冰点还原，删掉了原有的系统之后<br>发现他根本不会用留下的 <code>linux</code> 的 <code>cmd</code><br>拍照之后，原神哥落荒而逃~~~  </p>\n<blockquote>\n<p>修不来电脑可以不修</p>\n</blockquote>\n<p>—17:30—<br>(Chose_B、Len_zh、codeboy 等人进入教室)<br>众人(看着全屏的控制台) : “啊？？？”  </p>\n<blockquote>\n<p>此时的一体机： 开机即报错，按照提示enter后将进入选择界面<br>有操作空间的只是<code>cmd</code>选项，进入之后有<code>linux</code>的<code>cmd</code>可供使用  </p>\n</blockquote>\n<p>(10 mins later)<br>原来，一体机的系统和不同的电脑是有较大差别的：  </p>\n<ul>\n<li><code>seewo</code>的顶层系统是安卓，其电脑的功能仅仅通过接插在整机右侧的PC模块实现<br>这也解释了为什么可选的cmd是<code>linux</code>的而不是<code>windows</code>的  </li>\n<li>尽管PC的功能暂时无法恢复，但是可以切换至安卓的界面，<del>甚至可以勉强上网</del>  </li>\n<li><del>你甚至可以在PC的报错屏幕上面点开画笔，在黑色的背景上面涂鸦</del></li>\n</ul>\n<p>正当大伙研究有无修复可能的时候，Dragon进入教室<br>“还玩一体机，一体机都被你们玩坏了还玩？”<br>“我们只是看一下我们能不能修”<br>“技术人员已经和我说过了，这个电脑连系统都坏了，大概要2天才可以修好”<br>“2天！？”<br>“对啊。然后到现在都没有人承认自己弄了电脑。再这样下去，我要是查到了是谁干的事情，我不管是谁，我肯定要给他一个不可撤销的处分的”<br>“都不是我们干的怎么会有人承认？承认就有鬼了”<br>“承认就有鬼了？真的是……”  </p>\n<blockquote>\n<p>Dragon 唯一说对了的事情就是修好电脑确实用了2天。尽管不是原神哥自己收拾的烂摊子</p>\n</blockquote>\n<h2 id=\"Scene-3\"><a href=\"#Scene-3\" class=\"headerlink\" title=\"Scene 3\"></a>Scene 3</h2><h4 id=\"Day-3-4\"><a href=\"#Day-3-4\" class=\"headerlink\" title=\"Day 3-4\"></a>Day 3-4</h4><blockquote>\n<p>一体机被原神哥破坏了，同学们不得不下楼上课。<br>这2天，STIer们也没有放弃抢救<code>seewo</code>的希望</p>\n</blockquote>\n<h3 id=\"Day-3-下午\"><a href=\"#Day-3-下午\" class=\"headerlink\" title=\"Day 3 下午\"></a>Day 3 下午</h3><p>Len_zh向田所先生借来了键盘，尝试使用cmd。  </p>\n<ul>\n<li>可以通过指令访问到的硬盘空间是D盘 ，以发现的盘符文件<code>homo.ico</code>为证</li>\n</ul>\n<p>没有根本性的进展</p>\n<h3 id=\"Day-4-上午\"><a href=\"#Day-4-上午\" class=\"headerlink\" title=\"Day 4 上午\"></a>Day 4 上午</h3><p>Chose_B 想到既然PC的功能是由一个可以拆卸的PC模块实现的，那为什么不把楼下的PC模块换来呢？<br>然而，两个模块的型号不同，彼此无法适配<br>codeboy 于是又开始尝试使用cmd</p>\n<ul>\n<li>你甚至可以运行 <code>python 3</code></li>\n</ul>\n<p>没有什么根本性的进展</p>\n<h3 id=\"Day-4-中午\"><a href=\"#Day-4-中午\" class=\"headerlink\" title=\"Day 4 中午\"></a>Day 4 中午</h3><p>田所先生的键盘的转接头还连在seewo断头台上<br>于是田所痛失一个转接头</p>\n<blockquote>\n<p>STIer们的尝试不会白费</p>\n</blockquote>\n<hr>\n<h2 id=\"Scene-4\"><a href=\"#Scene-4\" class=\"headerlink\" title=\"Scene 4\"></a>Scene 4</h2><h3 id=\"Day-4-下午\"><a href=\"#Day-4-下午\" class=\"headerlink\" title=\"Day 4 下午\"></a>Day 4 下午</h3><p>Chose_B在寻找ERA_yes的路上碰到了ERA_yes,于是拉着ERA_yes来到了教室<br>ERA_yes插上了他的硬盘，尝试着进入<code>bios</code><br>快速的点击<code>F7</code>,<code>bios</code>界面成功出现，而这也宣告了STIer们的成功  </p>\n<blockquote>\n<p>现在原神哥真正的成为了一个Joker</p>\n</blockquote>\n<p>—–17:40—–<br>ERA_yes安装了<code>windows 10</code>之后，赶回了教室<br>留下来的STIer继续着修复一体机的伟业</p>\n<ul>\n<li>(梅林 or Len_zh) 设置了系统用户<code>Joker_Master_Wu</code>  </li>\n<li>梅林 安装了 核显驱动。 现在新系统的界面布局变得合理了</li>\n<li>Chose_B 用了一整节晚自修的时间，安装了以下软件:<ul>\n<li>钉钉</li>\n<li>GPT-4W</li>\n<li>Deep Freeze</li>\n<li>7z</li>\n<li>WPS</li>\n<li>爱奇艺</li>\n<li>微信</li>\n<li>QQ</li>\n<li>Watt toolkit</li>\n<li>Steam 以及 Wall paper engine</li>\n<li>DDraceNetwork</li>\n<li>Visual Studio Code 以及 相关的插件</li>\n<li>python 3</li>\n<li>edge 插件 (ADguard、AIX)</li>\n<li>Photoshop 2023</li>\n<li>clash</li>\n<li>百度网盘</li>\n<li>对拖堂特种 （一个定时关机器）</li>\n<li>希沃白板</li>\n<li>希沃视频展台</li>\n<li>winrar</li>\n<li>网易云音乐</li>\n<li>QQmusic</li>\n<li>Random Sort II</li>\n<li>配置系统环境变量: MingW64</li>\n<li>Geogebra</li>\n<li>无人作难而希沃崩，不如STI，为一班笑，何也.txt<br>内容: 仁义不施而攻守之势异也！别来修电脑了，原神放着我们来玩!</li>\n</ul>\n</li>\n<li>codeboy 安装了 <ul>\n<li>Office ( powerpoint &amp; word &amp; excel )</li>\n<li>CP editor</li>\n<li>etc.</li>\n</ul>\n</li>\n<li>figure 安装了 upupoo</li>\n<li>Len_zh为.txt创建了桌面快捷方式并改成了希沃管家的图标</li>\n<li>etc.</li>\n</ul>\n<blockquote>\n<p>Chose_B 并不知道，他留下的clash和嘲讽原神哥的文件，将为日后埋下祸患</p>\n</blockquote>\n<h2 id=\"Scene-5\"><a href=\"#Scene-5\" class=\"headerlink\" title=\"Scene 5\"></a>Scene 5</h2><h3 id=\"Day-5-中午\"><a href=\"#Day-5-中午\" class=\"headerlink\" title=\"Day 5 中午\"></a>Day 5 中午</h3><p>同学们目击了原神哥准备齐全(带来各种工具，比如螺丝刀，还带了一个人帮忙)<br>然而原神哥发现电脑已经修好，准备全部都没有必要了。来帮忙的人就选择了离开<br>然后原神哥发现 : </p>\n<ul>\n<li><p>希沃管家打开是嘲讽他的文件</p>\n<blockquote>\n<p>没有Len_zh，他也看不到文件</p>\n</blockquote>\n<blockquote>\n<p>然而原神哥却更加坚定了电脑是被同学破坏导致的信念。<br>甚至觉得这个重新下载的 windows 10 同样有问题</p>\n</blockquote>\n</li>\n<li><p>无法下载真正的希沃管家</p>\n<blockquote>\n<p>因为 Chose_B 开启了 Deep Freeze , 没有解开这个冰点还原他怎么可能可以下载软<br>件</p>\n</blockquote>\n<blockquote>\n<p>原神哥却还是觉得是 windows 10 的问题</p>\n</blockquote>\n</li>\n<li><p>怎么还有 <code>clash</code></p>\n<blockquote>\n<p>Chose_B 根本就没想到 clash 会有啥问题，因此大胆放心的把快捷方式放在了桌面</p>\n</blockquote>\n</li>\n</ul>\n<p>原神哥 再次 <em>拍照留念</em> 后 ，逃离现场</p>\n<h3 id=\"Day-8-中午\"><a href=\"#Day-8-中午\" class=\"headerlink\" title=\"Day 8 中午\"></a>Day 8 中午</h3><p>大伙饭后回到教室，发现 :  </p>\n<ul>\n<li>电脑系统又没了</li>\n<li>熟悉的报错 ： <del>欢迎回来</del></li>\n</ul>\n<blockquote>\n<p>Joker 急了就破坏电脑是吧<br><del>什么虾头东西</del></p>\n</blockquote>\n<p>痛苦的大伙还是觉得要收拾一下<code>Joker</code>留下的烂摊子<br>还好codeboy的u盘里面还有 windows 11  </p>\n<p>就在codeboy开始修复电脑的时候，Chose_B被Dragon叫了出去 ……</p>\n<hr>\n<h2 id=\"Scene-6\"><a href=\"#Scene-6\" class=\"headerlink\" title=\"Scene 6\"></a>Scene 6</h2><h3 id=\"Day-8-中午-1\"><a href=\"#Day-8-中午-1\" class=\"headerlink\" title=\"Day 8 中午\"></a>Day 8 中午</h3><p>———-Chose_B—–Dragon———-<br>Dragon <em>使用了</em> <strong>调查</strong> , 要求Chose_B寻找ERA_yes<br>Chose_B <em>使用了</em> <strong>辩护</strong> , 解释ERA_yes无罪,效果甚微<br>Dragon 拿出 <em>图片:嘲讽txt</em> , 质询Chose_B何人所为<br>Chose_B <em>使用了</em> <strong>装傻</strong> , 暂时有效<br>Dragon <em>使用了</em> <strong>索敌</strong> , Chose_B只有找到ERA_yes才可继续对话<br>Chose_B 无法回避 , 前往寻找ERA_yes  </p>\n<p>(15 minutes later)<br>——-Chose_B &amp; ERA_yes —– Dragon ——-<br>Dragon 对 ERA_yes <em>使用了</em> <strong>询问</strong> , 要求ERA_yes解释周四下午之事<br>ERA_yes <em>使用了</em> <strong>问心无愧</strong><br>Dragon 拿出 <em>图片:嘲讽txt</em> , 质询ERA_yes何人所为<br>ERA_yes <em>使用了</em> <strong>无懈可击</strong> , 否认了为自己所为<br>Dragon 拿出 <em>图片:嘲讽txt</em> , 质询Chose_B何人所为<br>Chose_B <em>获得效果</em> <strong>汗流浃背</strong><br>Dragon <em>获得效果</em> <strong>我猜对了</strong> , 造成$25$点精神伤害<br>Chose_B 对自己 <em>使用了</em> <strong>这不该骂？</strong> , 受到伤害减少$\\dfrac{1}{3}$  </p>\n<p>连一刻也没有为ERA_yes即将离开而感到<del>悲伤</del>,立刻抵达战场的是<strong>原神哥</strong>!!!  </p>\n<p>————-Chose_B &amp; ERA_yes —– Dragon &amp; 原神哥 ————-<br>原神哥 对 ERA_yes <em>使用了</em> <strong>质询</strong> , 要求ERA_yes回答是如何重新安装系统的<br>ERA_yes <em>使用了</em> <strong>无懈可击</strong> , <code>F7就可以进入bios界面</code><br>原神哥 <em>获得状态</em> <strong>迷惑</strong> , 受到来自自己的精神伤害$10$点<br>原神哥 拿出 <em>图片:嘲讽txt</em> , 质询Chose_B何人所为<br>Chose_B <em>获得效果</em> <strong>汗流浃背</strong><br>原神哥 <em>使用了</em> <strong>装傻</strong> , 询问Chose_B <em>图片:嘲讽txt</em> 的文字什么意思<br>Chose_B <em>陷入状态</em> <strong>思考</strong><br>原神哥 <em>使用了</em> <strong>攻击</strong> , <code>你编啊，你接着编啊</code><br>Chose_B <strong>怒气值++</strong> , <code>我们只是觉得你说要修电脑，结果给我们电脑破坏了，非常可笑而已</code><br>原神哥 <em>获得效果</em> <strong>无言以对</strong> , 面色更加难看了  </p>\n<p>原神哥 <em>使用了</em> <strong>质询</strong> , 询问 Chose_B 是否下载了 <code>翻墙软件</code><br>Chose_B <em>获得效果</em> <strong>疑惑</strong><br>(10 seconds later)<br>Chose_B <em>获得效果</em> <strong>恍然大悟</strong> 但是还是 <strong>迷惑</strong>  </p>\n<blockquote>\n<p>原神哥此处指 <code>clash for windows</code> 。<br>确实是利用 <code>VPN</code> 来翻墙的软件没错<br><del>clash怎么你了</del>  </p>\n</blockquote>\n<blockquote>\n<p><del>原神哥甚至认识这个，他真的，我哭死</del><br><del>看来原神哥的日常生活不只是 genshin impact 啊</del></p>\n</blockquote>\n<p>Dragon 对 Chose_B 的 <strong>疑心++</strong>  </p>\n<p>原神哥 对 技选生 们 发表<strong>暴论</strong></p>\n<ul>\n<li><p>这个windows 10系统还是有问题的，希沃管家还是下不下来</p>\n<blockquote>\n<p>Deep Freeze 开着你能下载就有鬼了</p>\n</blockquote>\n</li>\n<li><p>驯龙高手一定是存在的</p>\n<blockquote>\n<p>急了就开地图炮是吧</p>\n</blockquote>\n</li>\n</ul>\n<p>Dragon 发表 <strong>审判预告</strong> , <code>我等会去问问段长这事怎么处理</code></p>\n<h3 id=\"Day-6-下午\"><a href=\"#Day-6-下午\" class=\"headerlink\" title=\"Day 6 下午\"></a>Day 6 下午</h3><p>———— Chose_B —– Dragon ————-<br>Dragon 转达了 <strong>处分决定</strong>  </p>\n<ul>\n<li><p>不是 Chose_B 一个人被警告处分 就是 Chose_B、Len_zh、figure 一起被警告处分  </p>\n<blockquote>\n<p>因为 Chose_B 下了 clash 还嘲讽了 原神哥<br>Len_zh 和 figure 平时玩一体机最多 。当然 Chose_B 也有参与过<br>处分的表面理由就是 Chose_B 平时有玩 一体机</p>\n</blockquote>\n</li>\n</ul>\n<p>Chose_B 受到精神伤害$15$点<br>Dragon 说明了 <strong>处分限制</strong></p>\n<ul>\n<li>不会将处分结果告知Chose_B的父母  </li>\n<li>处分结果可以被撤销</li>\n<li>处分结果不会被记入Chose_B的档案中</li>\n<li>不会影响本学期的评优</li>\n</ul>\n<blockquote>\n<p>警告处分被这样大削，可以说和通报批评无异了<br>这也可以体现:这里的管理体制比较混乱，处罚制度和处分结果存在明显错位</p>\n</blockquote>\n<p>Dragon 说明了 <strong>处分原因</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">由于原神哥的误判\n一开始保修时是说一体机主板损坏\n这就牵出了大量与此有关，需要对一体机损坏负责的领导们\n然而\n主板根本就没坏，同学们还把一体机修好了\n恼怒的领导们就要求 Dragon 至少处分一个学生<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>好一个政治游戏!  </p>\n</blockquote>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>一体机的风波随着 Chose_B 的 警告处分 而告一段落了<br>老师们还是和以前一样上课，没有什么变化<br>不知是有意还是无意的，原神哥最后并没有给一班的一体机重新上冰点还原<br>Dragon 还是喜欢用一体机的监控来时不时监视教室里的情况<br>Len_zh 和 figure 还是照玩不误<br>Florance 找到了<a href=\"https://www.bilibili.com/video/BV1aH4y1S7Ab/?vd_source=88e5e88e44dcf35edbab57107763c335\">随意解开冰点还原的软件</a><br>田所先生的转接头到现在也没有人赔他一个<br>codeboy找到了可以向路中的ftp中放入文件的方法  </p>\n<p>喧嚣过后，什么也没有留下。  </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"请选择你的英雄\"><a href=\"#请选择你的英雄\" class=\"headerlink\" title=\"请选择你的英雄\"></a>请选择你的英雄</h2><ul>\n<li><p>Dragon : 我只是想要监控教室而已</p>\n</li>\n<li><p>原神哥 : 平时我只是在办公室van原神，被叫到时才来修电脑</p>\n</li>\n<li><p>众同学 :</p>\n<ul>\n<li>Chose_B : 成功的从台下看客变成台上一员力</li>\n<li>Len_zh : %%%%%%%%%%%%%%%</li>\n<li>codeboy : （强者的沉默）</li>\n<li>ERA_yes : 一般路过，…，<del>然后顺便修好了电脑</del></li>\n<li>梅林 : 最强火力</li>\n<li>田所先生 : 痛失转接头</li>\n<li>zc : （喝茶）</li>\n<li>figure : 你干嘛~哈哈哎呦~~</li>\n<li>斑马 ： 我是最内哥的电教员(((</li>\n<li>〇_Δ : (远远观望)</li>\n</ul>\n</li>\n<li><p>驯龙高手 : 有没有此人？如有！</p>\n</li>\n<li><blockquote>\n<p>旁白 : 一场大戏，正要上演</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<p>取材自 2023.12.11 - 2023.12.18 的真实事件</p>\n<hr>\n<h2 id=\"Scene-1\"><a href=\"#Scene-1\" class=\"headerlink\" title=\"Scene 1\"></a>Scene 1</h2><h3 id=\"Day-1-早晨\"><a href=\"#Day-1-早晨\" class=\"headerlink\" title=\"Day 1 早晨\"></a>Day 1 早晨</h3><p>Dragon : “最近我们班的希沃出了点问题啊。根据原神哥的判断，肯定是有人故意破坏了希沃的系统。”<br>(众同学窃窃私语，交流情况，但一无所获)<br>Dragon : “我觉得，做这种事情的同学，基本上可以锁定在我们班选技术的同学。”<br>（一片哄闹）<br>Dragon : “希望做这种事情的同学，可以自觉的承认啊。我周六要是翻监控查出来是你做的，我肯定要严肃处理你的。从处分起步，最高要你退学”<br>（静）  </p>\n<h3 id=\"Day-1-中午\"><a href=\"#Day-1-中午\" class=\"headerlink\" title=\"Day 1 中午\"></a>Day 1 中午</h3><p>——-斑马—Dragon——-<br>Dragon  <em>使用了</em>    <strong>副有罪，当相坐</strong><br>斑马    <em>使用了</em>    <strong>啊？</strong>  ， 免疫了精神攻击，残血，退回教室  </p>\n<p>——-Chose_B—Dragon——-<br>Dragon <em>使用了</em> <strong>质问</strong><br>Chose_B <em>使用了</em> <strong>问心无愧</strong> ， 免疫伤害<br>Dragon <em>使用了</em> <strong>强制推测</strong><br>Chose_B 因 <strong>迷惑</strong> 而 无牌可出，受到精神攻击，半血，退回教室  </p>\n<p>——-Len_zh—Dragon——-<br>Dragon <em>使用了</em> <strong>质问</strong><br>Len_zh <em>使用了</em> <strong>原神，启动！</strong><br>Dragon 受到了 <strong>迷惑</strong> ，把Len_zh赶回了教室  </p>\n<p>——-〇_Δ—Dragon——-<br>Dragon <em>使用了</em> <strong>质问</strong><br>〇_Δ <em>使用了</em> <strong>问心无愧</strong> ， 免疫伤害<br>Dragon <em>使用了</em> <strong>强制推测</strong><br>〇_Δ <em>使用了</em> <strong>假设不成立</strong><br>Dragon 受到 <strong>迷惑</strong> ，把〇_Δ赶回了教室  </p>\n<p>——-ZC—Dragon——-<br>(电话连接中)<br>Dragon <em>使用了</em> <strong>质问</strong><br>ZC <em>使用了</em> <strong>问心无愧</strong> ， 免疫伤害<br>Dragon <em>使用了</em> <strong>刨根问底</strong><br>ZC <em>使用了</em>  <strong>不解</strong> ，连接断开！ </p>\n<blockquote>\n<p>Dragon 调查无果，怒气值++</p>\n</blockquote>\n<h2 id=\"Scene-2\"><a href=\"#Scene-2\" class=\"headerlink\" title=\"Scene 2\"></a>Scene 2</h2><h3 id=\"Day2-傍晚\"><a href=\"#Day2-傍晚\" class=\"headerlink\" title=\"Day2 傍晚\"></a>Day2 傍晚</h3><p>—17:00—<br>原神哥窜入教室，企图“修复”一体机<br>然而，在他解开了冰点还原，删掉了原有的系统之后<br>发现他根本不会用留下的 <code>linux</code> 的 <code>cmd</code><br>拍照之后，原神哥落荒而逃~~~  </p>\n<blockquote>\n<p>修不来电脑可以不修</p>\n</blockquote>\n<p>—17:30—<br>(Chose_B、Len_zh、codeboy 等人进入教室)<br>众人(看着全屏的控制台) : “啊？？？”  </p>\n<blockquote>\n<p>此时的一体机： 开机即报错，按照提示enter后将进入选择界面<br>有操作空间的只是<code>cmd</code>选项，进入之后有<code>linux</code>的<code>cmd</code>可供使用  </p>\n</blockquote>\n<p>(10 mins later)<br>原来，一体机的系统和不同的电脑是有较大差别的：  </p>\n<ul>\n<li><code>seewo</code>的顶层系统是安卓，其电脑的功能仅仅通过接插在整机右侧的PC模块实现<br>这也解释了为什么可选的cmd是<code>linux</code>的而不是<code>windows</code>的  </li>\n<li>尽管PC的功能暂时无法恢复，但是可以切换至安卓的界面，<del>甚至可以勉强上网</del>  </li>\n<li><del>你甚至可以在PC的报错屏幕上面点开画笔，在黑色的背景上面涂鸦</del></li>\n</ul>\n<p>正当大伙研究有无修复可能的时候，Dragon进入教室<br>“还玩一体机，一体机都被你们玩坏了还玩？”<br>“我们只是看一下我们能不能修”<br>“技术人员已经和我说过了，这个电脑连系统都坏了，大概要2天才可以修好”<br>“2天！？”<br>“对啊。然后到现在都没有人承认自己弄了电脑。再这样下去，我要是查到了是谁干的事情，我不管是谁，我肯定要给他一个不可撤销的处分的”<br>“都不是我们干的怎么会有人承认？承认就有鬼了”<br>“承认就有鬼了？真的是……”  </p>\n<blockquote>\n<p>Dragon 唯一说对了的事情就是修好电脑确实用了2天。尽管不是原神哥自己收拾的烂摊子</p>\n</blockquote>\n<h2 id=\"Scene-3\"><a href=\"#Scene-3\" class=\"headerlink\" title=\"Scene 3\"></a>Scene 3</h2><h4 id=\"Day-3-4\"><a href=\"#Day-3-4\" class=\"headerlink\" title=\"Day 3-4\"></a>Day 3-4</h4><blockquote>\n<p>一体机被原神哥破坏了，同学们不得不下楼上课。<br>这2天，STIer们也没有放弃抢救<code>seewo</code>的希望</p>\n</blockquote>\n<h3 id=\"Day-3-下午\"><a href=\"#Day-3-下午\" class=\"headerlink\" title=\"Day 3 下午\"></a>Day 3 下午</h3><p>Len_zh向田所先生借来了键盘，尝试使用cmd。  </p>\n<ul>\n<li>可以通过指令访问到的硬盘空间是D盘 ，以发现的盘符文件<code>homo.ico</code>为证</li>\n</ul>\n<p>没有根本性的进展</p>\n<h3 id=\"Day-4-上午\"><a href=\"#Day-4-上午\" class=\"headerlink\" title=\"Day 4 上午\"></a>Day 4 上午</h3><p>Chose_B 想到既然PC的功能是由一个可以拆卸的PC模块实现的，那为什么不把楼下的PC模块换来呢？<br>然而，两个模块的型号不同，彼此无法适配<br>codeboy 于是又开始尝试使用cmd</p>\n<ul>\n<li>你甚至可以运行 <code>python 3</code></li>\n</ul>\n<p>没有什么根本性的进展</p>\n<h3 id=\"Day-4-中午\"><a href=\"#Day-4-中午\" class=\"headerlink\" title=\"Day 4 中午\"></a>Day 4 中午</h3><p>田所先生的键盘的转接头还连在seewo断头台上<br>于是田所痛失一个转接头</p>\n<blockquote>\n<p>STIer们的尝试不会白费</p>\n</blockquote>\n<hr>\n<h2 id=\"Scene-4\"><a href=\"#Scene-4\" class=\"headerlink\" title=\"Scene 4\"></a>Scene 4</h2><h3 id=\"Day-4-下午\"><a href=\"#Day-4-下午\" class=\"headerlink\" title=\"Day 4 下午\"></a>Day 4 下午</h3><p>Chose_B在寻找ERA_yes的路上碰到了ERA_yes,于是拉着ERA_yes来到了教室<br>ERA_yes插上了他的硬盘，尝试着进入<code>bios</code><br>快速的点击<code>F7</code>,<code>bios</code>界面成功出现，而这也宣告了STIer们的成功  </p>\n<blockquote>\n<p>现在原神哥真正的成为了一个Joker</p>\n</blockquote>\n<p>—–17:40—–<br>ERA_yes安装了<code>windows 10</code>之后，赶回了教室<br>留下来的STIer继续着修复一体机的伟业</p>\n<ul>\n<li>(梅林 or Len_zh) 设置了系统用户<code>Joker_Master_Wu</code>  </li>\n<li>梅林 安装了 核显驱动。 现在新系统的界面布局变得合理了</li>\n<li>Chose_B 用了一整节晚自修的时间，安装了以下软件:<ul>\n<li>钉钉</li>\n<li>GPT-4W</li>\n<li>Deep Freeze</li>\n<li>7z</li>\n<li>WPS</li>\n<li>爱奇艺</li>\n<li>微信</li>\n<li>QQ</li>\n<li>Watt toolkit</li>\n<li>Steam 以及 Wall paper engine</li>\n<li>DDraceNetwork</li>\n<li>Visual Studio Code 以及 相关的插件</li>\n<li>python 3</li>\n<li>edge 插件 (ADguard、AIX)</li>\n<li>Photoshop 2023</li>\n<li>clash</li>\n<li>百度网盘</li>\n<li>对拖堂特种 （一个定时关机器）</li>\n<li>希沃白板</li>\n<li>希沃视频展台</li>\n<li>winrar</li>\n<li>网易云音乐</li>\n<li>QQmusic</li>\n<li>Random Sort II</li>\n<li>配置系统环境变量: MingW64</li>\n<li>Geogebra</li>\n<li>无人作难而希沃崩，不如STI，为一班笑，何也.txt<br>内容: 仁义不施而攻守之势异也！别来修电脑了，原神放着我们来玩!</li>\n</ul>\n</li>\n<li>codeboy 安装了 <ul>\n<li>Office ( powerpoint &amp; word &amp; excel )</li>\n<li>CP editor</li>\n<li>etc.</li>\n</ul>\n</li>\n<li>figure 安装了 upupoo</li>\n<li>Len_zh为.txt创建了桌面快捷方式并改成了希沃管家的图标</li>\n<li>etc.</li>\n</ul>\n<blockquote>\n<p>Chose_B 并不知道，他留下的clash和嘲讽原神哥的文件，将为日后埋下祸患</p>\n</blockquote>\n<h2 id=\"Scene-5\"><a href=\"#Scene-5\" class=\"headerlink\" title=\"Scene 5\"></a>Scene 5</h2><h3 id=\"Day-5-中午\"><a href=\"#Day-5-中午\" class=\"headerlink\" title=\"Day 5 中午\"></a>Day 5 中午</h3><p>同学们目击了原神哥准备齐全(带来各种工具，比如螺丝刀，还带了一个人帮忙)<br>然而原神哥发现电脑已经修好，准备全部都没有必要了。来帮忙的人就选择了离开<br>然后原神哥发现 : </p>\n<ul>\n<li><p>希沃管家打开是嘲讽他的文件</p>\n<blockquote>\n<p>没有Len_zh，他也看不到文件</p>\n</blockquote>\n<blockquote>\n<p>然而原神哥却更加坚定了电脑是被同学破坏导致的信念。<br>甚至觉得这个重新下载的 windows 10 同样有问题</p>\n</blockquote>\n</li>\n<li><p>无法下载真正的希沃管家</p>\n<blockquote>\n<p>因为 Chose_B 开启了 Deep Freeze , 没有解开这个冰点还原他怎么可能可以下载软<br>件</p>\n</blockquote>\n<blockquote>\n<p>原神哥却还是觉得是 windows 10 的问题</p>\n</blockquote>\n</li>\n<li><p>怎么还有 <code>clash</code></p>\n<blockquote>\n<p>Chose_B 根本就没想到 clash 会有啥问题，因此大胆放心的把快捷方式放在了桌面</p>\n</blockquote>\n</li>\n</ul>\n<p>原神哥 再次 <em>拍照留念</em> 后 ，逃离现场</p>\n<h3 id=\"Day-8-中午\"><a href=\"#Day-8-中午\" class=\"headerlink\" title=\"Day 8 中午\"></a>Day 8 中午</h3><p>大伙饭后回到教室，发现 :  </p>\n<ul>\n<li>电脑系统又没了</li>\n<li>熟悉的报错 ： <del>欢迎回来</del></li>\n</ul>\n<blockquote>\n<p>Joker 急了就破坏电脑是吧<br><del>什么虾头东西</del></p>\n</blockquote>\n<p>痛苦的大伙还是觉得要收拾一下<code>Joker</code>留下的烂摊子<br>还好codeboy的u盘里面还有 windows 11  </p>\n<p>就在codeboy开始修复电脑的时候，Chose_B被Dragon叫了出去 ……</p>\n<hr>\n<h2 id=\"Scene-6\"><a href=\"#Scene-6\" class=\"headerlink\" title=\"Scene 6\"></a>Scene 6</h2><h3 id=\"Day-8-中午-1\"><a href=\"#Day-8-中午-1\" class=\"headerlink\" title=\"Day 8 中午\"></a>Day 8 中午</h3><p>———-Chose_B—–Dragon———-<br>Dragon <em>使用了</em> <strong>调查</strong> , 要求Chose_B寻找ERA_yes<br>Chose_B <em>使用了</em> <strong>辩护</strong> , 解释ERA_yes无罪,效果甚微<br>Dragon 拿出 <em>图片:嘲讽txt</em> , 质询Chose_B何人所为<br>Chose_B <em>使用了</em> <strong>装傻</strong> , 暂时有效<br>Dragon <em>使用了</em> <strong>索敌</strong> , Chose_B只有找到ERA_yes才可继续对话<br>Chose_B 无法回避 , 前往寻找ERA_yes  </p>\n<p>(15 minutes later)<br>——-Chose_B &amp; ERA_yes —– Dragon ——-<br>Dragon 对 ERA_yes <em>使用了</em> <strong>询问</strong> , 要求ERA_yes解释周四下午之事<br>ERA_yes <em>使用了</em> <strong>问心无愧</strong><br>Dragon 拿出 <em>图片:嘲讽txt</em> , 质询ERA_yes何人所为<br>ERA_yes <em>使用了</em> <strong>无懈可击</strong> , 否认了为自己所为<br>Dragon 拿出 <em>图片:嘲讽txt</em> , 质询Chose_B何人所为<br>Chose_B <em>获得效果</em> <strong>汗流浃背</strong><br>Dragon <em>获得效果</em> <strong>我猜对了</strong> , 造成$25$点精神伤害<br>Chose_B 对自己 <em>使用了</em> <strong>这不该骂？</strong> , 受到伤害减少$\\dfrac{1}{3}$  </p>\n<p>连一刻也没有为ERA_yes即将离开而感到<del>悲伤</del>,立刻抵达战场的是<strong>原神哥</strong>!!!  </p>\n<p>————-Chose_B &amp; ERA_yes —– Dragon &amp; 原神哥 ————-<br>原神哥 对 ERA_yes <em>使用了</em> <strong>质询</strong> , 要求ERA_yes回答是如何重新安装系统的<br>ERA_yes <em>使用了</em> <strong>无懈可击</strong> , <code>F7就可以进入bios界面</code><br>原神哥 <em>获得状态</em> <strong>迷惑</strong> , 受到来自自己的精神伤害$10$点<br>原神哥 拿出 <em>图片:嘲讽txt</em> , 质询Chose_B何人所为<br>Chose_B <em>获得效果</em> <strong>汗流浃背</strong><br>原神哥 <em>使用了</em> <strong>装傻</strong> , 询问Chose_B <em>图片:嘲讽txt</em> 的文字什么意思<br>Chose_B <em>陷入状态</em> <strong>思考</strong><br>原神哥 <em>使用了</em> <strong>攻击</strong> , <code>你编啊，你接着编啊</code><br>Chose_B <strong>怒气值++</strong> , <code>我们只是觉得你说要修电脑，结果给我们电脑破坏了，非常可笑而已</code><br>原神哥 <em>获得效果</em> <strong>无言以对</strong> , 面色更加难看了  </p>\n<p>原神哥 <em>使用了</em> <strong>质询</strong> , 询问 Chose_B 是否下载了 <code>翻墙软件</code><br>Chose_B <em>获得效果</em> <strong>疑惑</strong><br>(10 seconds later)<br>Chose_B <em>获得效果</em> <strong>恍然大悟</strong> 但是还是 <strong>迷惑</strong>  </p>\n<blockquote>\n<p>原神哥此处指 <code>clash for windows</code> 。<br>确实是利用 <code>VPN</code> 来翻墙的软件没错<br><del>clash怎么你了</del>  </p>\n</blockquote>\n<blockquote>\n<p><del>原神哥甚至认识这个，他真的，我哭死</del><br><del>看来原神哥的日常生活不只是 genshin impact 啊</del></p>\n</blockquote>\n<p>Dragon 对 Chose_B 的 <strong>疑心++</strong>  </p>\n<p>原神哥 对 技选生 们 发表<strong>暴论</strong></p>\n<ul>\n<li><p>这个windows 10系统还是有问题的，希沃管家还是下不下来</p>\n<blockquote>\n<p>Deep Freeze 开着你能下载就有鬼了</p>\n</blockquote>\n</li>\n<li><p>驯龙高手一定是存在的</p>\n<blockquote>\n<p>急了就开地图炮是吧</p>\n</blockquote>\n</li>\n</ul>\n<p>Dragon 发表 <strong>审判预告</strong> , <code>我等会去问问段长这事怎么处理</code></p>\n<h3 id=\"Day-6-下午\"><a href=\"#Day-6-下午\" class=\"headerlink\" title=\"Day 6 下午\"></a>Day 6 下午</h3><p>———— Chose_B —– Dragon ————-<br>Dragon 转达了 <strong>处分决定</strong>  </p>\n<ul>\n<li><p>不是 Chose_B 一个人被警告处分 就是 Chose_B、Len_zh、figure 一起被警告处分  </p>\n<blockquote>\n<p>因为 Chose_B 下了 clash 还嘲讽了 原神哥<br>Len_zh 和 figure 平时玩一体机最多 。当然 Chose_B 也有参与过<br>处分的表面理由就是 Chose_B 平时有玩 一体机</p>\n</blockquote>\n</li>\n</ul>\n<p>Chose_B 受到精神伤害$15$点<br>Dragon 说明了 <strong>处分限制</strong></p>\n<ul>\n<li>不会将处分结果告知Chose_B的父母  </li>\n<li>处分结果可以被撤销</li>\n<li>处分结果不会被记入Chose_B的档案中</li>\n<li>不会影响本学期的评优</li>\n</ul>\n<blockquote>\n<p>警告处分被这样大削，可以说和通报批评无异了<br>这也可以体现:这里的管理体制比较混乱，处罚制度和处分结果存在明显错位</p>\n</blockquote>\n<p>Dragon 说明了 <strong>处分原因</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">由于原神哥的误判\n一开始保修时是说一体机主板损坏\n这就牵出了大量与此有关，需要对一体机损坏负责的领导们\n然而\n主板根本就没坏，同学们还把一体机修好了\n恼怒的领导们就要求 Dragon 至少处分一个学生<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>好一个政治游戏!  </p>\n</blockquote>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>一体机的风波随着 Chose_B 的 警告处分 而告一段落了<br>老师们还是和以前一样上课，没有什么变化<br>不知是有意还是无意的，原神哥最后并没有给一班的一体机重新上冰点还原<br>Dragon 还是喜欢用一体机的监控来时不时监视教室里的情况<br>Len_zh 和 figure 还是照玩不误<br>Florance 找到了<a href=\"https://www.bilibili.com/video/BV1aH4y1S7Ab/?vd_source=88e5e88e44dcf35edbab57107763c335\">随意解开冰点还原的软件</a><br>田所先生的转接头到现在也没有人赔他一个<br>codeboy找到了可以向路中的ftp中放入文件的方法  </p>\n<p>喧嚣过后，什么也没有留下。  </p>\n"},{"title":"VEX机器人程序","author":"Chose_B","date":"2024-01-29T16:00:00.000Z","_content":"# 序言\n## 语言基础说明  \n\nVEX程序可以支持 _C++_ 和 _python_ ，但是在这里只涉及 ___C++___     \n如果有 _python_ 基础而没有 _C++_ 基础，建议访问[菜鸟教程](https://www.runoob.com/cplusplus/cpp-tutorial.html)来学习语法知识  \n如果编程基础近似为0而对编程有兴趣的同学，建议先在[洛谷题单](https://www.luogu.com.cn/training/list)完成入门系列之后再来看VEX的教程\n\n## 编译环境\n支持VEX程序的软件有 [vscode](https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user) 、_VEXcode pro v5_ 等，本教程只介绍 ___vscode___ 的使用  \n点击此处的链接可以下载到 _vscode_ 的安装包  \n打开 _vscode_ 之后，需要下载拓展 _chinese_ , _c/c++_ , _VEX Robotics_   \n`如果有兴趣可以追加拓展 Better C++ Syntax 、 C/C++ Compile Run 、 Dracula Official 、 CodeGeeX 等`   \n另外，为了防患于未然，下载一个 _git_ 和及时把代码上传到 _github_ 是相当的有必要的  \n（我才不会告诉你我有一次文件损坏了只好从头重写呢）  \n下载 _git_ 只需要跟着 _vscode_ 的窗口一通按就好了，如何使用请看网上的[教程](https://www.runoob.com/git/git-tutorial.html)  \n可以点击 _打开文件夹_ 来开始你的代码\n\n## 硬件条件\n\n### 主机  \n![主机图](https://picdl.sunbangyan.cn/2023/11/13/30bda85ee2d0a3bc594fb858377d6b63.png)  \n\n### 手柄  \n![手柄正面图](https://picdm.sunbangyan.cn/2023/11/13/968d794a5f0ca8bc9c740b824c06866b.jpg)  \n\n![手柄背面图](https://picdm.sunbangyan.cn/2023/11/13/fc5565c734a368637488c795360e6c48.jpg)  \n\n### 场控   \n![场控图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)  \n\n### 钢条   \n![钢条图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)  \n\n### 传感器   \n![传感器图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)  \n\n### 电机   \n![电机图](https://picdm.sunbangyan.cn/2023/11/13/b86c1e9a14d043aec8aacf6a918774dc.jpg)  \n\n### 气泵   \n![气泵图](https://picst.sunbangyan.cn/2023/11/13/04aceda6d70c2f7adc2594376fa5c41b.jpg)  \n\n## VEX社区\n    VEX在[B站](https://www.bilibili.com/)中并不算极小众的，其中更新的比较多的up主是[TXTaylor297992](https://space.bilibili.com/1684280853)   \n    此外，VEX有[中文官方论坛](https://vexforum.cn/)，在这里可以下载到官方给出的规则文档和场地拼接的文档\n\n# 面向对象\n## 面向对象思维的介绍及引入\n[wiki介绍](https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)     \n程序设计思维中，与 ___面向对象___ 相对的概念叫做 ___面向过程___ 。     \n后者考虑问题是通常把问题拆分成几个小问题，在编写程序中对应的行为一般有编写若干个函数。由于OI中一般只要考虑一个主问题即可，所以面向对象在OI中出现较多     \n前者则是将一个个功能封装进 _对象_ 中，其对应的行为以实现 _类(class)_ 为典型。这种程序设计的思维在 项目化编程 中有极大的优点——重用性、灵活性和扩展性 高\n在此处，我们将从[class](https://www.runoob.com/cplusplus/cpp-classes-objects.html)的声明、定义、使用来入手，切实的感受 ___面向对象___ 的代码风格\n## classの定义     \n[![菜鸟教程给出的定义结构](https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11.png)](https://www.runoob.com/cplusplus/cpp-classes-objects.html)\n### 类 及 类名\n给类取名的时候，可以参照[struct](https://www.runoob.com/cplusplus/cpp-data-structures.html)，命名规则和变量一致\n类的名字以及成员变量 ___最好___ 有实际意义，例：\n```cpp\nclass student{\n    private:\n    string name;//人的名字\n    int c,m,e;//C代表语文，M代表数学，E代表英语\n};\n```\n### [访问修饰符](https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html)     \n`本教程不涉及 继承 以及 protected 的使用，因为本教程用不到它们`\n- public\n    公有成员在程序中类的外部是可访问的\n    public下的成员变量以及成员函数的使用与`struct`无异\n- private\n    成员和类的默认访问修饰符是 private      \n    私有成员变量或函数在类的外部是`不可访问`的，甚至是`不可查看`的。只有`类和友元函数`可以访问私有成员。\n    例:\n    ```cpp\n    class Box {\n    private:\n        double width;\n    public:\n        double length;\n        void setWidth( double wid );\n        double getWidth( void );\n    }b;  //相当于换行写了   Box b;\n    ```\n    在这个例子中，变量width的访问修饰符是private，因此`b.width`的写法是非法的     \n    正确的做法是，通过`b.setwidth(double wid)`来设置`width`的值；\n    通过`b.getWidth()`来获得`width`的值     \n    类似这种 __在私有区域定义数据，在公有区域定义相关的函数，以便在类的外部也可以调用这些函数__ 的做法一般叫做 ___数据封装___      这样能避免受到外界的干扰和误用，从而确保了安全     \n    样例中的`length`就不符合数据封装的原则，不要这样写 ~~否则你有可能会被狠狠批斗的~~\n### [重载函数和重载运算符](https://www.runoob.com/cplusplus/cpp-overloading.html)\n#### 重载函数\nC++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。     \n在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的**形式参数**（个数、类型或顺序）必须不同。     我们不能仅通过**返回类型**的不同来重载函数。\n重载函数可以为我们调用功能较相近的函数时提供便利,例:\n```cpp\n// 哦对了，重载函数在class外也是可以使用的哦\nvoid swap(int& a,int& b)      {int t=a;a=b;b=t;}\nvoid swap(float& a,float& b)  {float t=a;a=b;b=t;}\nvoid swap(bool& a,bool& b)    {bool t=b;a=b;b=t;}\n// 以下是在类中使用的\nclass printer{\n    public:\n       print(int a)   {cout<<a;}\n       print(float a)   {cout<<a;}\n       print(string a)   {cout<<a;}\n};\n//错误示范\nint f(void){void}\nfloat f(void){void}\n//主函数\nsigned main(){\n    printer p;\n    p.print(114514);\n    p.print(\"\\n1919810\\n\");\n    int a,b;\n        cin>>a>>b;\n        swap(a,b);\n        cout<<a<<' '<<b<<endl;\n        return 0;\n}\n```\n#### 重载运算符\n在c++中，运算符实际上也可以看作是一种函数，因此，就出现了**重载运算符**的用法     \n在这里我们介绍 [赋值运算符  = ](https://www.runoob.com/cplusplus/assignment-operators-overloading.html)     \n多说无益，直接上样例：\n```cpp\nclass node{  //平面直角坐标系中的一个点\n    private:\n        int x,y; //坐标\n    public:\n        void operator= (const node& n){  \n            //此处const node& n 也可以写作node n\n            //使用&是为了提高效率，使用const是为了防止n的值被这里的赋值函数更改\n            x = n.x;    // 等效于 this->x = n.x;\n            y = n.y;    // 等效于 this->y = n.y;\n        }\n        friend istream operator>>(istream& in,node& n){\n            // 不要求掌握，看看就好\n            in>>n.x>>n.y;\n            return in;\n        }\n};\n\nsigned main(){\nnode n;\n    node m;\n    cin >> n;\n    m = n;\n    // ...\n    // 这段代码没有什么意义，只是为了说明重载运算符后类的运算就可以用符合我们原有习惯的写法来编写程序这一点而已\n    return 0；\n}\n```\n可以看出，使用重载运算符的写法非常符合我们对变量的编写习惯。  \n这使得我们在使用类时感到非常的舒适 XD  \n需要注意的是，所有的运算符函数都是放在 ___public___ 访问修饰符下的     (其中 流运算符 是以友元函数的形式)\n\n### [构造函数和析构函数](https://www.runoob.com/cplusplus/cpp-constructor-destructor.html)，[拷贝构造函数](https://www.runoob.com/cplusplus/cpp-copy-constructor.html)     \n这三个函数是类中非常特殊的函数。通过它们可以实现 **初始化新对象**、**释放对象占用内存**、**复制对象** 的作用     \n如果不编写这三个函数，编译器都会自动加入这几个函数。但是如果类中涉及到**指针**和**动态内存**时需要格外注意，此时必须人为的编写 *析构函数* 和 *拷贝构造函数*     \n切记，这三个函数都应放在 ***public*** 下\n#### 构造函数\n类的构造函数会在**每次创建类的新对象时**执行。     构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。     构造函数可用于为某些成员变量设置初始值。\n#### 析构函数\n类的析构函数会在**每次删除所创建的对象时**执行。     析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀     析构函数有助于在跳出程序（比如关闭文件、释放内存等）前**释放资源**。     默认析构函数不会释放成员指针变量所指向的内存空间，如果要释放的话，还需要人为定义释放。     因此，当类中存在*指针变量*并且有*动态内存*分配时，最好有一个析构函数用来释放内存     另外，析构函数**不可以接受形参**，因此不存在析构函数的重载函数\n#### 拷贝构造函数\n类的拷贝构造函数会在创建对象时，使用同一类中之前创建的对象来初始化新创建的对象。     \n函数一般有如下功能：\n- 通过使用另一个同类型的对象来 ___初始化___ 新创建的对象。\n- 复制对象并把它作为 ___函数参数___。\n- 复制对象并把它作为 ___函数返回值___。\n如果在类中没有定义拷贝构造函数，编译器会自行定义一个。     如果类带有*指针变量*，并有*动态内存*分配，则它必须有一个拷贝构造函数。\n\n样例：\n```cpp\nclass node{\n    private:\n        int *n;    \n    public:\n        node();//构造函数\n        node(int sum);          //带参数的构造函数\n        ~node();                //析构函数\n        node(const node& obj);  //拷贝构造函数\n        int value(){\n           return *n;\n        }\n};\nnode::node(){                  //在类外定义函数时需要在函数名前加上“类名::”\n    n = new int;                  //为指针分配内存\n    *n = 0;\n}\nnode::node(int sum){\n    n = new int;\n    *n = sum;\n}\nnode::~node(){\n    delete n;                     //释放指针内存\n}\nnode::node(const node& obj){\n    n = new int;\n    *n = *obj.n;                  //拷贝值\n}\nint VALUE(node n){return n.value();} //拷贝构造函数的用法 II\nnode bigger_one(node a,node b){return a.value()>b.value() ? a : b ;}\n    //三元运算符  ? :  。?前条件成立则返回 : 前的，否则返回 : 后的\nsigned main(){\n    node n;\n    //无参数的构造函数可以省略\n    node m(4);                    \n    //带参数的构造函数的调用需要在变量后加括号，就像函数一样\n    node k(m);\n    //拷贝构造函数的用法 I\n    n = bigger_one(m,k);\n    //拷贝构造函数用法   III\n    n = bigger_one(m,4);\n    //构造函数的另类用法，其中遇到数值4时会调用node(int num)来把4转化为node类型\n}\n```\n### [头文件](https://zh.wikipedia.org/wiki/%E5%A4%B4%E6%96%87%E4%BB%B6)与注释，cpp与定义\n还记得前文提到过 class 有着较高 重用性，灵活性，拓展性 吗？     \n如果在每一个程序的头部复制大量的class的定义，那么这种灵活性就荡然无存了     \n因此，就不得不介绍头文件了\n\n一个头文件一般包含类、子程序、变量和其他标识符的前置声明     \n习惯上，*函数、类、枚举类、常量*的声明会放在头文件中，即`xxx.h`     \n而对应的*函数、类*的源码以及*注释*则会放在对应的源文件中，即`xxx.cpp`     \n值得注意的是，为了防止头文件被反复调用造成重复声明的错误，头文件应在首行加入\n```cpp\n#pragma once\n```\n或者\n```cpp\n// xxx.h\n#ifndef XXX\n#define XXX\n//你的代码\n#endif\n```\n多说无用，下面摆上样例          \n\n[样例：实现高精度算法](https://blog.csdn.net/weixin_30500289/article/details/96110759)     \n样例的代码非常的长，但是使用时只需要：\n```cpp\n#include \"intx.h\"\nsigned main(){\n    //...\n    return 0;\n}\n```\n另外，vscode是支持[doxygen注释](https://www.cnblogs.com/schips/p/12200388.html)的     [Doxygen官方文档](https://doxygen.nl/manual/)     \n在头文件中使用doxygen注释，可以对声明的类，函数进行说明     \n鼠标在引用了对应头文件的文件中只需要悬停在函数/变量/类/命名空间/...上就可以快捷的获知该处的注释     \n样例:\n```cpp\n// node.h\n/**\n * @class node\n * @brief 表示一个平面直角坐标系中的一个点\n***/\nclass node{\n    private:\n        /**\n         * @brief 表示坐标 \\f$\\left ( x,y \\right )\\f$\n        ***/\n        int x,y;\n    public:\n        /**\n         * @brief 初始化\n         * @param a 对应x坐标\n         * @param b 对应y坐标\n        ***/\n        void set(int a,int b){\n           x = a;\n           y = b;\n        }\n        /**\n         * @brief 计算距离\n         * @param n 第二个坐标点\n         * @return 两点距离的平方\n        ***/\n        float dist(node n){\n           return (this->x - n.x)*(this->x - n.x) + (this->y - n.y)*(this->y - n.y);\n        }\n};\n```\n鼠标悬停效果图     \n   ![node的样例](https://picdl.sunbangyan.cn/2023/11/13/f733c7f3255c153f7c3b739af3aa4fad.png)     \n   ![set()的样例](https://picss.sunbangyan.cn/2023/11/13/eda1e9a2bb9d2267a57071ee053221ee.png)     \n   ![dist()的样例](https://picss.sunbangyan.cn/2023/11/13/d723d6d27e66114087a12f7b2d6c430b.png)     \n### 后期学习方式\n 学会了class的阅读、编写后，我们进入后面的学习就有了一定的基础     \n   在vscode中，***ctrl+左键***可以查看头文件、函数、类的定义区域     \n   进入`v5_vcs.h`->`v5_cpp.h`->`需要查询的文件`，就可以看到官方给出的所有函数的定义。     \n   ![01-6-e1](https://picss.sunbangyan.cn/2023/11/13/876f9447986e256e48ac73d7df16cf0a.png)    \n\t![01-6-e2](https://picss.sunbangyan.cn/2023/11/13/262d62b1cc74dc22bb1e75e63a734ad7.png)   \n\t![01-6-e3](https://picst.sunbangyan.cn/2023/11/13/4ed72494d898de9ac52b3f04d58b1062.png)     \n   当然，我会在接下来的章节来挑选重点的函数来讲解。有兴趣有余力的同学可以根据这个方法自行探究。     \n\n# 主机(brain)与手柄(Controller)\n## 主机、手柄、电脑之间的硬件连接     \n![连线图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)     \n## 创建新的VEX工程文件、文件标题规范、文件储存位置     \n从VEX插件中 顺次点击 `new project -> v5 -> c++ -> competition template -> 命名项目名字 -> create`，一个新的VEX工程文件就创建了\n## Brain.functions()\n鉴于LXB水平有限，所以这里只讲一部分重要的函数\n### 定义\n```cpp\n// robot-config.h\nextern brain Brain;\n```\n构造函数没有参数输入\n### brain.timer\n- 定义\n    ```cpp\n    // vex_brain.cpp\n    /** \n     * @brief 以指定的单位获取计时器的值。\n     * @param units 时间单位。有 sec (秒) 和 msec (毫秒)\n     * @return 返回一个双精度值，该值表示计时器的值。\n     */\n    double timer( timeUnits units );\n    /** \n     * @brief 将计时器重置为零。\n     */\n    void reset();\n    ```\n- 使用例\n    ```cpp\n        // your_file.cpp\n        float xxx;\n        Brain.Timer.reset();// 虽然在这里没必要但是这是一个好习惯\n        xxx = Brain.Timer.time(sec);\n        while ( Brain.Timer.time(msec) <= xxx*1000 + 1145 ); //空循环，经过1.145s之后会继续\n        ```\n### brain.screen\n- 定义\n    ```cpp\n    // vex_brain.cpp\n    void print( char *format, ... );\n    void printAt( int x, int y, const char *format, ... );\n    void drawPixel( int x,int y)\n    ```\n- 使用说明     \n    这里的`print()`函数的使用和`printf()`无异     \n    `printAt()`添加了参数`x`、`y`,含义是在主机屏幕输出时开始的坐标     \n    `drawPixel`是在屏幕的(x,y)处绘制一个像素点\n## Controller.functions()\n### 定义\n```cpp\n// robot-config.h\nextern controller Controller;\n```\n和 `brain` 的定义一样平淡\n### 按钮     \n![](image/01-4-2-2.jpg)     \n图中按钮可用的共有10个，分别是：\n    - ButtonLeft\n    - ButtonRight\n    - ButtonUp\n    - ButtonDown\n    - ButtonA\n    - ButtonB\n    - ButtonX\n    - ButtonY\n    - ButtonL1\n    - ButtonL2\n    - ButtonR1\n    - ButtonR2\n\n他们都属于 `controller`类中的成员类`button`，有以下成员函数：\n+ pressing()     \n    检查当下，如果按钮被按下则返回`true`，否则返回`false`。\n+ pressed()     \n    形参需要填入一个`void`函数的函数名来调用     \n    下次按钮被按下的时候调用函数\n\n使用例:\n```cpp\n// your_file.cpp\n// ...\nvoid function(void){\n   // ...\n}\n\nsigned main(){\n// ...\n   if ( Controller1.ButtonA.pressing() ){\n      // ...\n   }\n   Controller1.ButtonB.pressed(function);\n}\n```\n\n### 摇杆     \n遥控器上看似只有两个遥感，实际上程序中对应了4个`axis`对象:\n  - Axis1\n  - Axis2\n  - Axis3\n  - Axis4\n\n一个遥杆可以向任意二维方向旋转，每一个二维的位置都可以用二维坐标来表示。也就是说，一个摇杆对应了两个不同方向的`axis`对象。     \n其中，`Axis1`和`Axis4`都是横向的，`Axis2`和`Axis3`都是竖向的。     \n`axis`一般只使用成员函数`position()`\n```cpp\n// your_file.cpp\nvoid Dipan(){\n   // 底盘运动函数\n   float a1 = Controller1.Axis1.position(percent);\n   float a3 = Controller1.Axis3.position(percent);\n   move(a3+a1,a3-a1);\n}\n```\n\n### 屏幕     \n有时，我们需要在遥控器上面显示信息来提示操作手。例如，改变了某个电机的转速时，通过提示操作手可以方便操作手进行下一步操作。     \n下面是在屏幕上显示一段文字的实例:\n```cpp\n// your_debug_file.cpp\n/* ... */ {\n   Controller1.Screen.clearLine(); // 清空之前的消息\n   Controller1.Screen.print(\"电机温度:%.2f ℃\",MotorShot.temperature(celsius)); //输出格式同std::printf()\n}\n```\n\n# 电机(motor)与运动\n## 声明     \n`motor`的构造函数有3个参数(建议都填入),分别是`index`、`gears`、`reverse`。\n```cpp\n// vex_motor.h\nmotor( int32_t index, gearSetting gears, bool reverse );\n```\n   - `index`     \n      表明电机接入的端口。     \n      主机上有两排端口,编号1-22。电机接入第`N`个端口就写 `PORTN`\n   - `gears`     \n      表明电机转速比     \n      有三种转速比,`ratio6_1`、`ratio18_1`、`ratio36_1`,     分别对应三种颜色的电机:蓝电机、绿电机、红电机     \n\n      ![](image/motor_radio.png)     \n   - `reverse`     \n      电机默认转向:正转or反转\n\n```cpp\n// robot-config.h\n// ...\nmotor MotorLF = motor(PORT1,radio18_1,false);\nmotor MotorLB = motor(PORT2,radio18_1,false);\nmotor MotorRF = motor(PORT3,radio18_1,true);\nmotor MotorRB = motor(PORT4,radio18_1,true);\n```\n## 电机 与 手动控制程序     \n### 电机转动     \n+ `spin()`     \n   此函数会让电机以指定速度旋转。     \n   ```cpp\n   // vex_motor.h\n   /**\n   * @brief 打开电机并按指定方向和指定速度旋转。\n   * @param dir 电机旋转的方向。有 forward 和 reverse 两种值。也支持 fwd 和 rev 两种缩写\n   * @param velocity 速度大小。值域[-100.0,100.0]。超出则化为 ±100\n   * @param units 速度的单位。常用 percent ,也可缩写为 pct\n   */\n   void spin( directionType dir, double velocity, velocityUnits units );\n   ```\n   以底盘的运动程序为例：\n   \n   ```cpp\n   // your_file.h\n   void move(float l,float r){\n      MotorLF.spin(forward,l,pct);\n      MotorLB.spin(forward,l,pct);\n      MotorRF.spin(forward,r,pct);\n      MotorRB.spin(forward,r,pct);\n   }\n   ```\n+ `stop()`     \n   使电机停止(停止向电机供电)\n   ```cpp\n   /** \n   * @brief 使用默认制动模式停止电机。\n   */\n   void stop( void );\n\n   /** \n   * @brief 使用指定的制动模式停止电机。\n   * @param mode 制动模式可以设置为滑行(coast)、制动(brake)或保持(hold)。\n   */\n   void stop( brakeType mode );\n   ```\n   以底盘的停止运行为例:\n   ```cpp\n   // your_file.cpp\n   void Stop(bool flag = false){\n      if (flag == false){\n         MotorLF.stop(coast);\n         MotorLB.stop(coast);\n         MotorRF.stop(coast);\n         MotorRB.stop(coast);\n      }\n      else{\n         MotorLF.stop(hold);\n         MotorLB.stop(hold);\n         MotorRF.stop(hold);\n         MotorRB.stop(hold);\n      }\n   }\n   ```\n底盘的停止一般使用`coast`。这是为了防止`hold`状态下机器人被碰撞导致电机的损坏。\n自动程序中由于有`不允许进入对手场地`的规则，因此只要队伍内部有配合，就不用讨论上述的问题\n### 监测电机\n* `double position( rotationUnits units )`     \n  返回电机转过的角度     \n  一般填入单位 degrees     \n* `void resetPosition()`     \n  重置 `position()`的返回值     \n  重置需要一小段时间，重置时尽量保持电机的静止\n* `double temperature( temperatureUnits units );`     \n  返回电机此时的温度     \n  可填入单位 摄氏度(`celsius`)     \n* ...\n\n# 陀螺仪 与 自动转弯\n## 声明、命名\n    需要填入的参数仅有端口\n    ```cpp\n    // vex_imu.h\n    inertial( int32_t index, turnType dir = turnType::right );  \n    ```\n    声明比`motor`简单\n    ```cpp\n    // robot-config.cpp\n    inertial ine = inertial(PORT11);\n    ```\n## 初始化\n类似于`motor`中的`position()`，对陀螺仪初始化是必要的。\n```cpp\n// your_file.cpp\nvoid reset(){\n  //初始化底盘电机\n  MotorLF.resetPosition();\n  MotorLB.resetPosition();\n  MotorRF.resetPosition();\n  MotorRB.resetPosition();\n  //初始化陀螺仪\n  ine.calibrate();\n  //初始化计时器\n  Brain.Timer.reset();\n}\n```\n## 数据检测\n仅介绍最常用的`heading()`,其他函数仅作涉及\n\n * `heading()`\n    ```cpp\n    /**\n     * @brief 获取惯性传感器的水平方向,方向角取值范围 [0,360] ,单位:度\n     * @return 返回一个double值，该值表示惯性传感器的方向。\n     * @param units 单位,默认为度\n     */\n    double heading( rotationUnits units = rotationUnits::deg );\n    ```\n    \n * `rotation()`  \n    获取仰角\n## 自动程序中的转弯问题     \n自动程序中，是不可以通过操作手柄来给机器人输入数据的。因此，机器人在自动赛时段的运动完全依靠程序的预设。     \n*如何让机器人旋转到我们需要的方向？*     \n\n\n最简单的写法是使用计时器。机器人旋转的速度是粗略相等的，因此在程序开发时间较短的情况下，这可以作为最后的保底程序来使用。\n   ```cpp\n   // your_auto_file.cpp\n   void turn_with_timer(int t){\n      int turn_speed=100;\n      if (t<0) {\n         turn_speed=-100;\n         t=-t;\n      }                                   // 左右转放在同一程序里\n      move(turn_speed,-turn_speed);\n      wait(t,msec);                       // 定义见于vex.h中\n      stop(true);                         // 旋转结束建议锁死，以提高准确度\n   }\n   ```\n但是这并不是一个合适的方案。我们难以控制每次旋转时的环境因素保持一样(比如地面摩擦系数，电机温度，电池电压等)。有时这种小小的偏差就会导致行进线路的变形，会影响到之后的自动任务，甚至可能`DQ(犯规)`。     \n在精准转弯的要求下，我们便需要陀螺仪来帮助校准。  \n```cpp\n// your_auto_file.cpp\n#include \"extensions.h\"    // include pids.h\nvoid turn(int deg){\n  pids turning ;          // 定义pid算法对象\n  turning.pre(deg,10);    // 向pid系统中输入目标和最大允许偏差\n  float movement;         // 记录每次pid系统反馈的运动量\n  Ine.calibrate();        // 初始化陀螺仪\n  while ( turning.check (Ine.heading(degrees)) )  {\n                          // 当机器人还未稳定在最大允许偏差区间内时一直不断调整\n    movement = turning.moving();\n    move(-movement *0.4,movement *0.4);\n                          // 运动\n  }\n  \n  stop(false);             // pid算法下机器人旋转的末速度很小，不需要hold\n  wait (0.8,sec);          // 等待机器人彻底停止\n}\n```\n`PID算法`将在[第7章节](/README.md/#07-pid精确控制算法)中详细介绍其优缺点。\n## 画外吐槽     \n我非常讨厌陀螺仪     \n因为它带给我的回忆除了出bug就是掉链子     \n\n[陀螺仪发癫珍贵录像](https://www.bilibili.com/video/BV1FW4y1V7af)\n\n# 气泵\n## 定义、命名     \n气泵的程序其实是最简单的，只不过定义和电机或者传感器都有点区别\n```cpp\n// vex_triport.h\n/**\n* @brief 在参数中指定的三线端口上创建新的digital_out对象。\n* @param port 三线端口。\n*/\ndigital_out( triport::port &port );\n```\n`triport`和电机端口的`int32_t`不同     \n|port : |int32_t|triport|\n|-|-|-|\n|个数|21|8|\n|编号|1-22|A-H|\n|位置|主机上下两侧|主机左侧|\n|格式|PORTn|Brain.ThreeWirePort.N|\n\n习惯上把气泵命名为 `pne` (Pneumatic components)\n```cpp\n// robot-config.cpp\ndigital_out pne ( Brain.ThreeWirePort.A );\n```\n\n## 实物介绍     \n气泵的程序很简单，但是气泵的部件比电机复杂的多     \n![](image/05-2-e1.png)     \n图中的结构中，通过程序所能操作的仅仅是 发送到/接受数据于 `换向阀驱动器` ，从而改变换向阀联通的状态。     \n机器人上是否使用气泵，需要考虑机械师的技术水平。因为程序能在气泵上做的事情太少太简单了。\n## functions\n* `set()`\n  设置气泵的伸缩状态。\n  ```cpp\n  /**\n     * @brief 将digital_out设备设置为布尔值。\n     * @param value 布尔值。(true or false)\n     */\n    void set( bool value );\n  ```\n  当`pne.set(true)`执行后，换向阀驱动器将会亮起红灯     \n  当`pne.set(false)`执行后，换向阀驱动器红队将会熄灭\n* value()     \n  读取气泵的状态     \n  `pne.set(true)`后，value的返回值就会变为`true`，反之亦然。\n\n# 视觉传感器\n1. 定义、命名\n2. 初始化\n3. 颜色设置 和 识别机制的介绍\n4. 返回值\n\n# *PID精确控制算法\n1. 定义\n2. 原理介绍\n3. 使用方法\n4. 优缺点     \n   优点在本章中已经反复强调了,就是通过pid算法的控制，机器人能够精确的运动。     \n   缺点就是把pid的算法中用于前进的控制中会大大降低前进的效率     \n   这种缺点只会体现在***需要停止的运动***中，比如说**前进**、**转弯**这类运动中。pid最适合的应用应该是 ___一直维持某种状态___ 的情况下，例如 __平衡车的平衡__ , 这时pid的运行是贯彻平衡车运动的始终的，也就不存在所谓**超时**的问题了。\n\n# 手动程序\n1. 与操作手对接\n2. 底盘方案\n   * 左前进右旋转\n   * 万向底盘\n   * 无头模式\n\n# 自动程序\n1. 自动赛规则\n2. 前进控制\n3. 转弯控制\n4. 完成自动赛任务\n5. 多备案 + 耐心\n\n# 规则类怪谈\n1. 码风要求\n2. 注释规范化\n3. 请参与github的更新\n","source":"_posts/VEX机器人程序.md","raw":"---\ntitle: VEX机器人程序\nauthor: Chose_B\ndate: 2024-01-30\n---\n# 序言\n## 语言基础说明  \n\nVEX程序可以支持 _C++_ 和 _python_ ，但是在这里只涉及 ___C++___     \n如果有 _python_ 基础而没有 _C++_ 基础，建议访问[菜鸟教程](https://www.runoob.com/cplusplus/cpp-tutorial.html)来学习语法知识  \n如果编程基础近似为0而对编程有兴趣的同学，建议先在[洛谷题单](https://www.luogu.com.cn/training/list)完成入门系列之后再来看VEX的教程\n\n## 编译环境\n支持VEX程序的软件有 [vscode](https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user) 、_VEXcode pro v5_ 等，本教程只介绍 ___vscode___ 的使用  \n点击此处的链接可以下载到 _vscode_ 的安装包  \n打开 _vscode_ 之后，需要下载拓展 _chinese_ , _c/c++_ , _VEX Robotics_   \n`如果有兴趣可以追加拓展 Better C++ Syntax 、 C/C++ Compile Run 、 Dracula Official 、 CodeGeeX 等`   \n另外，为了防患于未然，下载一个 _git_ 和及时把代码上传到 _github_ 是相当的有必要的  \n（我才不会告诉你我有一次文件损坏了只好从头重写呢）  \n下载 _git_ 只需要跟着 _vscode_ 的窗口一通按就好了，如何使用请看网上的[教程](https://www.runoob.com/git/git-tutorial.html)  \n可以点击 _打开文件夹_ 来开始你的代码\n\n## 硬件条件\n\n### 主机  \n![主机图](https://picdl.sunbangyan.cn/2023/11/13/30bda85ee2d0a3bc594fb858377d6b63.png)  \n\n### 手柄  \n![手柄正面图](https://picdm.sunbangyan.cn/2023/11/13/968d794a5f0ca8bc9c740b824c06866b.jpg)  \n\n![手柄背面图](https://picdm.sunbangyan.cn/2023/11/13/fc5565c734a368637488c795360e6c48.jpg)  \n\n### 场控   \n![场控图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)  \n\n### 钢条   \n![钢条图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)  \n\n### 传感器   \n![传感器图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)  \n\n### 电机   \n![电机图](https://picdm.sunbangyan.cn/2023/11/13/b86c1e9a14d043aec8aacf6a918774dc.jpg)  \n\n### 气泵   \n![气泵图](https://picst.sunbangyan.cn/2023/11/13/04aceda6d70c2f7adc2594376fa5c41b.jpg)  \n\n## VEX社区\n    VEX在[B站](https://www.bilibili.com/)中并不算极小众的，其中更新的比较多的up主是[TXTaylor297992](https://space.bilibili.com/1684280853)   \n    此外，VEX有[中文官方论坛](https://vexforum.cn/)，在这里可以下载到官方给出的规则文档和场地拼接的文档\n\n# 面向对象\n## 面向对象思维的介绍及引入\n[wiki介绍](https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)     \n程序设计思维中，与 ___面向对象___ 相对的概念叫做 ___面向过程___ 。     \n后者考虑问题是通常把问题拆分成几个小问题，在编写程序中对应的行为一般有编写若干个函数。由于OI中一般只要考虑一个主问题即可，所以面向对象在OI中出现较多     \n前者则是将一个个功能封装进 _对象_ 中，其对应的行为以实现 _类(class)_ 为典型。这种程序设计的思维在 项目化编程 中有极大的优点——重用性、灵活性和扩展性 高\n在此处，我们将从[class](https://www.runoob.com/cplusplus/cpp-classes-objects.html)的声明、定义、使用来入手，切实的感受 ___面向对象___ 的代码风格\n## classの定义     \n[![菜鸟教程给出的定义结构](https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11.png)](https://www.runoob.com/cplusplus/cpp-classes-objects.html)\n### 类 及 类名\n给类取名的时候，可以参照[struct](https://www.runoob.com/cplusplus/cpp-data-structures.html)，命名规则和变量一致\n类的名字以及成员变量 ___最好___ 有实际意义，例：\n```cpp\nclass student{\n    private:\n    string name;//人的名字\n    int c,m,e;//C代表语文，M代表数学，E代表英语\n};\n```\n### [访问修饰符](https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html)     \n`本教程不涉及 继承 以及 protected 的使用，因为本教程用不到它们`\n- public\n    公有成员在程序中类的外部是可访问的\n    public下的成员变量以及成员函数的使用与`struct`无异\n- private\n    成员和类的默认访问修饰符是 private      \n    私有成员变量或函数在类的外部是`不可访问`的，甚至是`不可查看`的。只有`类和友元函数`可以访问私有成员。\n    例:\n    ```cpp\n    class Box {\n    private:\n        double width;\n    public:\n        double length;\n        void setWidth( double wid );\n        double getWidth( void );\n    }b;  //相当于换行写了   Box b;\n    ```\n    在这个例子中，变量width的访问修饰符是private，因此`b.width`的写法是非法的     \n    正确的做法是，通过`b.setwidth(double wid)`来设置`width`的值；\n    通过`b.getWidth()`来获得`width`的值     \n    类似这种 __在私有区域定义数据，在公有区域定义相关的函数，以便在类的外部也可以调用这些函数__ 的做法一般叫做 ___数据封装___      这样能避免受到外界的干扰和误用，从而确保了安全     \n    样例中的`length`就不符合数据封装的原则，不要这样写 ~~否则你有可能会被狠狠批斗的~~\n### [重载函数和重载运算符](https://www.runoob.com/cplusplus/cpp-overloading.html)\n#### 重载函数\nC++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。     \n在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的**形式参数**（个数、类型或顺序）必须不同。     我们不能仅通过**返回类型**的不同来重载函数。\n重载函数可以为我们调用功能较相近的函数时提供便利,例:\n```cpp\n// 哦对了，重载函数在class外也是可以使用的哦\nvoid swap(int& a,int& b)      {int t=a;a=b;b=t;}\nvoid swap(float& a,float& b)  {float t=a;a=b;b=t;}\nvoid swap(bool& a,bool& b)    {bool t=b;a=b;b=t;}\n// 以下是在类中使用的\nclass printer{\n    public:\n       print(int a)   {cout<<a;}\n       print(float a)   {cout<<a;}\n       print(string a)   {cout<<a;}\n};\n//错误示范\nint f(void){void}\nfloat f(void){void}\n//主函数\nsigned main(){\n    printer p;\n    p.print(114514);\n    p.print(\"\\n1919810\\n\");\n    int a,b;\n        cin>>a>>b;\n        swap(a,b);\n        cout<<a<<' '<<b<<endl;\n        return 0;\n}\n```\n#### 重载运算符\n在c++中，运算符实际上也可以看作是一种函数，因此，就出现了**重载运算符**的用法     \n在这里我们介绍 [赋值运算符  = ](https://www.runoob.com/cplusplus/assignment-operators-overloading.html)     \n多说无益，直接上样例：\n```cpp\nclass node{  //平面直角坐标系中的一个点\n    private:\n        int x,y; //坐标\n    public:\n        void operator= (const node& n){  \n            //此处const node& n 也可以写作node n\n            //使用&是为了提高效率，使用const是为了防止n的值被这里的赋值函数更改\n            x = n.x;    // 等效于 this->x = n.x;\n            y = n.y;    // 等效于 this->y = n.y;\n        }\n        friend istream operator>>(istream& in,node& n){\n            // 不要求掌握，看看就好\n            in>>n.x>>n.y;\n            return in;\n        }\n};\n\nsigned main(){\nnode n;\n    node m;\n    cin >> n;\n    m = n;\n    // ...\n    // 这段代码没有什么意义，只是为了说明重载运算符后类的运算就可以用符合我们原有习惯的写法来编写程序这一点而已\n    return 0；\n}\n```\n可以看出，使用重载运算符的写法非常符合我们对变量的编写习惯。  \n这使得我们在使用类时感到非常的舒适 XD  \n需要注意的是，所有的运算符函数都是放在 ___public___ 访问修饰符下的     (其中 流运算符 是以友元函数的形式)\n\n### [构造函数和析构函数](https://www.runoob.com/cplusplus/cpp-constructor-destructor.html)，[拷贝构造函数](https://www.runoob.com/cplusplus/cpp-copy-constructor.html)     \n这三个函数是类中非常特殊的函数。通过它们可以实现 **初始化新对象**、**释放对象占用内存**、**复制对象** 的作用     \n如果不编写这三个函数，编译器都会自动加入这几个函数。但是如果类中涉及到**指针**和**动态内存**时需要格外注意，此时必须人为的编写 *析构函数* 和 *拷贝构造函数*     \n切记，这三个函数都应放在 ***public*** 下\n#### 构造函数\n类的构造函数会在**每次创建类的新对象时**执行。     构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。     构造函数可用于为某些成员变量设置初始值。\n#### 析构函数\n类的析构函数会在**每次删除所创建的对象时**执行。     析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀     析构函数有助于在跳出程序（比如关闭文件、释放内存等）前**释放资源**。     默认析构函数不会释放成员指针变量所指向的内存空间，如果要释放的话，还需要人为定义释放。     因此，当类中存在*指针变量*并且有*动态内存*分配时，最好有一个析构函数用来释放内存     另外，析构函数**不可以接受形参**，因此不存在析构函数的重载函数\n#### 拷贝构造函数\n类的拷贝构造函数会在创建对象时，使用同一类中之前创建的对象来初始化新创建的对象。     \n函数一般有如下功能：\n- 通过使用另一个同类型的对象来 ___初始化___ 新创建的对象。\n- 复制对象并把它作为 ___函数参数___。\n- 复制对象并把它作为 ___函数返回值___。\n如果在类中没有定义拷贝构造函数，编译器会自行定义一个。     如果类带有*指针变量*，并有*动态内存*分配，则它必须有一个拷贝构造函数。\n\n样例：\n```cpp\nclass node{\n    private:\n        int *n;    \n    public:\n        node();//构造函数\n        node(int sum);          //带参数的构造函数\n        ~node();                //析构函数\n        node(const node& obj);  //拷贝构造函数\n        int value(){\n           return *n;\n        }\n};\nnode::node(){                  //在类外定义函数时需要在函数名前加上“类名::”\n    n = new int;                  //为指针分配内存\n    *n = 0;\n}\nnode::node(int sum){\n    n = new int;\n    *n = sum;\n}\nnode::~node(){\n    delete n;                     //释放指针内存\n}\nnode::node(const node& obj){\n    n = new int;\n    *n = *obj.n;                  //拷贝值\n}\nint VALUE(node n){return n.value();} //拷贝构造函数的用法 II\nnode bigger_one(node a,node b){return a.value()>b.value() ? a : b ;}\n    //三元运算符  ? :  。?前条件成立则返回 : 前的，否则返回 : 后的\nsigned main(){\n    node n;\n    //无参数的构造函数可以省略\n    node m(4);                    \n    //带参数的构造函数的调用需要在变量后加括号，就像函数一样\n    node k(m);\n    //拷贝构造函数的用法 I\n    n = bigger_one(m,k);\n    //拷贝构造函数用法   III\n    n = bigger_one(m,4);\n    //构造函数的另类用法，其中遇到数值4时会调用node(int num)来把4转化为node类型\n}\n```\n### [头文件](https://zh.wikipedia.org/wiki/%E5%A4%B4%E6%96%87%E4%BB%B6)与注释，cpp与定义\n还记得前文提到过 class 有着较高 重用性，灵活性，拓展性 吗？     \n如果在每一个程序的头部复制大量的class的定义，那么这种灵活性就荡然无存了     \n因此，就不得不介绍头文件了\n\n一个头文件一般包含类、子程序、变量和其他标识符的前置声明     \n习惯上，*函数、类、枚举类、常量*的声明会放在头文件中，即`xxx.h`     \n而对应的*函数、类*的源码以及*注释*则会放在对应的源文件中，即`xxx.cpp`     \n值得注意的是，为了防止头文件被反复调用造成重复声明的错误，头文件应在首行加入\n```cpp\n#pragma once\n```\n或者\n```cpp\n// xxx.h\n#ifndef XXX\n#define XXX\n//你的代码\n#endif\n```\n多说无用，下面摆上样例          \n\n[样例：实现高精度算法](https://blog.csdn.net/weixin_30500289/article/details/96110759)     \n样例的代码非常的长，但是使用时只需要：\n```cpp\n#include \"intx.h\"\nsigned main(){\n    //...\n    return 0;\n}\n```\n另外，vscode是支持[doxygen注释](https://www.cnblogs.com/schips/p/12200388.html)的     [Doxygen官方文档](https://doxygen.nl/manual/)     \n在头文件中使用doxygen注释，可以对声明的类，函数进行说明     \n鼠标在引用了对应头文件的文件中只需要悬停在函数/变量/类/命名空间/...上就可以快捷的获知该处的注释     \n样例:\n```cpp\n// node.h\n/**\n * @class node\n * @brief 表示一个平面直角坐标系中的一个点\n***/\nclass node{\n    private:\n        /**\n         * @brief 表示坐标 \\f$\\left ( x,y \\right )\\f$\n        ***/\n        int x,y;\n    public:\n        /**\n         * @brief 初始化\n         * @param a 对应x坐标\n         * @param b 对应y坐标\n        ***/\n        void set(int a,int b){\n           x = a;\n           y = b;\n        }\n        /**\n         * @brief 计算距离\n         * @param n 第二个坐标点\n         * @return 两点距离的平方\n        ***/\n        float dist(node n){\n           return (this->x - n.x)*(this->x - n.x) + (this->y - n.y)*(this->y - n.y);\n        }\n};\n```\n鼠标悬停效果图     \n   ![node的样例](https://picdl.sunbangyan.cn/2023/11/13/f733c7f3255c153f7c3b739af3aa4fad.png)     \n   ![set()的样例](https://picss.sunbangyan.cn/2023/11/13/eda1e9a2bb9d2267a57071ee053221ee.png)     \n   ![dist()的样例](https://picss.sunbangyan.cn/2023/11/13/d723d6d27e66114087a12f7b2d6c430b.png)     \n### 后期学习方式\n 学会了class的阅读、编写后，我们进入后面的学习就有了一定的基础     \n   在vscode中，***ctrl+左键***可以查看头文件、函数、类的定义区域     \n   进入`v5_vcs.h`->`v5_cpp.h`->`需要查询的文件`，就可以看到官方给出的所有函数的定义。     \n   ![01-6-e1](https://picss.sunbangyan.cn/2023/11/13/876f9447986e256e48ac73d7df16cf0a.png)    \n\t![01-6-e2](https://picss.sunbangyan.cn/2023/11/13/262d62b1cc74dc22bb1e75e63a734ad7.png)   \n\t![01-6-e3](https://picst.sunbangyan.cn/2023/11/13/4ed72494d898de9ac52b3f04d58b1062.png)     \n   当然，我会在接下来的章节来挑选重点的函数来讲解。有兴趣有余力的同学可以根据这个方法自行探究。     \n\n# 主机(brain)与手柄(Controller)\n## 主机、手柄、电脑之间的硬件连接     \n![连线图](https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png)     \n## 创建新的VEX工程文件、文件标题规范、文件储存位置     \n从VEX插件中 顺次点击 `new project -> v5 -> c++ -> competition template -> 命名项目名字 -> create`，一个新的VEX工程文件就创建了\n## Brain.functions()\n鉴于LXB水平有限，所以这里只讲一部分重要的函数\n### 定义\n```cpp\n// robot-config.h\nextern brain Brain;\n```\n构造函数没有参数输入\n### brain.timer\n- 定义\n    ```cpp\n    // vex_brain.cpp\n    /** \n     * @brief 以指定的单位获取计时器的值。\n     * @param units 时间单位。有 sec (秒) 和 msec (毫秒)\n     * @return 返回一个双精度值，该值表示计时器的值。\n     */\n    double timer( timeUnits units );\n    /** \n     * @brief 将计时器重置为零。\n     */\n    void reset();\n    ```\n- 使用例\n    ```cpp\n        // your_file.cpp\n        float xxx;\n        Brain.Timer.reset();// 虽然在这里没必要但是这是一个好习惯\n        xxx = Brain.Timer.time(sec);\n        while ( Brain.Timer.time(msec) <= xxx*1000 + 1145 ); //空循环，经过1.145s之后会继续\n        ```\n### brain.screen\n- 定义\n    ```cpp\n    // vex_brain.cpp\n    void print( char *format, ... );\n    void printAt( int x, int y, const char *format, ... );\n    void drawPixel( int x,int y)\n    ```\n- 使用说明     \n    这里的`print()`函数的使用和`printf()`无异     \n    `printAt()`添加了参数`x`、`y`,含义是在主机屏幕输出时开始的坐标     \n    `drawPixel`是在屏幕的(x,y)处绘制一个像素点\n## Controller.functions()\n### 定义\n```cpp\n// robot-config.h\nextern controller Controller;\n```\n和 `brain` 的定义一样平淡\n### 按钮     \n![](image/01-4-2-2.jpg)     \n图中按钮可用的共有10个，分别是：\n    - ButtonLeft\n    - ButtonRight\n    - ButtonUp\n    - ButtonDown\n    - ButtonA\n    - ButtonB\n    - ButtonX\n    - ButtonY\n    - ButtonL1\n    - ButtonL2\n    - ButtonR1\n    - ButtonR2\n\n他们都属于 `controller`类中的成员类`button`，有以下成员函数：\n+ pressing()     \n    检查当下，如果按钮被按下则返回`true`，否则返回`false`。\n+ pressed()     \n    形参需要填入一个`void`函数的函数名来调用     \n    下次按钮被按下的时候调用函数\n\n使用例:\n```cpp\n// your_file.cpp\n// ...\nvoid function(void){\n   // ...\n}\n\nsigned main(){\n// ...\n   if ( Controller1.ButtonA.pressing() ){\n      // ...\n   }\n   Controller1.ButtonB.pressed(function);\n}\n```\n\n### 摇杆     \n遥控器上看似只有两个遥感，实际上程序中对应了4个`axis`对象:\n  - Axis1\n  - Axis2\n  - Axis3\n  - Axis4\n\n一个遥杆可以向任意二维方向旋转，每一个二维的位置都可以用二维坐标来表示。也就是说，一个摇杆对应了两个不同方向的`axis`对象。     \n其中，`Axis1`和`Axis4`都是横向的，`Axis2`和`Axis3`都是竖向的。     \n`axis`一般只使用成员函数`position()`\n```cpp\n// your_file.cpp\nvoid Dipan(){\n   // 底盘运动函数\n   float a1 = Controller1.Axis1.position(percent);\n   float a3 = Controller1.Axis3.position(percent);\n   move(a3+a1,a3-a1);\n}\n```\n\n### 屏幕     \n有时，我们需要在遥控器上面显示信息来提示操作手。例如，改变了某个电机的转速时，通过提示操作手可以方便操作手进行下一步操作。     \n下面是在屏幕上显示一段文字的实例:\n```cpp\n// your_debug_file.cpp\n/* ... */ {\n   Controller1.Screen.clearLine(); // 清空之前的消息\n   Controller1.Screen.print(\"电机温度:%.2f ℃\",MotorShot.temperature(celsius)); //输出格式同std::printf()\n}\n```\n\n# 电机(motor)与运动\n## 声明     \n`motor`的构造函数有3个参数(建议都填入),分别是`index`、`gears`、`reverse`。\n```cpp\n// vex_motor.h\nmotor( int32_t index, gearSetting gears, bool reverse );\n```\n   - `index`     \n      表明电机接入的端口。     \n      主机上有两排端口,编号1-22。电机接入第`N`个端口就写 `PORTN`\n   - `gears`     \n      表明电机转速比     \n      有三种转速比,`ratio6_1`、`ratio18_1`、`ratio36_1`,     分别对应三种颜色的电机:蓝电机、绿电机、红电机     \n\n      ![](image/motor_radio.png)     \n   - `reverse`     \n      电机默认转向:正转or反转\n\n```cpp\n// robot-config.h\n// ...\nmotor MotorLF = motor(PORT1,radio18_1,false);\nmotor MotorLB = motor(PORT2,radio18_1,false);\nmotor MotorRF = motor(PORT3,radio18_1,true);\nmotor MotorRB = motor(PORT4,radio18_1,true);\n```\n## 电机 与 手动控制程序     \n### 电机转动     \n+ `spin()`     \n   此函数会让电机以指定速度旋转。     \n   ```cpp\n   // vex_motor.h\n   /**\n   * @brief 打开电机并按指定方向和指定速度旋转。\n   * @param dir 电机旋转的方向。有 forward 和 reverse 两种值。也支持 fwd 和 rev 两种缩写\n   * @param velocity 速度大小。值域[-100.0,100.0]。超出则化为 ±100\n   * @param units 速度的单位。常用 percent ,也可缩写为 pct\n   */\n   void spin( directionType dir, double velocity, velocityUnits units );\n   ```\n   以底盘的运动程序为例：\n   \n   ```cpp\n   // your_file.h\n   void move(float l,float r){\n      MotorLF.spin(forward,l,pct);\n      MotorLB.spin(forward,l,pct);\n      MotorRF.spin(forward,r,pct);\n      MotorRB.spin(forward,r,pct);\n   }\n   ```\n+ `stop()`     \n   使电机停止(停止向电机供电)\n   ```cpp\n   /** \n   * @brief 使用默认制动模式停止电机。\n   */\n   void stop( void );\n\n   /** \n   * @brief 使用指定的制动模式停止电机。\n   * @param mode 制动模式可以设置为滑行(coast)、制动(brake)或保持(hold)。\n   */\n   void stop( brakeType mode );\n   ```\n   以底盘的停止运行为例:\n   ```cpp\n   // your_file.cpp\n   void Stop(bool flag = false){\n      if (flag == false){\n         MotorLF.stop(coast);\n         MotorLB.stop(coast);\n         MotorRF.stop(coast);\n         MotorRB.stop(coast);\n      }\n      else{\n         MotorLF.stop(hold);\n         MotorLB.stop(hold);\n         MotorRF.stop(hold);\n         MotorRB.stop(hold);\n      }\n   }\n   ```\n底盘的停止一般使用`coast`。这是为了防止`hold`状态下机器人被碰撞导致电机的损坏。\n自动程序中由于有`不允许进入对手场地`的规则，因此只要队伍内部有配合，就不用讨论上述的问题\n### 监测电机\n* `double position( rotationUnits units )`     \n  返回电机转过的角度     \n  一般填入单位 degrees     \n* `void resetPosition()`     \n  重置 `position()`的返回值     \n  重置需要一小段时间，重置时尽量保持电机的静止\n* `double temperature( temperatureUnits units );`     \n  返回电机此时的温度     \n  可填入单位 摄氏度(`celsius`)     \n* ...\n\n# 陀螺仪 与 自动转弯\n## 声明、命名\n    需要填入的参数仅有端口\n    ```cpp\n    // vex_imu.h\n    inertial( int32_t index, turnType dir = turnType::right );  \n    ```\n    声明比`motor`简单\n    ```cpp\n    // robot-config.cpp\n    inertial ine = inertial(PORT11);\n    ```\n## 初始化\n类似于`motor`中的`position()`，对陀螺仪初始化是必要的。\n```cpp\n// your_file.cpp\nvoid reset(){\n  //初始化底盘电机\n  MotorLF.resetPosition();\n  MotorLB.resetPosition();\n  MotorRF.resetPosition();\n  MotorRB.resetPosition();\n  //初始化陀螺仪\n  ine.calibrate();\n  //初始化计时器\n  Brain.Timer.reset();\n}\n```\n## 数据检测\n仅介绍最常用的`heading()`,其他函数仅作涉及\n\n * `heading()`\n    ```cpp\n    /**\n     * @brief 获取惯性传感器的水平方向,方向角取值范围 [0,360] ,单位:度\n     * @return 返回一个double值，该值表示惯性传感器的方向。\n     * @param units 单位,默认为度\n     */\n    double heading( rotationUnits units = rotationUnits::deg );\n    ```\n    \n * `rotation()`  \n    获取仰角\n## 自动程序中的转弯问题     \n自动程序中，是不可以通过操作手柄来给机器人输入数据的。因此，机器人在自动赛时段的运动完全依靠程序的预设。     \n*如何让机器人旋转到我们需要的方向？*     \n\n\n最简单的写法是使用计时器。机器人旋转的速度是粗略相等的，因此在程序开发时间较短的情况下，这可以作为最后的保底程序来使用。\n   ```cpp\n   // your_auto_file.cpp\n   void turn_with_timer(int t){\n      int turn_speed=100;\n      if (t<0) {\n         turn_speed=-100;\n         t=-t;\n      }                                   // 左右转放在同一程序里\n      move(turn_speed,-turn_speed);\n      wait(t,msec);                       // 定义见于vex.h中\n      stop(true);                         // 旋转结束建议锁死，以提高准确度\n   }\n   ```\n但是这并不是一个合适的方案。我们难以控制每次旋转时的环境因素保持一样(比如地面摩擦系数，电机温度，电池电压等)。有时这种小小的偏差就会导致行进线路的变形，会影响到之后的自动任务，甚至可能`DQ(犯规)`。     \n在精准转弯的要求下，我们便需要陀螺仪来帮助校准。  \n```cpp\n// your_auto_file.cpp\n#include \"extensions.h\"    // include pids.h\nvoid turn(int deg){\n  pids turning ;          // 定义pid算法对象\n  turning.pre(deg,10);    // 向pid系统中输入目标和最大允许偏差\n  float movement;         // 记录每次pid系统反馈的运动量\n  Ine.calibrate();        // 初始化陀螺仪\n  while ( turning.check (Ine.heading(degrees)) )  {\n                          // 当机器人还未稳定在最大允许偏差区间内时一直不断调整\n    movement = turning.moving();\n    move(-movement *0.4,movement *0.4);\n                          // 运动\n  }\n  \n  stop(false);             // pid算法下机器人旋转的末速度很小，不需要hold\n  wait (0.8,sec);          // 等待机器人彻底停止\n}\n```\n`PID算法`将在[第7章节](/README.md/#07-pid精确控制算法)中详细介绍其优缺点。\n## 画外吐槽     \n我非常讨厌陀螺仪     \n因为它带给我的回忆除了出bug就是掉链子     \n\n[陀螺仪发癫珍贵录像](https://www.bilibili.com/video/BV1FW4y1V7af)\n\n# 气泵\n## 定义、命名     \n气泵的程序其实是最简单的，只不过定义和电机或者传感器都有点区别\n```cpp\n// vex_triport.h\n/**\n* @brief 在参数中指定的三线端口上创建新的digital_out对象。\n* @param port 三线端口。\n*/\ndigital_out( triport::port &port );\n```\n`triport`和电机端口的`int32_t`不同     \n|port : |int32_t|triport|\n|-|-|-|\n|个数|21|8|\n|编号|1-22|A-H|\n|位置|主机上下两侧|主机左侧|\n|格式|PORTn|Brain.ThreeWirePort.N|\n\n习惯上把气泵命名为 `pne` (Pneumatic components)\n```cpp\n// robot-config.cpp\ndigital_out pne ( Brain.ThreeWirePort.A );\n```\n\n## 实物介绍     \n气泵的程序很简单，但是气泵的部件比电机复杂的多     \n![](image/05-2-e1.png)     \n图中的结构中，通过程序所能操作的仅仅是 发送到/接受数据于 `换向阀驱动器` ，从而改变换向阀联通的状态。     \n机器人上是否使用气泵，需要考虑机械师的技术水平。因为程序能在气泵上做的事情太少太简单了。\n## functions\n* `set()`\n  设置气泵的伸缩状态。\n  ```cpp\n  /**\n     * @brief 将digital_out设备设置为布尔值。\n     * @param value 布尔值。(true or false)\n     */\n    void set( bool value );\n  ```\n  当`pne.set(true)`执行后，换向阀驱动器将会亮起红灯     \n  当`pne.set(false)`执行后，换向阀驱动器红队将会熄灭\n* value()     \n  读取气泵的状态     \n  `pne.set(true)`后，value的返回值就会变为`true`，反之亦然。\n\n# 视觉传感器\n1. 定义、命名\n2. 初始化\n3. 颜色设置 和 识别机制的介绍\n4. 返回值\n\n# *PID精确控制算法\n1. 定义\n2. 原理介绍\n3. 使用方法\n4. 优缺点     \n   优点在本章中已经反复强调了,就是通过pid算法的控制，机器人能够精确的运动。     \n   缺点就是把pid的算法中用于前进的控制中会大大降低前进的效率     \n   这种缺点只会体现在***需要停止的运动***中，比如说**前进**、**转弯**这类运动中。pid最适合的应用应该是 ___一直维持某种状态___ 的情况下，例如 __平衡车的平衡__ , 这时pid的运行是贯彻平衡车运动的始终的，也就不存在所谓**超时**的问题了。\n\n# 手动程序\n1. 与操作手对接\n2. 底盘方案\n   * 左前进右旋转\n   * 万向底盘\n   * 无头模式\n\n# 自动程序\n1. 自动赛规则\n2. 前进控制\n3. 转弯控制\n4. 完成自动赛任务\n5. 多备案 + 耐心\n\n# 规则类怪谈\n1. 码风要求\n2. 注释规范化\n3. 请参与github的更新\n","slug":"VEX机器人程序","published":1,"updated":"2024-01-30T12:31:10.651Z","_id":"cls0b0m6m000008wk9xhm1542","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h1><h2 id=\"语言基础说明\"><a href=\"#语言基础说明\" class=\"headerlink\" title=\"语言基础说明\"></a>语言基础说明</h2><p>VEX程序可以支持 <em>C++</em> 和 <em>python</em> ，但是在这里只涉及 <em><strong>C++</strong></em><br>如果有 <em>python</em> 基础而没有 <em>C++</em> 基础，建议访问<a href=\"https://www.runoob.com/cplusplus/cpp-tutorial.html\">菜鸟教程</a>来学习语法知识<br>如果编程基础近似为0而对编程有兴趣的同学，建议先在<a href=\"https://www.luogu.com.cn/training/list\">洛谷题单</a>完成入门系列之后再来看VEX的教程</p>\n<h2 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h2><p>支持VEX程序的软件有 <a href=\"https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user\">vscode</a> 、<em>VEXcode pro v5</em> 等，本教程只介绍 <em><strong>vscode</strong></em> 的使用<br>点击此处的链接可以下载到 <em>vscode</em> 的安装包<br>打开 <em>vscode</em> 之后，需要下载拓展 <em>chinese</em> , <em>c&#x2F;c++</em> , <em>VEX Robotics</em><br><code>如果有兴趣可以追加拓展 Better C++ Syntax 、 C/C++ Compile Run 、 Dracula Official 、 CodeGeeX 等</code><br>另外，为了防患于未然，下载一个 <em>git</em> 和及时把代码上传到 <em>github</em> 是相当的有必要的<br>（我才不会告诉你我有一次文件损坏了只好从头重写呢）<br>下载 <em>git</em> 只需要跟着 <em>vscode</em> 的窗口一通按就好了，如何使用请看网上的<a href=\"https://www.runoob.com/git/git-tutorial.html\">教程</a><br>可以点击 <em>打开文件夹</em> 来开始你的代码</p>\n<h2 id=\"硬件条件\"><a href=\"#硬件条件\" class=\"headerlink\" title=\"硬件条件\"></a>硬件条件</h2><h3 id=\"主机\"><a href=\"#主机\" class=\"headerlink\" title=\"主机\"></a>主机</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/30bda85ee2d0a3bc594fb858377d6b63.png\" alt=\"主机图\">  </p>\n<h3 id=\"手柄\"><a href=\"#手柄\" class=\"headerlink\" title=\"手柄\"></a>手柄</h3><p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/968d794a5f0ca8bc9c740b824c06866b.jpg\" alt=\"手柄正面图\">  </p>\n<p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/fc5565c734a368637488c795360e6c48.jpg\" alt=\"手柄背面图\">  </p>\n<h3 id=\"场控\"><a href=\"#场控\" class=\"headerlink\" title=\"场控\"></a>场控</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"场控图\">  </p>\n<h3 id=\"钢条\"><a href=\"#钢条\" class=\"headerlink\" title=\"钢条\"></a>钢条</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"钢条图\">  </p>\n<h3 id=\"传感器\"><a href=\"#传感器\" class=\"headerlink\" title=\"传感器\"></a>传感器</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"传感器图\">  </p>\n<h3 id=\"电机\"><a href=\"#电机\" class=\"headerlink\" title=\"电机\"></a>电机</h3><p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/b86c1e9a14d043aec8aacf6a918774dc.jpg\" alt=\"电机图\">  </p>\n<h3 id=\"气泵\"><a href=\"#气泵\" class=\"headerlink\" title=\"气泵\"></a>气泵</h3><p><img src=\"https://picst.sunbangyan.cn/2023/11/13/04aceda6d70c2f7adc2594376fa5c41b.jpg\" alt=\"气泵图\">  </p>\n<h2 id=\"VEX社区\"><a href=\"#VEX社区\" class=\"headerlink\" title=\"VEX社区\"></a>VEX社区</h2><pre><code>VEX在[B站](https://www.bilibili.com/)中并不算极小众的，其中更新的比较多的up主是[TXTaylor297992](https://space.bilibili.com/1684280853)   \n此外，VEX有[中文官方论坛](https://vexforum.cn/)，在这里可以下载到官方给出的规则文档和场地拼接的文档\n</code></pre>\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><h2 id=\"面向对象思维的介绍及引入\"><a href=\"#面向对象思维的介绍及引入\" class=\"headerlink\" title=\"面向对象思维的介绍及引入\"></a>面向对象思维的介绍及引入</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\">wiki介绍</a><br>程序设计思维中，与 <em><strong>面向对象</strong></em> 相对的概念叫做 <em><strong>面向过程</strong></em> 。<br>后者考虑问题是通常把问题拆分成几个小问题，在编写程序中对应的行为一般有编写若干个函数。由于OI中一般只要考虑一个主问题即可，所以面向对象在OI中出现较多<br>前者则是将一个个功能封装进 <em>对象</em> 中，其对应的行为以实现 <em>类(class)</em> 为典型。这种程序设计的思维在 项目化编程 中有极大的优点——重用性、灵活性和扩展性 高<br>在此处，我们将从<a href=\"https://www.runoob.com/cplusplus/cpp-classes-objects.html\">class</a>的声明、定义、使用来入手，切实的感受 <em><strong>面向对象</strong></em> 的代码风格</p>\n<h2 id=\"classの定义\"><a href=\"#classの定义\" class=\"headerlink\" title=\"classの定义\"></a>classの定义</h2><p><a href=\"https://www.runoob.com/cplusplus/cpp-classes-objects.html\"><img src=\"https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11.png\" alt=\"菜鸟教程给出的定义结构\"></a></p>\n<h3 id=\"类-及-类名\"><a href=\"#类-及-类名\" class=\"headerlink\" title=\"类 及 类名\"></a>类 及 类名</h3><p>给类取名的时候，可以参照<a href=\"https://www.runoob.com/cplusplus/cpp-data-structures.html\">struct</a>，命名规则和变量一致<br>类的名字以及成员变量 <em><strong>最好</strong></em> 有实际意义，例：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span><span class=\"token comment\">//人的名字</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">;</span><span class=\"token comment\">//C代表语文，M代表数学，E代表英语</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a><a href=\"https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html\">访问修饰符</a></h3><p><code>本教程不涉及 继承 以及 protected 的使用，因为本教程用不到它们</code></p>\n<ul>\n<li>public<br>  公有成员在程序中类的外部是可访问的<br>  public下的成员变量以及成员函数的使用与<code>struct</code>无异</li>\n<li>private<br>  成员和类的默认访问修饰符是 private<br>  私有成员变量或函数在类的外部是<code>不可访问</code>的，甚至是<code>不可查看</code>的。只有<code>类和友元函数</code>可以访问私有成员。<br>  例:  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> wid <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//相当于换行写了   Box b;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n  在这个例子中，变量width的访问修饰符是private，因此<code>b.width</code>的写法是非法的<br>  正确的做法是，通过<code>b.setwidth(double wid)</code>来设置<code>width</code>的值；<br>  通过<code>b.getWidth()</code>来获得<code>width</code>的值<br>  类似这种 <strong>在私有区域定义数据，在公有区域定义相关的函数，以便在类的外部也可以调用这些函数</strong> 的做法一般叫做 <em><strong>数据封装</strong></em>      这样能避免受到外界的干扰和误用，从而确保了安全<br>  样例中的<code>length</code>就不符合数据封装的原则，不要这样写 <del>否则你有可能会被狠狠批斗的</del></li>\n</ul>\n<h3 id=\"重载函数和重载运算符\"><a href=\"#重载函数和重载运算符\" class=\"headerlink\" title=\"重载函数和重载运算符\"></a><a href=\"https://www.runoob.com/cplusplus/cpp-overloading.html\">重载函数和重载运算符</a></h3><h4 id=\"重载函数\"><a href=\"#重载函数\" class=\"headerlink\" title=\"重载函数\"></a>重载函数</h4><p>C++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。<br>在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的<strong>形式参数</strong>（个数、类型或顺序）必须不同。     我们不能仅通过<strong>返回类型</strong>的不同来重载函数。<br>重载函数可以为我们调用功能较相近的函数时提供便利,例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 哦对了，重载函数在class外也是可以使用的哦</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">float</span> t<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">bool</span> t<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 以下是在类中使用的</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">printer</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> a<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string a<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//错误示范</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//主函数</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    printer p<span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">114514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n1919810\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">' '</span><span class=\"token operator\">&lt;&lt;</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"重载运算符\"><a href=\"#重载运算符\" class=\"headerlink\" title=\"重载运算符\"></a>重载运算符</h4><p>在c++中，运算符实际上也可以看作是一种函数，因此，就出现了<strong>重载运算符</strong>的用法<br>在这里我们介绍 <a href=\"https://www.runoob.com/cplusplus/assignment-operators-overloading.html\">赋值运算符  &#x3D; </a><br>多说无益，直接上样例：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//平面直角坐标系中的一个点</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span> <span class=\"token comment\">//坐标</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  \n            <span class=\"token comment\">//此处const node&amp; n 也可以写作node n</span>\n            <span class=\"token comment\">//使用&amp;是为了提高效率，使用const是为了防止n的值被这里的赋值函数更改</span>\n            x <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 等效于 this->x = n.x;</span>\n            y <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 等效于 this->y = n.y;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">friend</span> istream <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span>node<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 不要求掌握，看看就好</span>\n            in<span class=\"token operator\">>></span>n<span class=\"token punctuation\">.</span>x<span class=\"token operator\">>></span>n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\nnode n<span class=\"token punctuation\">;</span>\n    node m<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// 这段代码没有什么意义，只是为了说明重载运算符后类的运算就可以用符合我们原有习惯的写法来编写程序这一点而已</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>；\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看出，使用重载运算符的写法非常符合我们对变量的编写习惯。<br>这使得我们在使用类时感到非常的舒适 XD<br>需要注意的是，所有的运算符函数都是放在 <em><strong>public</strong></em> 访问修饰符下的     (其中 流运算符 是以友元函数的形式)</p>\n<h3 id=\"构造函数和析构函数，拷贝构造函数\"><a href=\"#构造函数和析构函数，拷贝构造函数\" class=\"headerlink\" title=\"构造函数和析构函数，拷贝构造函数\"></a><a href=\"https://www.runoob.com/cplusplus/cpp-constructor-destructor.html\">构造函数和析构函数</a>，<a href=\"https://www.runoob.com/cplusplus/cpp-copy-constructor.html\">拷贝构造函数</a></h3><p>这三个函数是类中非常特殊的函数。通过它们可以实现 <strong>初始化新对象</strong>、<strong>释放对象占用内存</strong>、<strong>复制对象</strong> 的作用<br>如果不编写这三个函数，编译器都会自动加入这几个函数。但是如果类中涉及到<strong>指针</strong>和<strong>动态内存</strong>时需要格外注意，此时必须人为的编写 <em>析构函数</em> 和 <em>拷贝构造函数</em><br>切记，这三个函数都应放在 <em><strong>public</strong></em> 下</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>类的构造函数会在<strong>每次创建类的新对象时</strong>执行。     构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。     构造函数可用于为某些成员变量设置初始值。</p>\n<h4 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h4><p>类的析构函数会在<strong>每次删除所创建的对象时</strong>执行。     析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀     析构函数有助于在跳出程序（比如关闭文件、释放内存等）前<strong>释放资源</strong>。     默认析构函数不会释放成员指针变量所指向的内存空间，如果要释放的话，还需要人为定义释放。     因此，当类中存在<em>指针变量</em>并且有<em>动态内存</em>分配时，最好有一个析构函数用来释放内存     另外，析构函数<strong>不可以接受形参</strong>，因此不存在析构函数的重载函数</p>\n<h4 id=\"拷贝构造函数\"><a href=\"#拷贝构造函数\" class=\"headerlink\" title=\"拷贝构造函数\"></a>拷贝构造函数</h4><p>类的拷贝构造函数会在创建对象时，使用同一类中之前创建的对象来初始化新创建的对象。<br>函数一般有如下功能：</p>\n<ul>\n<li>通过使用另一个同类型的对象来 <em><strong>初始化</strong></em> 新创建的对象。</li>\n<li>复制对象并把它作为 ___函数参数___。</li>\n<li>复制对象并把它作为 ___函数返回值___。<br>如果在类中没有定义拷贝构造函数，编译器会自行定义一个。     如果类带有<em>指针变量</em>，并有<em>动态内存</em>分配，则它必须有一个拷贝构造函数。</li>\n</ul>\n<p>样例：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>    \n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//构造函数</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//带参数的构造函数</span>\n        <span class=\"token operator\">~</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">//析构函数</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//拷贝构造函数</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nnode<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>                  <span class=\"token comment\">//在类外定义函数时需要在函数名前加上“类名::”</span>\n    n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">//为指针分配内存</span>\n    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nnode<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">node</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">delete</span> n<span class=\"token punctuation\">;</span>                     <span class=\"token comment\">//释放指针内存</span>\n<span class=\"token punctuation\">&#125;</span>\nnode<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">//拷贝值</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">VALUE</span><span class=\"token punctuation\">(</span>node n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//拷贝构造函数的用法 II</span>\nnode <span class=\"token function\">bigger_one</span><span class=\"token punctuation\">(</span>node a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>b<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//三元运算符  ? :  。?前条件成立则返回 : 前的，否则返回 : 后的</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    node n<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//无参数的构造函数可以省略</span>\n    node <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    \n    <span class=\"token comment\">//带参数的构造函数的调用需要在变量后加括号，就像函数一样</span>\n    node <span class=\"token function\">k</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//拷贝构造函数的用法 I</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">bigger_one</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//拷贝构造函数用法   III</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">bigger_one</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//构造函数的另类用法，其中遇到数值4时会调用node(int num)来把4转化为node类型</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"头文件与注释，cpp与定义\"><a href=\"#头文件与注释，cpp与定义\" class=\"headerlink\" title=\"头文件与注释，cpp与定义\"></a><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%B4%E6%96%87%E4%BB%B6\">头文件</a>与注释，cpp与定义</h3><p>还记得前文提到过 class 有着较高 重用性，灵活性，拓展性 吗？<br>如果在每一个程序的头部复制大量的class的定义，那么这种灵活性就荡然无存了<br>因此，就不得不介绍头文件了</p>\n<p>一个头文件一般包含类、子程序、变量和其他标识符的前置声明<br>习惯上，<em>函数、类、枚举类、常量</em>的声明会放在头文件中，即<code>xxx.h</code><br>而对应的<em>函数、类</em>的源码以及<em>注释</em>则会放在对应的源文件中，即<code>xxx.cpp</code><br>值得注意的是，为了防止头文件被反复调用造成重复声明的错误，头文件应在首行加入</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// xxx.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">XXX</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">XXX</span></span>\n<span class=\"token comment\">//你的代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>多说无用，下面摆上样例          </p>\n<p><a href=\"https://blog.csdn.net/weixin_30500289/article/details/96110759\">样例：实现高精度算法</a><br>样例的代码非常的长，但是使用时只需要：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"intx.h\"</span></span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>另外，vscode是支持<a href=\"https://www.cnblogs.com/schips/p/12200388.html\">doxygen注释</a>的     <a href=\"https://doxygen.nl/manual/\">Doxygen官方文档</a><br>在头文件中使用doxygen注释，可以对声明的类，函数进行说明<br>鼠标在引用了对应头文件的文件中只需要悬停在函数&#x2F;变量&#x2F;类&#x2F;命名空间&#x2F;…上就可以快捷的获知该处的注释<br>样例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// node.h</span>\n<span class=\"token comment\">/**\n * @class node\n * @brief 表示一个平面直角坐标系中的一个点\n***/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/**\n         * @brief 表示坐标 \\f$\\left ( x,y \\right )\\f$\n        ***/</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/**\n         * @brief 初始化\n         * @param a 对应x坐标\n         * @param b 对应y坐标\n        ***/</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n           y <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">/**\n         * @brief 计算距离\n         * @param n 第二个坐标点\n         * @return 两点距离的平方\n        ***/</span>\n        <span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>node n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>x <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>x <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>y <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>y <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>鼠标悬停效果图<br>   <img src=\"https://picdl.sunbangyan.cn/2023/11/13/f733c7f3255c153f7c3b739af3aa4fad.png\" alt=\"node的样例\"><br>   <img src=\"https://picss.sunbangyan.cn/2023/11/13/eda1e9a2bb9d2267a57071ee053221ee.png\" alt=\"set()的样例\"><br>   <img src=\"https://picss.sunbangyan.cn/2023/11/13/d723d6d27e66114087a12f7b2d6c430b.png\" alt=\"dist()的样例\">     </p>\n<h3 id=\"后期学习方式\"><a href=\"#后期学习方式\" class=\"headerlink\" title=\"后期学习方式\"></a>后期学习方式</h3><p> 学会了class的阅读、编写后，我们进入后面的学习就有了一定的基础<br>   在vscode中，<em><strong>ctrl+左键</strong></em>可以查看头文件、函数、类的定义区域<br>   进入<code>v5_vcs.h</code>-&gt;<code>v5_cpp.h</code>-&gt;<code>需要查询的文件</code>，就可以看到官方给出的所有函数的定义。<br>   <img src=\"https://picss.sunbangyan.cn/2023/11/13/876f9447986e256e48ac73d7df16cf0a.png\" alt=\"01-6-e1\"><br>    <img src=\"https://picss.sunbangyan.cn/2023/11/13/262d62b1cc74dc22bb1e75e63a734ad7.png\" alt=\"01-6-e2\"><br>    <img src=\"https://picst.sunbangyan.cn/2023/11/13/4ed72494d898de9ac52b3f04d58b1062.png\" alt=\"01-6-e3\"><br>   当然，我会在接下来的章节来挑选重点的函数来讲解。有兴趣有余力的同学可以根据这个方法自行探究。     </p>\n<h1 id=\"主机-brain-与手柄-Controller\"><a href=\"#主机-brain-与手柄-Controller\" class=\"headerlink\" title=\"主机(brain)与手柄(Controller)\"></a>主机(brain)与手柄(Controller)</h1><h2 id=\"主机、手柄、电脑之间的硬件连接\"><a href=\"#主机、手柄、电脑之间的硬件连接\" class=\"headerlink\" title=\"主机、手柄、电脑之间的硬件连接\"></a>主机、手柄、电脑之间的硬件连接</h2><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"连线图\">     </p>\n<h2 id=\"创建新的VEX工程文件、文件标题规范、文件储存位置\"><a href=\"#创建新的VEX工程文件、文件标题规范、文件储存位置\" class=\"headerlink\" title=\"创建新的VEX工程文件、文件标题规范、文件储存位置\"></a>创建新的VEX工程文件、文件标题规范、文件储存位置</h2><p>从VEX插件中 顺次点击 <code>new project -&gt; v5 -&gt; c++ -&gt; competition template -&gt; 命名项目名字 -&gt; create</code>，一个新的VEX工程文件就创建了</p>\n<h2 id=\"Brain-functions\"><a href=\"#Brain-functions\" class=\"headerlink\" title=\"Brain.functions()\"></a>Brain.functions()</h2><p>鉴于LXB水平有限，所以这里只讲一部分重要的函数</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.h</span>\n<span class=\"token keyword\">extern</span> brain Brain<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>构造函数没有参数输入</p>\n<h3 id=\"brain-timer\"><a href=\"#brain-timer\" class=\"headerlink\" title=\"brain.timer\"></a>brain.timer</h3><ul>\n<li>定义  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_brain.cpp</span>\n<span class=\"token comment\">/** \n * @brief 以指定的单位获取计时器的值。\n * @param units 时间单位。有 sec (秒) 和 msec (毫秒)\n * @return 返回一个双精度值，该值表示计时器的值。\n */</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span> timeUnits units <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** \n * @brief 将计时器重置为零。\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用例  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">float</span> xxx<span class=\"token punctuation\">;</span>\nBrain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 虽然在这里没必要但是这是一个好习惯</span>\nxxx <span class=\"token operator\">=</span> Brain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span>sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> Brain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span>msec<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> xxx<span class=\"token operator\">*</span><span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token number\">1145</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//空循环，经过1.145s之后会继续</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"brain-screen\"><a href=\"#brain-screen\" class=\"headerlink\" title=\"brain.screen\"></a>brain.screen</h3><ul>\n<li>定义  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_brain.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printAt</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">drawPixel</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用说明<br>  这里的<code>print()</code>函数的使用和<code>printf()</code>无异<br>  <code>printAt()</code>添加了参数<code>x</code>、<code>y</code>,含义是在主机屏幕输出时开始的坐标<br>  <code>drawPixel</code>是在屏幕的(x,y)处绘制一个像素点</li>\n</ul>\n<h2 id=\"Controller-functions\"><a href=\"#Controller-functions\" class=\"headerlink\" title=\"Controller.functions()\"></a>Controller.functions()</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.h</span>\n<span class=\"token keyword\">extern</span> controller Controller<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>和 <code>brain</code> 的定义一样平淡</p>\n<h3 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h3><p><img src=\"/image/01-4-2-2.jpg\"><br>图中按钮可用的共有10个，分别是：<br>    - ButtonLeft<br>    - ButtonRight<br>    - ButtonUp<br>    - ButtonDown<br>    - ButtonA<br>    - ButtonB<br>    - ButtonX<br>    - ButtonY<br>    - ButtonL1<br>    - ButtonL2<br>    - ButtonR1<br>    - ButtonR2</p>\n<p>他们都属于 <code>controller</code>类中的成员类<code>button</code>，有以下成员函数：</p>\n<ul>\n<li>pressing()<br>  检查当下，如果按钮被按下则返回<code>true</code>，否则返回<code>false</code>。</li>\n<li>pressed()<br>  形参需要填入一个<code>void</code>函数的函数名来调用<br>  下次按钮被按下的时候调用函数</li>\n</ul>\n<p>使用例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// ...</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> Controller1<span class=\"token punctuation\">.</span>ButtonA<span class=\"token punctuation\">.</span><span class=\"token function\">pressing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// ...</span>\n   <span class=\"token punctuation\">&#125;</span>\n   Controller1<span class=\"token punctuation\">.</span>ButtonB<span class=\"token punctuation\">.</span><span class=\"token function\">pressed</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"摇杆\"><a href=\"#摇杆\" class=\"headerlink\" title=\"摇杆\"></a>摇杆</h3><p>遥控器上看似只有两个遥感，实际上程序中对应了4个<code>axis</code>对象:</p>\n<ul>\n<li>Axis1</li>\n<li>Axis2</li>\n<li>Axis3</li>\n<li>Axis4</li>\n</ul>\n<p>一个遥杆可以向任意二维方向旋转，每一个二维的位置都可以用二维坐标来表示。也就是说，一个摇杆对应了两个不同方向的<code>axis</code>对象。<br>其中，<code>Axis1</code>和<code>Axis4</code>都是横向的，<code>Axis2</code>和<code>Axis3</code>都是竖向的。<br><code>axis</code>一般只使用成员函数<code>position()</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Dipan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 底盘运动函数</span>\n   <span class=\"token keyword\">float</span> a1 <span class=\"token operator\">=</span> Controller1<span class=\"token punctuation\">.</span>Axis1<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">float</span> a3 <span class=\"token operator\">=</span> Controller1<span class=\"token punctuation\">.</span>Axis3<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a3<span class=\"token operator\">+</span>a1<span class=\"token punctuation\">,</span>a3<span class=\"token operator\">-</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"屏幕\"><a href=\"#屏幕\" class=\"headerlink\" title=\"屏幕\"></a>屏幕</h3><p>有时，我们需要在遥控器上面显示信息来提示操作手。例如，改变了某个电机的转速时，通过提示操作手可以方便操作手进行下一步操作。<br>下面是在屏幕上显示一段文字的实例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_debug_file.cpp</span>\n<span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#123;</span>\n   Controller1<span class=\"token punctuation\">.</span>Screen<span class=\"token punctuation\">.</span><span class=\"token function\">clearLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清空之前的消息</span>\n   Controller1<span class=\"token punctuation\">.</span>Screen<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电机温度:%.2f ℃\"</span><span class=\"token punctuation\">,</span>MotorShot<span class=\"token punctuation\">.</span><span class=\"token function\">temperature</span><span class=\"token punctuation\">(</span>celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出格式同std::printf()</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"电机-motor-与运动\"><a href=\"#电机-motor-与运动\" class=\"headerlink\" title=\"电机(motor)与运动\"></a>电机(motor)与运动</h1><h2 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h2><p><code>motor</code>的构造函数有3个参数(建议都填入),分别是<code>index</code>、<code>gears</code>、<code>reverse</code>。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_motor.h</span>\n<span class=\"token function\">motor</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int32_t</span> index<span class=\"token punctuation\">,</span> gearSetting gears<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> reverse <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><p><code>index</code><br> 表明电机接入的端口。<br> 主机上有两排端口,编号1-22。电机接入第<code>N</code>个端口就写 <code>PORTN</code></p>\n</li>\n<li><p><code>gears</code><br> 表明电机转速比<br> 有三种转速比,<code>ratio6_1</code>、<code>ratio18_1</code>、<code>ratio36_1</code>,     分别对应三种颜色的电机:蓝电机、绿电机、红电机     </p>\n<p> <img src=\"/image/motor_radio.png\">     </p>\n</li>\n<li><p><code>reverse</code><br> 电机默认转向:正转or反转</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.h</span>\n<span class=\"token comment\">// ...</span>\nmotor MotorLF <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT1<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmotor MotorLB <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT2<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmotor MotorRF <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT3<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmotor MotorRB <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT4<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"电机-与-手动控制程序\"><a href=\"#电机-与-手动控制程序\" class=\"headerlink\" title=\"电机 与 手动控制程序\"></a>电机 与 手动控制程序</h2><h3 id=\"电机转动\"><a href=\"#电机转动\" class=\"headerlink\" title=\"电机转动\"></a>电机转动</h3><ul>\n<li><p><code>spin()</code><br> 此函数会让电机以指定速度旋转。     </p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_motor.h</span>\n<span class=\"token comment\">/**\n* @brief 打开电机并按指定方向和指定速度旋转。\n* @param dir 电机旋转的方向。有 forward 和 reverse 两种值。也支持 fwd 和 rev 两种缩写\n* @param velocity 速度大小。值域[-100.0,100.0]。超出则化为 ±100\n* @param units 速度的单位。常用 percent ,也可缩写为 pct\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">spin</span><span class=\"token punctuation\">(</span> directionType dir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> velocity<span class=\"token punctuation\">,</span> velocityUnits units <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p> 以底盘的运动程序为例：</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p><code>stop()</code><br> 使电机停止(停止向电机供电)</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/** \n* @brief 使用默认制动模式停止电机。\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** \n* @brief 使用指定的制动模式停止电机。\n* @param mode 制动模式可以设置为滑行(coast)、制动(brake)或保持(hold)。\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span> brakeType mode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p> 以底盘的停止运行为例:</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>底盘的停止一般使用<code>coast</code>。这是为了防止<code>hold</code>状态下机器人被碰撞导致电机的损坏。<br>自动程序中由于有<code>不允许进入对手场地</code>的规则，因此只要队伍内部有配合，就不用讨论上述的问题</p>\n</li>\n</ul>\n<h3 id=\"监测电机\"><a href=\"#监测电机\" class=\"headerlink\" title=\"监测电机\"></a>监测电机</h3><ul>\n<li><code>double position( rotationUnits units )</code><br>返回电机转过的角度<br>一般填入单位 degrees     </li>\n<li><code>void resetPosition()</code><br>重置 <code>position()</code>的返回值<br>重置需要一小段时间，重置时尽量保持电机的静止</li>\n<li><code>double temperature( temperatureUnits units );</code><br>返回电机此时的温度<br>可填入单位 摄氏度(<code>celsius</code>)     </li>\n<li>…</li>\n</ul>\n<h1 id=\"陀螺仪-与-自动转弯\"><a href=\"#陀螺仪-与-自动转弯\" class=\"headerlink\" title=\"陀螺仪 与 自动转弯\"></a>陀螺仪 与 自动转弯</h1><h2 id=\"声明、命名\"><a href=\"#声明、命名\" class=\"headerlink\" title=\"声明、命名\"></a>声明、命名</h2><pre><code>需要填入的参数仅有端口\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_imu.h</span>\n<span class=\"token function\">inertial</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int32_t</span> index<span class=\"token punctuation\">,</span> turnType dir <span class=\"token operator\">=</span> turnType<span class=\"token double-colon punctuation\">::</span>right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n声明比`motor`简单\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.cpp</span>\ninertial ine <span class=\"token operator\">=</span> <span class=\"token function\">inertial</span><span class=\"token punctuation\">(</span>PORT11<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</code></pre>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>类似于<code>motor</code>中的<code>position()</code>，对陀螺仪初始化是必要的。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//初始化底盘电机</span>\n  MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//初始化陀螺仪</span>\n  ine<span class=\"token punctuation\">.</span><span class=\"token function\">calibrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//初始化计时器</span>\n  Brain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"数据检测\"><a href=\"#数据检测\" class=\"headerlink\" title=\"数据检测\"></a>数据检测</h2><p>仅介绍最常用的<code>heading()</code>,其他函数仅作涉及</p>\n<ul>\n<li><p><code>heading()</code></p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * @brief 获取惯性传感器的水平方向,方向角取值范围 [0,360] ,单位:度\n * @return 返回一个double值，该值表示惯性传感器的方向。\n * @param units 单位,默认为度\n */</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">heading</span><span class=\"token punctuation\">(</span> rotationUnits units <span class=\"token operator\">=</span> rotationUnits<span class=\"token double-colon punctuation\">::</span>deg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>rotation()</code><br> 获取仰角</p>\n</li>\n</ul>\n<h2 id=\"自动程序中的转弯问题\"><a href=\"#自动程序中的转弯问题\" class=\"headerlink\" title=\"自动程序中的转弯问题\"></a>自动程序中的转弯问题</h2><p>自动程序中，是不可以通过操作手柄来给机器人输入数据的。因此，机器人在自动赛时段的运动完全依靠程序的预设。<br><em>如何让机器人旋转到我们需要的方向？</em>     </p>\n<p>最简单的写法是使用计时器。机器人旋转的速度是粗略相等的，因此在程序开发时间较短的情况下，这可以作为最后的保底程序来使用。<br>   <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_auto_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">turn_with_timer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">int</span> turn_speed<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      turn_speed<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n      t<span class=\"token operator\">=</span><span class=\"token operator\">-</span>t<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>                                   <span class=\"token comment\">// 左右转放在同一程序里</span>\n   <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>turn_speed<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>turn_speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>msec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 定义见于vex.h中</span>\n   <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 旋转结束建议锁死，以提高准确度</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>但是这并不是一个合适的方案。我们难以控制每次旋转时的环境因素保持一样(比如地面摩擦系数，电机温度，电池电压等)。有时这种小小的偏差就会导致行进线路的变形，会影响到之后的自动任务，甚至可能<code>DQ(犯规)</code>。<br>在精准转弯的要求下，我们便需要陀螺仪来帮助校准。  </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_auto_file.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"extensions.h\"</span>    <span class=\"token comment\">// include pids.h</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">turn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  pids turning <span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 定义pid算法对象</span>\n  turning<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>deg<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 向pid系统中输入目标和最大允许偏差</span>\n  <span class=\"token keyword\">float</span> movement<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 记录每次pid系统反馈的运动量</span>\n  Ine<span class=\"token punctuation\">.</span><span class=\"token function\">calibrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 初始化陀螺仪</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> turning<span class=\"token punctuation\">.</span><span class=\"token function\">check</span> <span class=\"token punctuation\">(</span>Ine<span class=\"token punctuation\">.</span><span class=\"token function\">heading</span><span class=\"token punctuation\">(</span>degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n                          <span class=\"token comment\">// 当机器人还未稳定在最大允许偏差区间内时一直不断调整</span>\n    movement <span class=\"token operator\">=</span> turning<span class=\"token punctuation\">.</span><span class=\"token function\">moving</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>movement <span class=\"token operator\">*</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span>movement <span class=\"token operator\">*</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token comment\">// 运动</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// pid算法下机器人旋转的末速度很小，不需要hold</span>\n  <span class=\"token function\">wait</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span>sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 等待机器人彻底停止</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>PID算法</code>将在<a href=\"/README.md/#07-pid%E7%B2%BE%E7%A1%AE%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95\">第7章节</a>中详细介绍其优缺点。</p>\n<h2 id=\"画外吐槽\"><a href=\"#画外吐槽\" class=\"headerlink\" title=\"画外吐槽\"></a>画外吐槽</h2><p>我非常讨厌陀螺仪<br>因为它带给我的回忆除了出bug就是掉链子     </p>\n<p><a href=\"https://www.bilibili.com/video/BV1FW4y1V7af\">陀螺仪发癫珍贵录像</a></p>\n<h1 id=\"气泵-1\"><a href=\"#气泵-1\" class=\"headerlink\" title=\"气泵\"></a>气泵</h1><h2 id=\"定义、命名\"><a href=\"#定义、命名\" class=\"headerlink\" title=\"定义、命名\"></a>定义、命名</h2><p>气泵的程序其实是最简单的，只不过定义和电机或者传感器都有点区别</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_triport.h</span>\n<span class=\"token comment\">/**\n* @brief 在参数中指定的三线端口上创建新的digital_out对象。\n* @param port 三线端口。\n*/</span>\n<span class=\"token function\">digital_out</span><span class=\"token punctuation\">(</span> triport<span class=\"token double-colon punctuation\">::</span>port <span class=\"token operator\">&amp;</span>port <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>triport</code>和电机端口的<code>int32_t</code>不同     </p>\n<table>\n<thead>\n<tr>\n<th>port :</th>\n<th>int32_t</th>\n<th>triport</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>个数</td>\n<td>21</td>\n<td>8</td>\n</tr>\n<tr>\n<td>编号</td>\n<td>1-22</td>\n<td>A-H</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>主机上下两侧</td>\n<td>主机左侧</td>\n</tr>\n<tr>\n<td>格式</td>\n<td>PORTn</td>\n<td>Brain.ThreeWirePort.N</td>\n</tr>\n</tbody></table>\n<p>习惯上把气泵命名为 <code>pne</code> (Pneumatic components)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.cpp</span>\ndigital_out <span class=\"token function\">pne</span> <span class=\"token punctuation\">(</span> Brain<span class=\"token punctuation\">.</span>ThreeWirePort<span class=\"token punctuation\">.</span>A <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"实物介绍\"><a href=\"#实物介绍\" class=\"headerlink\" title=\"实物介绍\"></a>实物介绍</h2><p>气泵的程序很简单，但是气泵的部件比电机复杂的多<br><img src=\"/image/05-2-e1.png\"><br>图中的结构中，通过程序所能操作的仅仅是 发送到&#x2F;接受数据于 <code>换向阀驱动器</code> ，从而改变换向阀联通的状态。<br>机器人上是否使用气泵，需要考虑机械师的技术水平。因为程序能在气泵上做的事情太少太简单了。</p>\n<h2 id=\"functions\"><a href=\"#functions\" class=\"headerlink\" title=\"functions\"></a>functions</h2><ul>\n<li><code>set()</code><br>设置气泵的伸缩状态。<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n   * @brief 将digital_out设备设置为布尔值。\n   * @param value 布尔值。(true or false)\n   */</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">bool</span> value <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n当<code>pne.set(true)</code>执行后，换向阀驱动器将会亮起红灯<br>当<code>pne.set(false)</code>执行后，换向阀驱动器红队将会熄灭</li>\n<li>value()<br>读取气泵的状态<br><code>pne.set(true)</code>后，value的返回值就会变为<code>true</code>，反之亦然。</li>\n</ul>\n<h1 id=\"视觉传感器\"><a href=\"#视觉传感器\" class=\"headerlink\" title=\"视觉传感器\"></a>视觉传感器</h1><ol>\n<li>定义、命名</li>\n<li>初始化</li>\n<li>颜色设置 和 识别机制的介绍</li>\n<li>返回值</li>\n</ol>\n<h1 id=\"PID精确控制算法\"><a href=\"#PID精确控制算法\" class=\"headerlink\" title=\"*PID精确控制算法\"></a>*PID精确控制算法</h1><ol>\n<li>定义</li>\n<li>原理介绍</li>\n<li>使用方法</li>\n<li>优缺点<br>优点在本章中已经反复强调了,就是通过pid算法的控制，机器人能够精确的运动。<br>缺点就是把pid的算法中用于前进的控制中会大大降低前进的效率<br>这种缺点只会体现在<em><strong>需要停止的运动</strong></em>中，比如说<strong>前进</strong>、<strong>转弯</strong>这类运动中。pid最适合的应用应该是 <em><strong>一直维持某种状态</strong></em> 的情况下，例如 <strong>平衡车的平衡</strong> , 这时pid的运行是贯彻平衡车运动的始终的，也就不存在所谓<strong>超时</strong>的问题了。</li>\n</ol>\n<h1 id=\"手动程序\"><a href=\"#手动程序\" class=\"headerlink\" title=\"手动程序\"></a>手动程序</h1><ol>\n<li>与操作手对接</li>\n<li>底盘方案<ul>\n<li>左前进右旋转</li>\n<li>万向底盘</li>\n<li>无头模式</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"自动程序\"><a href=\"#自动程序\" class=\"headerlink\" title=\"自动程序\"></a>自动程序</h1><ol>\n<li>自动赛规则</li>\n<li>前进控制</li>\n<li>转弯控制</li>\n<li>完成自动赛任务</li>\n<li>多备案 + 耐心</li>\n</ol>\n<h1 id=\"规则类怪谈\"><a href=\"#规则类怪谈\" class=\"headerlink\" title=\"规则类怪谈\"></a>规则类怪谈</h1><ol>\n<li>码风要求</li>\n<li>注释规范化</li>\n<li>请参与github的更新</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h1><h2 id=\"语言基础说明\"><a href=\"#语言基础说明\" class=\"headerlink\" title=\"语言基础说明\"></a>语言基础说明</h2><p>VEX程序可以支持 <em>C++</em> 和 <em>python</em> ，但是在这里只涉及 <em><strong>C++</strong></em><br>如果有 <em>python</em> 基础而没有 <em>C++</em> 基础，建议访问<a href=\"https://www.runoob.com/cplusplus/cpp-tutorial.html\">菜鸟教程</a>来学习语法知识<br>如果编程基础近似为0而对编程有兴趣的同学，建议先在<a href=\"https://www.luogu.com.cn/training/list\">洛谷题单</a>完成入门系列之后再来看VEX的教程</p>\n<h2 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h2><p>支持VEX程序的软件有 <a href=\"https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user\">vscode</a> 、<em>VEXcode pro v5</em> 等，本教程只介绍 <em><strong>vscode</strong></em> 的使用<br>点击此处的链接可以下载到 <em>vscode</em> 的安装包<br>打开 <em>vscode</em> 之后，需要下载拓展 <em>chinese</em> , <em>c&#x2F;c++</em> , <em>VEX Robotics</em><br><code>如果有兴趣可以追加拓展 Better C++ Syntax 、 C/C++ Compile Run 、 Dracula Official 、 CodeGeeX 等</code><br>另外，为了防患于未然，下载一个 <em>git</em> 和及时把代码上传到 <em>github</em> 是相当的有必要的<br>（我才不会告诉你我有一次文件损坏了只好从头重写呢）<br>下载 <em>git</em> 只需要跟着 <em>vscode</em> 的窗口一通按就好了，如何使用请看网上的<a href=\"https://www.runoob.com/git/git-tutorial.html\">教程</a><br>可以点击 <em>打开文件夹</em> 来开始你的代码</p>\n<h2 id=\"硬件条件\"><a href=\"#硬件条件\" class=\"headerlink\" title=\"硬件条件\"></a>硬件条件</h2><h3 id=\"主机\"><a href=\"#主机\" class=\"headerlink\" title=\"主机\"></a>主机</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/30bda85ee2d0a3bc594fb858377d6b63.png\" alt=\"主机图\">  </p>\n<h3 id=\"手柄\"><a href=\"#手柄\" class=\"headerlink\" title=\"手柄\"></a>手柄</h3><p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/968d794a5f0ca8bc9c740b824c06866b.jpg\" alt=\"手柄正面图\">  </p>\n<p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/fc5565c734a368637488c795360e6c48.jpg\" alt=\"手柄背面图\">  </p>\n<h3 id=\"场控\"><a href=\"#场控\" class=\"headerlink\" title=\"场控\"></a>场控</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"场控图\">  </p>\n<h3 id=\"钢条\"><a href=\"#钢条\" class=\"headerlink\" title=\"钢条\"></a>钢条</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"钢条图\">  </p>\n<h3 id=\"传感器\"><a href=\"#传感器\" class=\"headerlink\" title=\"传感器\"></a>传感器</h3><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"传感器图\">  </p>\n<h3 id=\"电机\"><a href=\"#电机\" class=\"headerlink\" title=\"电机\"></a>电机</h3><p><img src=\"https://picdm.sunbangyan.cn/2023/11/13/b86c1e9a14d043aec8aacf6a918774dc.jpg\" alt=\"电机图\">  </p>\n<h3 id=\"气泵\"><a href=\"#气泵\" class=\"headerlink\" title=\"气泵\"></a>气泵</h3><p><img src=\"https://picst.sunbangyan.cn/2023/11/13/04aceda6d70c2f7adc2594376fa5c41b.jpg\" alt=\"气泵图\">  </p>\n<h2 id=\"VEX社区\"><a href=\"#VEX社区\" class=\"headerlink\" title=\"VEX社区\"></a>VEX社区</h2><pre><code>VEX在[B站](https://www.bilibili.com/)中并不算极小众的，其中更新的比较多的up主是[TXTaylor297992](https://space.bilibili.com/1684280853)   \n此外，VEX有[中文官方论坛](https://vexforum.cn/)，在这里可以下载到官方给出的规则文档和场地拼接的文档\n</code></pre>\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><h2 id=\"面向对象思维的介绍及引入\"><a href=\"#面向对象思维的介绍及引入\" class=\"headerlink\" title=\"面向对象思维的介绍及引入\"></a>面向对象思维的介绍及引入</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\">wiki介绍</a><br>程序设计思维中，与 <em><strong>面向对象</strong></em> 相对的概念叫做 <em><strong>面向过程</strong></em> 。<br>后者考虑问题是通常把问题拆分成几个小问题，在编写程序中对应的行为一般有编写若干个函数。由于OI中一般只要考虑一个主问题即可，所以面向对象在OI中出现较多<br>前者则是将一个个功能封装进 <em>对象</em> 中，其对应的行为以实现 <em>类(class)</em> 为典型。这种程序设计的思维在 项目化编程 中有极大的优点——重用性、灵活性和扩展性 高<br>在此处，我们将从<a href=\"https://www.runoob.com/cplusplus/cpp-classes-objects.html\">class</a>的声明、定义、使用来入手，切实的感受 <em><strong>面向对象</strong></em> 的代码风格</p>\n<h2 id=\"classの定义\"><a href=\"#classの定义\" class=\"headerlink\" title=\"classの定义\"></a>classの定义</h2><p><a href=\"https://www.runoob.com/cplusplus/cpp-classes-objects.html\"><img src=\"https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11.png\" alt=\"菜鸟教程给出的定义结构\"></a></p>\n<h3 id=\"类-及-类名\"><a href=\"#类-及-类名\" class=\"headerlink\" title=\"类 及 类名\"></a>类 及 类名</h3><p>给类取名的时候，可以参照<a href=\"https://www.runoob.com/cplusplus/cpp-data-structures.html\">struct</a>，命名规则和变量一致<br>类的名字以及成员变量 <em><strong>最好</strong></em> 有实际意义，例：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span><span class=\"token comment\">//人的名字</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">;</span><span class=\"token comment\">//C代表语文，M代表数学，E代表英语</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a><a href=\"https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html\">访问修饰符</a></h3><p><code>本教程不涉及 继承 以及 protected 的使用，因为本教程用不到它们</code></p>\n<ul>\n<li>public<br>  公有成员在程序中类的外部是可访问的<br>  public下的成员变量以及成员函数的使用与<code>struct</code>无异</li>\n<li>private<br>  成员和类的默认访问修饰符是 private<br>  私有成员变量或函数在类的外部是<code>不可访问</code>的，甚至是<code>不可查看</code>的。只有<code>类和友元函数</code>可以访问私有成员。<br>  例:  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> wid <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//相当于换行写了   Box b;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n  在这个例子中，变量width的访问修饰符是private，因此<code>b.width</code>的写法是非法的<br>  正确的做法是，通过<code>b.setwidth(double wid)</code>来设置<code>width</code>的值；<br>  通过<code>b.getWidth()</code>来获得<code>width</code>的值<br>  类似这种 <strong>在私有区域定义数据，在公有区域定义相关的函数，以便在类的外部也可以调用这些函数</strong> 的做法一般叫做 <em><strong>数据封装</strong></em>      这样能避免受到外界的干扰和误用，从而确保了安全<br>  样例中的<code>length</code>就不符合数据封装的原则，不要这样写 <del>否则你有可能会被狠狠批斗的</del></li>\n</ul>\n<h3 id=\"重载函数和重载运算符\"><a href=\"#重载函数和重载运算符\" class=\"headerlink\" title=\"重载函数和重载运算符\"></a><a href=\"https://www.runoob.com/cplusplus/cpp-overloading.html\">重载函数和重载运算符</a></h3><h4 id=\"重载函数\"><a href=\"#重载函数\" class=\"headerlink\" title=\"重载函数\"></a>重载函数</h4><p>C++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。<br>在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的<strong>形式参数</strong>（个数、类型或顺序）必须不同。     我们不能仅通过<strong>返回类型</strong>的不同来重载函数。<br>重载函数可以为我们调用功能较相近的函数时提供便利,例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 哦对了，重载函数在class外也是可以使用的哦</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">float</span> t<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">bool</span> t<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 以下是在类中使用的</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">printer</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> a<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string a<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//错误示范</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//主函数</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    printer p<span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">114514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n1919810\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">' '</span><span class=\"token operator\">&lt;&lt;</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"重载运算符\"><a href=\"#重载运算符\" class=\"headerlink\" title=\"重载运算符\"></a>重载运算符</h4><p>在c++中，运算符实际上也可以看作是一种函数，因此，就出现了<strong>重载运算符</strong>的用法<br>在这里我们介绍 <a href=\"https://www.runoob.com/cplusplus/assignment-operators-overloading.html\">赋值运算符  &#x3D; </a><br>多说无益，直接上样例：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//平面直角坐标系中的一个点</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span> <span class=\"token comment\">//坐标</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  \n            <span class=\"token comment\">//此处const node&amp; n 也可以写作node n</span>\n            <span class=\"token comment\">//使用&amp;是为了提高效率，使用const是为了防止n的值被这里的赋值函数更改</span>\n            x <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 等效于 this->x = n.x;</span>\n            y <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 等效于 this->y = n.y;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">friend</span> istream <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span>node<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 不要求掌握，看看就好</span>\n            in<span class=\"token operator\">>></span>n<span class=\"token punctuation\">.</span>x<span class=\"token operator\">>></span>n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\nnode n<span class=\"token punctuation\">;</span>\n    node m<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// 这段代码没有什么意义，只是为了说明重载运算符后类的运算就可以用符合我们原有习惯的写法来编写程序这一点而已</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>；\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看出，使用重载运算符的写法非常符合我们对变量的编写习惯。<br>这使得我们在使用类时感到非常的舒适 XD<br>需要注意的是，所有的运算符函数都是放在 <em><strong>public</strong></em> 访问修饰符下的     (其中 流运算符 是以友元函数的形式)</p>\n<h3 id=\"构造函数和析构函数，拷贝构造函数\"><a href=\"#构造函数和析构函数，拷贝构造函数\" class=\"headerlink\" title=\"构造函数和析构函数，拷贝构造函数\"></a><a href=\"https://www.runoob.com/cplusplus/cpp-constructor-destructor.html\">构造函数和析构函数</a>，<a href=\"https://www.runoob.com/cplusplus/cpp-copy-constructor.html\">拷贝构造函数</a></h3><p>这三个函数是类中非常特殊的函数。通过它们可以实现 <strong>初始化新对象</strong>、<strong>释放对象占用内存</strong>、<strong>复制对象</strong> 的作用<br>如果不编写这三个函数，编译器都会自动加入这几个函数。但是如果类中涉及到<strong>指针</strong>和<strong>动态内存</strong>时需要格外注意，此时必须人为的编写 <em>析构函数</em> 和 <em>拷贝构造函数</em><br>切记，这三个函数都应放在 <em><strong>public</strong></em> 下</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>类的构造函数会在<strong>每次创建类的新对象时</strong>执行。     构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。     构造函数可用于为某些成员变量设置初始值。</p>\n<h4 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h4><p>类的析构函数会在<strong>每次删除所创建的对象时</strong>执行。     析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀     析构函数有助于在跳出程序（比如关闭文件、释放内存等）前<strong>释放资源</strong>。     默认析构函数不会释放成员指针变量所指向的内存空间，如果要释放的话，还需要人为定义释放。     因此，当类中存在<em>指针变量</em>并且有<em>动态内存</em>分配时，最好有一个析构函数用来释放内存     另外，析构函数<strong>不可以接受形参</strong>，因此不存在析构函数的重载函数</p>\n<h4 id=\"拷贝构造函数\"><a href=\"#拷贝构造函数\" class=\"headerlink\" title=\"拷贝构造函数\"></a>拷贝构造函数</h4><p>类的拷贝构造函数会在创建对象时，使用同一类中之前创建的对象来初始化新创建的对象。<br>函数一般有如下功能：</p>\n<ul>\n<li>通过使用另一个同类型的对象来 <em><strong>初始化</strong></em> 新创建的对象。</li>\n<li>复制对象并把它作为 ___函数参数___。</li>\n<li>复制对象并把它作为 ___函数返回值___。<br>如果在类中没有定义拷贝构造函数，编译器会自行定义一个。     如果类带有<em>指针变量</em>，并有<em>动态内存</em>分配，则它必须有一个拷贝构造函数。</li>\n</ul>\n<p>样例：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>    \n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//构造函数</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//带参数的构造函数</span>\n        <span class=\"token operator\">~</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">//析构函数</span>\n        <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//拷贝构造函数</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nnode<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>                  <span class=\"token comment\">//在类外定义函数时需要在函数名前加上“类名::”</span>\n    n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">//为指针分配内存</span>\n    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nnode<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">node</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">delete</span> n<span class=\"token punctuation\">;</span>                     <span class=\"token comment\">//释放指针内存</span>\n<span class=\"token punctuation\">&#125;</span>\nnode<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">//拷贝值</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">VALUE</span><span class=\"token punctuation\">(</span>node n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//拷贝构造函数的用法 II</span>\nnode <span class=\"token function\">bigger_one</span><span class=\"token punctuation\">(</span>node a<span class=\"token punctuation\">,</span>node b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>b<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//三元运算符  ? :  。?前条件成立则返回 : 前的，否则返回 : 后的</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    node n<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//无参数的构造函数可以省略</span>\n    node <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    \n    <span class=\"token comment\">//带参数的构造函数的调用需要在变量后加括号，就像函数一样</span>\n    node <span class=\"token function\">k</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//拷贝构造函数的用法 I</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">bigger_one</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//拷贝构造函数用法   III</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">bigger_one</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//构造函数的另类用法，其中遇到数值4时会调用node(int num)来把4转化为node类型</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"头文件与注释，cpp与定义\"><a href=\"#头文件与注释，cpp与定义\" class=\"headerlink\" title=\"头文件与注释，cpp与定义\"></a><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%B4%E6%96%87%E4%BB%B6\">头文件</a>与注释，cpp与定义</h3><p>还记得前文提到过 class 有着较高 重用性，灵活性，拓展性 吗？<br>如果在每一个程序的头部复制大量的class的定义，那么这种灵活性就荡然无存了<br>因此，就不得不介绍头文件了</p>\n<p>一个头文件一般包含类、子程序、变量和其他标识符的前置声明<br>习惯上，<em>函数、类、枚举类、常量</em>的声明会放在头文件中，即<code>xxx.h</code><br>而对应的<em>函数、类</em>的源码以及<em>注释</em>则会放在对应的源文件中，即<code>xxx.cpp</code><br>值得注意的是，为了防止头文件被反复调用造成重复声明的错误，头文件应在首行加入</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// xxx.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">XXX</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">XXX</span></span>\n<span class=\"token comment\">//你的代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>多说无用，下面摆上样例          </p>\n<p><a href=\"https://blog.csdn.net/weixin_30500289/article/details/96110759\">样例：实现高精度算法</a><br>样例的代码非常的长，但是使用时只需要：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"intx.h\"</span></span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>另外，vscode是支持<a href=\"https://www.cnblogs.com/schips/p/12200388.html\">doxygen注释</a>的     <a href=\"https://doxygen.nl/manual/\">Doxygen官方文档</a><br>在头文件中使用doxygen注释，可以对声明的类，函数进行说明<br>鼠标在引用了对应头文件的文件中只需要悬停在函数&#x2F;变量&#x2F;类&#x2F;命名空间&#x2F;…上就可以快捷的获知该处的注释<br>样例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// node.h</span>\n<span class=\"token comment\">/**\n * @class node\n * @brief 表示一个平面直角坐标系中的一个点\n***/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/**\n         * @brief 表示坐标 \\f$\\left ( x,y \\right )\\f$\n        ***/</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/**\n         * @brief 初始化\n         * @param a 对应x坐标\n         * @param b 对应y坐标\n        ***/</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n           y <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">/**\n         * @brief 计算距离\n         * @param n 第二个坐标点\n         * @return 两点距离的平方\n        ***/</span>\n        <span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>node n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>x <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>x <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>y <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>y <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>鼠标悬停效果图<br>   <img src=\"https://picdl.sunbangyan.cn/2023/11/13/f733c7f3255c153f7c3b739af3aa4fad.png\" alt=\"node的样例\"><br>   <img src=\"https://picss.sunbangyan.cn/2023/11/13/eda1e9a2bb9d2267a57071ee053221ee.png\" alt=\"set()的样例\"><br>   <img src=\"https://picss.sunbangyan.cn/2023/11/13/d723d6d27e66114087a12f7b2d6c430b.png\" alt=\"dist()的样例\">     </p>\n<h3 id=\"后期学习方式\"><a href=\"#后期学习方式\" class=\"headerlink\" title=\"后期学习方式\"></a>后期学习方式</h3><p> 学会了class的阅读、编写后，我们进入后面的学习就有了一定的基础<br>   在vscode中，<em><strong>ctrl+左键</strong></em>可以查看头文件、函数、类的定义区域<br>   进入<code>v5_vcs.h</code>-&gt;<code>v5_cpp.h</code>-&gt;<code>需要查询的文件</code>，就可以看到官方给出的所有函数的定义。<br>   <img src=\"https://picss.sunbangyan.cn/2023/11/13/876f9447986e256e48ac73d7df16cf0a.png\" alt=\"01-6-e1\"><br>    <img src=\"https://picss.sunbangyan.cn/2023/11/13/262d62b1cc74dc22bb1e75e63a734ad7.png\" alt=\"01-6-e2\"><br>    <img src=\"https://picst.sunbangyan.cn/2023/11/13/4ed72494d898de9ac52b3f04d58b1062.png\" alt=\"01-6-e3\"><br>   当然，我会在接下来的章节来挑选重点的函数来讲解。有兴趣有余力的同学可以根据这个方法自行探究。     </p>\n<h1 id=\"主机-brain-与手柄-Controller\"><a href=\"#主机-brain-与手柄-Controller\" class=\"headerlink\" title=\"主机(brain)与手柄(Controller)\"></a>主机(brain)与手柄(Controller)</h1><h2 id=\"主机、手柄、电脑之间的硬件连接\"><a href=\"#主机、手柄、电脑之间的硬件连接\" class=\"headerlink\" title=\"主机、手柄、电脑之间的硬件连接\"></a>主机、手柄、电脑之间的硬件连接</h2><p><img src=\"https://picdl.sunbangyan.cn/2023/11/13/c74888fd0e1f50f7ab819dddddd89bae.png\" alt=\"连线图\">     </p>\n<h2 id=\"创建新的VEX工程文件、文件标题规范、文件储存位置\"><a href=\"#创建新的VEX工程文件、文件标题规范、文件储存位置\" class=\"headerlink\" title=\"创建新的VEX工程文件、文件标题规范、文件储存位置\"></a>创建新的VEX工程文件、文件标题规范、文件储存位置</h2><p>从VEX插件中 顺次点击 <code>new project -&gt; v5 -&gt; c++ -&gt; competition template -&gt; 命名项目名字 -&gt; create</code>，一个新的VEX工程文件就创建了</p>\n<h2 id=\"Brain-functions\"><a href=\"#Brain-functions\" class=\"headerlink\" title=\"Brain.functions()\"></a>Brain.functions()</h2><p>鉴于LXB水平有限，所以这里只讲一部分重要的函数</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.h</span>\n<span class=\"token keyword\">extern</span> brain Brain<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>构造函数没有参数输入</p>\n<h3 id=\"brain-timer\"><a href=\"#brain-timer\" class=\"headerlink\" title=\"brain.timer\"></a>brain.timer</h3><ul>\n<li>定义  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_brain.cpp</span>\n<span class=\"token comment\">/** \n * @brief 以指定的单位获取计时器的值。\n * @param units 时间单位。有 sec (秒) 和 msec (毫秒)\n * @return 返回一个双精度值，该值表示计时器的值。\n */</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span> timeUnits units <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** \n * @brief 将计时器重置为零。\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用例  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">float</span> xxx<span class=\"token punctuation\">;</span>\nBrain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 虽然在这里没必要但是这是一个好习惯</span>\nxxx <span class=\"token operator\">=</span> Brain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span>sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> Brain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span>msec<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> xxx<span class=\"token operator\">*</span><span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token number\">1145</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//空循环，经过1.145s之后会继续</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"brain-screen\"><a href=\"#brain-screen\" class=\"headerlink\" title=\"brain.screen\"></a>brain.screen</h3><ul>\n<li>定义  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_brain.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printAt</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">drawPixel</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用说明<br>  这里的<code>print()</code>函数的使用和<code>printf()</code>无异<br>  <code>printAt()</code>添加了参数<code>x</code>、<code>y</code>,含义是在主机屏幕输出时开始的坐标<br>  <code>drawPixel</code>是在屏幕的(x,y)处绘制一个像素点</li>\n</ul>\n<h2 id=\"Controller-functions\"><a href=\"#Controller-functions\" class=\"headerlink\" title=\"Controller.functions()\"></a>Controller.functions()</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.h</span>\n<span class=\"token keyword\">extern</span> controller Controller<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>和 <code>brain</code> 的定义一样平淡</p>\n<h3 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h3><p><img src=\"/image/01-4-2-2.jpg\"><br>图中按钮可用的共有10个，分别是：<br>    - ButtonLeft<br>    - ButtonRight<br>    - ButtonUp<br>    - ButtonDown<br>    - ButtonA<br>    - ButtonB<br>    - ButtonX<br>    - ButtonY<br>    - ButtonL1<br>    - ButtonL2<br>    - ButtonR1<br>    - ButtonR2</p>\n<p>他们都属于 <code>controller</code>类中的成员类<code>button</code>，有以下成员函数：</p>\n<ul>\n<li>pressing()<br>  检查当下，如果按钮被按下则返回<code>true</code>，否则返回<code>false</code>。</li>\n<li>pressed()<br>  形参需要填入一个<code>void</code>函数的函数名来调用<br>  下次按钮被按下的时候调用函数</li>\n</ul>\n<p>使用例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// ...</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> Controller1<span class=\"token punctuation\">.</span>ButtonA<span class=\"token punctuation\">.</span><span class=\"token function\">pressing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// ...</span>\n   <span class=\"token punctuation\">&#125;</span>\n   Controller1<span class=\"token punctuation\">.</span>ButtonB<span class=\"token punctuation\">.</span><span class=\"token function\">pressed</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"摇杆\"><a href=\"#摇杆\" class=\"headerlink\" title=\"摇杆\"></a>摇杆</h3><p>遥控器上看似只有两个遥感，实际上程序中对应了4个<code>axis</code>对象:</p>\n<ul>\n<li>Axis1</li>\n<li>Axis2</li>\n<li>Axis3</li>\n<li>Axis4</li>\n</ul>\n<p>一个遥杆可以向任意二维方向旋转，每一个二维的位置都可以用二维坐标来表示。也就是说，一个摇杆对应了两个不同方向的<code>axis</code>对象。<br>其中，<code>Axis1</code>和<code>Axis4</code>都是横向的，<code>Axis2</code>和<code>Axis3</code>都是竖向的。<br><code>axis</code>一般只使用成员函数<code>position()</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Dipan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 底盘运动函数</span>\n   <span class=\"token keyword\">float</span> a1 <span class=\"token operator\">=</span> Controller1<span class=\"token punctuation\">.</span>Axis1<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">float</span> a3 <span class=\"token operator\">=</span> Controller1<span class=\"token punctuation\">.</span>Axis3<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a3<span class=\"token operator\">+</span>a1<span class=\"token punctuation\">,</span>a3<span class=\"token operator\">-</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"屏幕\"><a href=\"#屏幕\" class=\"headerlink\" title=\"屏幕\"></a>屏幕</h3><p>有时，我们需要在遥控器上面显示信息来提示操作手。例如，改变了某个电机的转速时，通过提示操作手可以方便操作手进行下一步操作。<br>下面是在屏幕上显示一段文字的实例:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_debug_file.cpp</span>\n<span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#123;</span>\n   Controller1<span class=\"token punctuation\">.</span>Screen<span class=\"token punctuation\">.</span><span class=\"token function\">clearLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清空之前的消息</span>\n   Controller1<span class=\"token punctuation\">.</span>Screen<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电机温度:%.2f ℃\"</span><span class=\"token punctuation\">,</span>MotorShot<span class=\"token punctuation\">.</span><span class=\"token function\">temperature</span><span class=\"token punctuation\">(</span>celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出格式同std::printf()</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"电机-motor-与运动\"><a href=\"#电机-motor-与运动\" class=\"headerlink\" title=\"电机(motor)与运动\"></a>电机(motor)与运动</h1><h2 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h2><p><code>motor</code>的构造函数有3个参数(建议都填入),分别是<code>index</code>、<code>gears</code>、<code>reverse</code>。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_motor.h</span>\n<span class=\"token function\">motor</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int32_t</span> index<span class=\"token punctuation\">,</span> gearSetting gears<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> reverse <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><p><code>index</code><br> 表明电机接入的端口。<br> 主机上有两排端口,编号1-22。电机接入第<code>N</code>个端口就写 <code>PORTN</code></p>\n</li>\n<li><p><code>gears</code><br> 表明电机转速比<br> 有三种转速比,<code>ratio6_1</code>、<code>ratio18_1</code>、<code>ratio36_1</code>,     分别对应三种颜色的电机:蓝电机、绿电机、红电机     </p>\n<p> <img src=\"/image/motor_radio.png\">     </p>\n</li>\n<li><p><code>reverse</code><br> 电机默认转向:正转or反转</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.h</span>\n<span class=\"token comment\">// ...</span>\nmotor MotorLF <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT1<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmotor MotorLB <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT2<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmotor MotorRF <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT3<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmotor MotorRB <span class=\"token operator\">=</span> <span class=\"token function\">motor</span><span class=\"token punctuation\">(</span>PORT4<span class=\"token punctuation\">,</span>radio18_1<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"电机-与-手动控制程序\"><a href=\"#电机-与-手动控制程序\" class=\"headerlink\" title=\"电机 与 手动控制程序\"></a>电机 与 手动控制程序</h2><h3 id=\"电机转动\"><a href=\"#电机转动\" class=\"headerlink\" title=\"电机转动\"></a>电机转动</h3><ul>\n<li><p><code>spin()</code><br> 此函数会让电机以指定速度旋转。     </p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_motor.h</span>\n<span class=\"token comment\">/**\n* @brief 打开电机并按指定方向和指定速度旋转。\n* @param dir 电机旋转的方向。有 forward 和 reverse 两种值。也支持 fwd 和 rev 两种缩写\n* @param velocity 速度大小。值域[-100.0,100.0]。超出则化为 ±100\n* @param units 速度的单位。常用 percent ,也可缩写为 pct\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">spin</span><span class=\"token punctuation\">(</span> directionType dir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> velocity<span class=\"token punctuation\">,</span> velocityUnits units <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p> 以底盘的运动程序为例：</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p><code>stop()</code><br> 使电机停止(停止向电机供电)</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/** \n* @brief 使用默认制动模式停止电机。\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** \n* @brief 使用指定的制动模式停止电机。\n* @param mode 制动模式可以设置为滑行(coast)、制动(brake)或保持(hold)。\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span> brakeType mode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p> 以底盘的停止运行为例:</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>coast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>hold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>底盘的停止一般使用<code>coast</code>。这是为了防止<code>hold</code>状态下机器人被碰撞导致电机的损坏。<br>自动程序中由于有<code>不允许进入对手场地</code>的规则，因此只要队伍内部有配合，就不用讨论上述的问题</p>\n</li>\n</ul>\n<h3 id=\"监测电机\"><a href=\"#监测电机\" class=\"headerlink\" title=\"监测电机\"></a>监测电机</h3><ul>\n<li><code>double position( rotationUnits units )</code><br>返回电机转过的角度<br>一般填入单位 degrees     </li>\n<li><code>void resetPosition()</code><br>重置 <code>position()</code>的返回值<br>重置需要一小段时间，重置时尽量保持电机的静止</li>\n<li><code>double temperature( temperatureUnits units );</code><br>返回电机此时的温度<br>可填入单位 摄氏度(<code>celsius</code>)     </li>\n<li>…</li>\n</ul>\n<h1 id=\"陀螺仪-与-自动转弯\"><a href=\"#陀螺仪-与-自动转弯\" class=\"headerlink\" title=\"陀螺仪 与 自动转弯\"></a>陀螺仪 与 自动转弯</h1><h2 id=\"声明、命名\"><a href=\"#声明、命名\" class=\"headerlink\" title=\"声明、命名\"></a>声明、命名</h2><pre><code>需要填入的参数仅有端口\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_imu.h</span>\n<span class=\"token function\">inertial</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int32_t</span> index<span class=\"token punctuation\">,</span> turnType dir <span class=\"token operator\">=</span> turnType<span class=\"token double-colon punctuation\">::</span>right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n声明比`motor`简单\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.cpp</span>\ninertial ine <span class=\"token operator\">=</span> <span class=\"token function\">inertial</span><span class=\"token punctuation\">(</span>PORT11<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</code></pre>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>类似于<code>motor</code>中的<code>position()</code>，对陀螺仪初始化是必要的。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//初始化底盘电机</span>\n  MotorLF<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  MotorLB<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  MotorRF<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  MotorRB<span class=\"token punctuation\">.</span><span class=\"token function\">resetPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//初始化陀螺仪</span>\n  ine<span class=\"token punctuation\">.</span><span class=\"token function\">calibrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//初始化计时器</span>\n  Brain<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"数据检测\"><a href=\"#数据检测\" class=\"headerlink\" title=\"数据检测\"></a>数据检测</h2><p>仅介绍最常用的<code>heading()</code>,其他函数仅作涉及</p>\n<ul>\n<li><p><code>heading()</code></p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * @brief 获取惯性传感器的水平方向,方向角取值范围 [0,360] ,单位:度\n * @return 返回一个double值，该值表示惯性传感器的方向。\n * @param units 单位,默认为度\n */</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">heading</span><span class=\"token punctuation\">(</span> rotationUnits units <span class=\"token operator\">=</span> rotationUnits<span class=\"token double-colon punctuation\">::</span>deg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>rotation()</code><br> 获取仰角</p>\n</li>\n</ul>\n<h2 id=\"自动程序中的转弯问题\"><a href=\"#自动程序中的转弯问题\" class=\"headerlink\" title=\"自动程序中的转弯问题\"></a>自动程序中的转弯问题</h2><p>自动程序中，是不可以通过操作手柄来给机器人输入数据的。因此，机器人在自动赛时段的运动完全依靠程序的预设。<br><em>如何让机器人旋转到我们需要的方向？</em>     </p>\n<p>最简单的写法是使用计时器。机器人旋转的速度是粗略相等的，因此在程序开发时间较短的情况下，这可以作为最后的保底程序来使用。<br>   <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_auto_file.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">turn_with_timer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">int</span> turn_speed<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      turn_speed<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n      t<span class=\"token operator\">=</span><span class=\"token operator\">-</span>t<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>                                   <span class=\"token comment\">// 左右转放在同一程序里</span>\n   <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>turn_speed<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>turn_speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>msec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 定义见于vex.h中</span>\n   <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 旋转结束建议锁死，以提高准确度</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>但是这并不是一个合适的方案。我们难以控制每次旋转时的环境因素保持一样(比如地面摩擦系数，电机温度，电池电压等)。有时这种小小的偏差就会导致行进线路的变形，会影响到之后的自动任务，甚至可能<code>DQ(犯规)</code>。<br>在精准转弯的要求下，我们便需要陀螺仪来帮助校准。  </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// your_auto_file.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"extensions.h\"</span>    <span class=\"token comment\">// include pids.h</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">turn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  pids turning <span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 定义pid算法对象</span>\n  turning<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>deg<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 向pid系统中输入目标和最大允许偏差</span>\n  <span class=\"token keyword\">float</span> movement<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 记录每次pid系统反馈的运动量</span>\n  Ine<span class=\"token punctuation\">.</span><span class=\"token function\">calibrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 初始化陀螺仪</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> turning<span class=\"token punctuation\">.</span><span class=\"token function\">check</span> <span class=\"token punctuation\">(</span>Ine<span class=\"token punctuation\">.</span><span class=\"token function\">heading</span><span class=\"token punctuation\">(</span>degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n                          <span class=\"token comment\">// 当机器人还未稳定在最大允许偏差区间内时一直不断调整</span>\n    movement <span class=\"token operator\">=</span> turning<span class=\"token punctuation\">.</span><span class=\"token function\">moving</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>movement <span class=\"token operator\">*</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span>movement <span class=\"token operator\">*</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token comment\">// 运动</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// pid算法下机器人旋转的末速度很小，不需要hold</span>\n  <span class=\"token function\">wait</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span>sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 等待机器人彻底停止</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>PID算法</code>将在<a href=\"/README.md/#07-pid%E7%B2%BE%E7%A1%AE%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95\">第7章节</a>中详细介绍其优缺点。</p>\n<h2 id=\"画外吐槽\"><a href=\"#画外吐槽\" class=\"headerlink\" title=\"画外吐槽\"></a>画外吐槽</h2><p>我非常讨厌陀螺仪<br>因为它带给我的回忆除了出bug就是掉链子     </p>\n<p><a href=\"https://www.bilibili.com/video/BV1FW4y1V7af\">陀螺仪发癫珍贵录像</a></p>\n<h1 id=\"气泵-1\"><a href=\"#气泵-1\" class=\"headerlink\" title=\"气泵\"></a>气泵</h1><h2 id=\"定义、命名\"><a href=\"#定义、命名\" class=\"headerlink\" title=\"定义、命名\"></a>定义、命名</h2><p>气泵的程序其实是最简单的，只不过定义和电机或者传感器都有点区别</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// vex_triport.h</span>\n<span class=\"token comment\">/**\n* @brief 在参数中指定的三线端口上创建新的digital_out对象。\n* @param port 三线端口。\n*/</span>\n<span class=\"token function\">digital_out</span><span class=\"token punctuation\">(</span> triport<span class=\"token double-colon punctuation\">::</span>port <span class=\"token operator\">&amp;</span>port <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>triport</code>和电机端口的<code>int32_t</code>不同     </p>\n<table>\n<thead>\n<tr>\n<th>port :</th>\n<th>int32_t</th>\n<th>triport</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>个数</td>\n<td>21</td>\n<td>8</td>\n</tr>\n<tr>\n<td>编号</td>\n<td>1-22</td>\n<td>A-H</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>主机上下两侧</td>\n<td>主机左侧</td>\n</tr>\n<tr>\n<td>格式</td>\n<td>PORTn</td>\n<td>Brain.ThreeWirePort.N</td>\n</tr>\n</tbody></table>\n<p>习惯上把气泵命名为 <code>pne</code> (Pneumatic components)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// robot-config.cpp</span>\ndigital_out <span class=\"token function\">pne</span> <span class=\"token punctuation\">(</span> Brain<span class=\"token punctuation\">.</span>ThreeWirePort<span class=\"token punctuation\">.</span>A <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"实物介绍\"><a href=\"#实物介绍\" class=\"headerlink\" title=\"实物介绍\"></a>实物介绍</h2><p>气泵的程序很简单，但是气泵的部件比电机复杂的多<br><img src=\"/image/05-2-e1.png\"><br>图中的结构中，通过程序所能操作的仅仅是 发送到&#x2F;接受数据于 <code>换向阀驱动器</code> ，从而改变换向阀联通的状态。<br>机器人上是否使用气泵，需要考虑机械师的技术水平。因为程序能在气泵上做的事情太少太简单了。</p>\n<h2 id=\"functions\"><a href=\"#functions\" class=\"headerlink\" title=\"functions\"></a>functions</h2><ul>\n<li><code>set()</code><br>设置气泵的伸缩状态。<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n   * @brief 将digital_out设备设置为布尔值。\n   * @param value 布尔值。(true or false)\n   */</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">bool</span> value <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n当<code>pne.set(true)</code>执行后，换向阀驱动器将会亮起红灯<br>当<code>pne.set(false)</code>执行后，换向阀驱动器红队将会熄灭</li>\n<li>value()<br>读取气泵的状态<br><code>pne.set(true)</code>后，value的返回值就会变为<code>true</code>，反之亦然。</li>\n</ul>\n<h1 id=\"视觉传感器\"><a href=\"#视觉传感器\" class=\"headerlink\" title=\"视觉传感器\"></a>视觉传感器</h1><ol>\n<li>定义、命名</li>\n<li>初始化</li>\n<li>颜色设置 和 识别机制的介绍</li>\n<li>返回值</li>\n</ol>\n<h1 id=\"PID精确控制算法\"><a href=\"#PID精确控制算法\" class=\"headerlink\" title=\"*PID精确控制算法\"></a>*PID精确控制算法</h1><ol>\n<li>定义</li>\n<li>原理介绍</li>\n<li>使用方法</li>\n<li>优缺点<br>优点在本章中已经反复强调了,就是通过pid算法的控制，机器人能够精确的运动。<br>缺点就是把pid的算法中用于前进的控制中会大大降低前进的效率<br>这种缺点只会体现在<em><strong>需要停止的运动</strong></em>中，比如说<strong>前进</strong>、<strong>转弯</strong>这类运动中。pid最适合的应用应该是 <em><strong>一直维持某种状态</strong></em> 的情况下，例如 <strong>平衡车的平衡</strong> , 这时pid的运行是贯彻平衡车运动的始终的，也就不存在所谓<strong>超时</strong>的问题了。</li>\n</ol>\n<h1 id=\"手动程序\"><a href=\"#手动程序\" class=\"headerlink\" title=\"手动程序\"></a>手动程序</h1><ol>\n<li>与操作手对接</li>\n<li>底盘方案<ul>\n<li>左前进右旋转</li>\n<li>万向底盘</li>\n<li>无头模式</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"自动程序\"><a href=\"#自动程序\" class=\"headerlink\" title=\"自动程序\"></a>自动程序</h1><ol>\n<li>自动赛规则</li>\n<li>前进控制</li>\n<li>转弯控制</li>\n<li>完成自动赛任务</li>\n<li>多备案 + 耐心</li>\n</ol>\n<h1 id=\"规则类怪谈\"><a href=\"#规则类怪谈\" class=\"headerlink\" title=\"规则类怪谈\"></a>规则类怪谈</h1><ol>\n<li>码风要求</li>\n<li>注释规范化</li>\n<li>请参与github的更新</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clryo33dc0000wswke5y3bx1k","tag_id":"clryo8wba0000bowkaunu8lij","_id":"clryo8wbc0001bowk6hj76cai"}],"Tag":[{"name":"杂谈","_id":"clryo8wba0000bowkaunu8lij"},{"name":"VEX","_id":"cls0b0m6s000108wk3ahx7zwv"}]}}